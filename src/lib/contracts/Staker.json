{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BalanceDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BalanceWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollectRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_endTime",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "apy",
          "type": "uint256"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin_",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "rewardType",
          "type": "uint16"
        }
      ],
      "name": "collectRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Sig",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "collectRewardsBy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        }
      ],
      "name": "getHoldingInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qty",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "accumRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct HoldingInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        }
      ],
      "name": "getHoldingInfoRaw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qty",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "accumRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct HoldingInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        }
      ],
      "name": "getStakingInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "qty",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "term",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "accumRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        }
      ],
      "name": "getStakingInfoRaw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "qty",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "term",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "accumRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "isProjectEnd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qty",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "accumRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct HoldingInfo",
          "name": "holding",
          "type": "tuple"
        }
      ],
      "name": "setHoldingInfoData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_projectMan",
          "type": "address"
        }
      ],
      "name": "setProjectMan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "projectId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/access/Ownable.sol",
    "1": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/security/ReentrancyGuard.sol",
    "10": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/Address.sol",
    "11": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/Context.sol",
    "14": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/introspection/IERC165.sol",
    "17": "contracts/HasAdmin.sol",
    "19": "contracts/SigVerifier.sol",
    "20": "contracts/Staker.sol",
    "25": "contracts/interfaces/ICoin.sol",
    "26": "contracts/interfaces/IProjectMan.sol",
    "27": "contracts/types/HoldingInfo.sol",
    "28": "contracts/types/ProjectInfo.sol",
    "29": "contracts/types/StakeInfo.sol",
    "3": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC1155/IERC1155.sol",
    "7": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC20/IERC20.sol",
    "9": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC20/utils/SafeERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/Staker.sol",
    "exportedSymbols": {
      "ACTIVE": [
        4800
      ],
      "Address": [
        5205
      ],
      "CLOSED": [
        4806
      ],
      "Context": [
        5773
      ],
      "EIP712Base": [
        6844
      ],
      "ERC1155": [
        4652
      ],
      "ERC1155Tradable": [
        4791
      ],
      "ERC165": [
        5975
      ],
      "ERC20": [
        5751
      ],
      "HasAdmin": [
        3291
      ],
      "HoldingInfo": [
        3385
      ],
      "ICoin": [
        3374
      ],
      "IERC1155": [
        5895
      ],
      "IERC1155MetadataURI": [
        5951
      ],
      "IERC1155Receiver": [
        5936
      ],
      "IERC165": [
        6728
      ],
      "IERC20": [
        4908
      ],
      "IERC20Metadata": [
        6716
      ],
      "IHasAdmin": [
        3235
      ],
      "IProjectMan": [
        4830
      ],
      "ISigVerifier": [
        3320
      ],
      "IStaker": [
        1504
      ],
      "MARKET_UNAVAILABLE": [
        4803
      ],
      "NOT_ACTIVE": [
        4797
      ],
      "NativeMetaTransaction": [
        6691
      ],
      "Ownable": [
        3531
      ],
      "OwnableDelegateProxy": [
        4661
      ],
      "PAUSED": [
        4809
      ],
      "ProjectInfo": [
        3414
      ],
      "ProxyRegistry": [
        4667
      ],
      "REWARD_TYPE_HOLDING": [
        1415
      ],
      "REWARD_TYPE_STAKING": [
        1418
      ],
      "ReentrancyGuard": [
        3571
      ],
      "SafeERC20": [
        3220
      ],
      "SafeMath": [
        6490
      ],
      "Sig": [
        3300
      ],
      "SigVerifier": [
        3366
      ],
      "StakeInfo": [
        3427
      ],
      "Staker": [
        2996
      ],
      "Strings": [
        6178
      ]
    },
    "id": 2997,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1400,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:20"
      },
      {
        "absolutePath": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC1155/ERC1155.sol",
        "file": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol",
        "id": 1401,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 4653,
        "src": "119:59:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
        "id": 1402,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3221,
        "src": "179:65:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/security/ReentrancyGuard.sol",
        "file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
        "id": 1403,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3572,
        "src": "245:62:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/patur/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 1404,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3532,
        "src": "308:52:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/ERC1155Tradable.sol",
        "file": "./ERC1155Tradable.sol",
        "id": 1405,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 4792,
        "src": "362:31:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/interfaces/ICoin.sol",
        "file": "./interfaces/ICoin.sol",
        "id": 1406,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3375,
        "src": "394:32:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/interfaces/IProjectMan.sol",
        "file": "./interfaces/IProjectMan.sol",
        "id": 1407,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 4831,
        "src": "427:38:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/types/ProjectInfo.sol",
        "file": "./types/ProjectInfo.sol",
        "id": 1408,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3415,
        "src": "466:33:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/types/HoldingInfo.sol",
        "file": "./types/HoldingInfo.sol",
        "id": 1409,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3386,
        "src": "500:33:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/types/StakeInfo.sol",
        "file": "./types/StakeInfo.sol",
        "id": 1410,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3428,
        "src": "534:31:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/SigVerifier.sol",
        "file": "./SigVerifier.sol",
        "id": 1411,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3367,
        "src": "566:27:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/HasAdmin.sol",
        "file": "./HasAdmin.sol",
        "id": 1412,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2997,
        "sourceUnit": 3292,
        "src": "594:24:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "constant": true,
        "id": 1415,
        "mutability": "constant",
        "name": "REWARD_TYPE_HOLDING",
        "nameLocation": "636:19:20",
        "nodeType": "VariableDeclaration",
        "scope": 2997,
        "src": "620:39:20",
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint16",
          "typeString": "uint16"
        },
        "typeName": {
          "id": 1413,
          "name": "uint16",
          "nodeType": "ElementaryTypeName",
          "src": "620:6:20",
          "typeDescriptions": {
            "typeIdentifier": "t_uint16",
            "typeString": "uint16"
          }
        },
        "value": {
          "hexValue": "31",
          "id": 1414,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "658:1:20",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_1_by_1",
            "typeString": "int_const 1"
          },
          "value": "1"
        },
        "visibility": "internal"
      },
      {
        "constant": true,
        "id": 1418,
        "mutability": "constant",
        "name": "REWARD_TYPE_STAKING",
        "nameLocation": "677:19:20",
        "nodeType": "VariableDeclaration",
        "scope": 2997,
        "src": "661:39:20",
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint16",
          "typeString": "uint16"
        },
        "typeName": {
          "id": 1416,
          "name": "uint16",
          "nodeType": "ElementaryTypeName",
          "src": "661:6:20",
          "typeDescriptions": {
            "typeIdentifier": "t_uint16",
            "typeString": "uint16"
          }
        },
        "value": {
          "hexValue": "32",
          "id": 1417,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "699:1:20",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_2_by_1",
            "typeString": "int_const 2"
          },
          "value": "2"
        },
        "visibility": "internal"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IStaker",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 1504,
        "linearizedBaseContracts": [
          1504
        ],
        "name": "IStaker",
        "nameLocation": "713:7:20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "9dea67e3",
            "id": 1423,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setProjectMan",
            "nameLocation": "736:13:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1421,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1420,
                  "mutability": "mutable",
                  "name": "_projectMan",
                  "nameLocation": "758:11:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1423,
                  "src": "750:19:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1419,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "750:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "749:21:20"
            },
            "returnParameters": {
              "id": 1422,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "779:0:20"
            },
            "scope": 1504,
            "src": "727:53:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "aeaed1b7",
            "id": 1433,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getHoldingInfo",
            "nameLocation": "795:14:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1428,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1425,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "827:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1433,
                  "src": "819:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1424,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "819:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1427,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "848:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1433,
                  "src": "841:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1426,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "841:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "809:54:20"
            },
            "returnParameters": {
              "id": 1432,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1431,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1433,
                  "src": "887:18:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                    "typeString": "struct HoldingInfo"
                  },
                  "typeName": {
                    "id": 1430,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1429,
                      "name": "HoldingInfo",
                      "nameLocations": [
                        "887:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3385,
                      "src": "887:11:20"
                    },
                    "referencedDeclaration": 3385,
                    "src": "887:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                      "typeString": "struct HoldingInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "886:20:20"
            },
            "scope": 1504,
            "src": "786:121:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "947e89c8",
            "id": 1443,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getHoldingInfoRaw",
            "nameLocation": "922:17:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1438,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1435,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "957:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1443,
                  "src": "949:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1434,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "949:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1437,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "978:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1443,
                  "src": "971:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1436,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "971:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "939:54:20"
            },
            "returnParameters": {
              "id": 1442,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1441,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1443,
                  "src": "1017:18:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                    "typeString": "struct HoldingInfo"
                  },
                  "typeName": {
                    "id": 1440,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1439,
                      "name": "HoldingInfo",
                      "nameLocations": [
                        "1017:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3385,
                      "src": "1017:11:20"
                    },
                    "referencedDeclaration": 3385,
                    "src": "1017:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                      "typeString": "struct HoldingInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1016:20:20"
            },
            "scope": 1504,
            "src": "913:124:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "ccfcd622",
            "id": 1453,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setHoldingInfoData",
            "nameLocation": "1052:18:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1451,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1445,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "1088:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1453,
                  "src": "1080:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1444,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1080:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1447,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "1109:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1453,
                  "src": "1102:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1446,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1102:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1450,
                  "mutability": "mutable",
                  "name": "holding",
                  "nameLocation": "1147:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1453,
                  "src": "1128:26:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                    "typeString": "struct HoldingInfo"
                  },
                  "typeName": {
                    "id": 1449,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1448,
                      "name": "HoldingInfo",
                      "nameLocations": [
                        "1128:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3385,
                      "src": "1128:11:20"
                    },
                    "referencedDeclaration": 3385,
                    "src": "1128:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                      "typeString": "struct HoldingInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1070:90:20"
            },
            "returnParameters": {
              "id": 1452,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1169:0:20"
            },
            "scope": 1504,
            "src": "1043:127:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "08bc92d2",
            "id": 1463,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getStakingInfo",
            "nameLocation": "1185:14:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1458,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1455,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "1217:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1463,
                  "src": "1209:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1454,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1209:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1457,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "1241:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1463,
                  "src": "1234:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1456,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1234:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1199:57:20"
            },
            "returnParameters": {
              "id": 1462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1461,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1463,
                  "src": "1280:16:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                    "typeString": "struct StakeInfo"
                  },
                  "typeName": {
                    "id": 1460,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1459,
                      "name": "StakeInfo",
                      "nameLocations": [
                        "1280:9:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3427,
                      "src": "1280:9:20"
                    },
                    "referencedDeclaration": 3427,
                    "src": "1280:9:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                      "typeString": "struct StakeInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1279:18:20"
            },
            "scope": 1504,
            "src": "1176:122:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "ddb93b1a",
            "id": 1473,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getStakingInfoRaw",
            "nameLocation": "1313:17:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1465,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "1348:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1473,
                  "src": "1340:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1464,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1340:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1467,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "1369:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1473,
                  "src": "1362:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1466,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1362:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1330:54:20"
            },
            "returnParameters": {
              "id": 1472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1471,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1473,
                  "src": "1408:16:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                    "typeString": "struct StakeInfo"
                  },
                  "typeName": {
                    "id": 1470,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1469,
                      "name": "StakeInfo",
                      "nameLocations": [
                        "1408:9:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3427,
                      "src": "1408:9:20"
                    },
                    "referencedDeclaration": 3427,
                    "src": "1408:9:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                      "typeString": "struct StakeInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1407:18:20"
            },
            "scope": 1504,
            "src": "1304:122:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "45305ab8",
            "id": 1486,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateRewards",
            "nameLocation": "1441:16:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1482,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1475,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "1475:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1486,
                  "src": "1467:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1474,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1467:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1477,
                  "mutability": "mutable",
                  "name": "_startTime",
                  "nameLocation": "1499:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1486,
                  "src": "1492:17:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1476,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1492:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1479,
                  "mutability": "mutable",
                  "name": "_endTime",
                  "nameLocation": "1526:8:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1486,
                  "src": "1519:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1478,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1519:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1481,
                  "mutability": "mutable",
                  "name": "apy",
                  "nameLocation": "1552:3:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1486,
                  "src": "1544:11:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1480,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1544:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1457:104:20"
            },
            "returnParameters": {
              "id": 1485,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1484,
                  "mutability": "mutable",
                  "name": "rewards",
                  "nameLocation": "1593:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1486,
                  "src": "1585:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1585:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1584:17:20"
            },
            "scope": 1504,
            "src": "1432:170:20",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "363056a9",
            "id": 1493,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "collectRewards",
            "nameLocation": "1617:14:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1488,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "1639:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1493,
                  "src": "1632:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1487,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1632:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1631:18:20"
            },
            "returnParameters": {
              "id": 1492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1491,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1493,
                  "src": "1668:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1490,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1668:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1667:6:20"
            },
            "scope": 1504,
            "src": "1608:66:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "02329a29",
            "id": 1498,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "pause",
            "nameLocation": "1689:5:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1495,
                  "mutability": "mutable",
                  "name": "_paused",
                  "nameLocation": "1700:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1498,
                  "src": "1695:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1494,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1695:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1694:14:20"
            },
            "returnParameters": {
              "id": 1497,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1717:0:20"
            },
            "scope": 1504,
            "src": "1680:38:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "8da5cb5b",
            "id": 1503,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "owner",
            "nameLocation": "1733:5:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1499,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1738:2:20"
            },
            "returnParameters": {
              "id": 1502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1501,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1503,
                  "src": "1764:7:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1500,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1764:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1763:9:20"
            },
            "scope": 1504,
            "src": "1724:49:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2997,
        "src": "703:1072:20",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1505,
              "name": "ReentrancyGuard",
              "nameLocations": [
                "1796:15:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3571,
              "src": "1796:15:20"
            },
            "id": 1506,
            "nodeType": "InheritanceSpecifier",
            "src": "1796:15:20"
          },
          {
            "baseName": {
              "id": 1507,
              "name": "Ownable",
              "nameLocations": [
                "1813:7:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3531,
              "src": "1813:7:20"
            },
            "id": 1508,
            "nodeType": "InheritanceSpecifier",
            "src": "1813:7:20"
          },
          {
            "baseName": {
              "id": 1509,
              "name": "HasAdmin",
              "nameLocations": [
                "1822:8:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3291,
              "src": "1822:8:20"
            },
            "id": 1510,
            "nodeType": "InheritanceSpecifier",
            "src": "1822:8:20"
          },
          {
            "baseName": {
              "id": 1511,
              "name": "SigVerifier",
              "nameLocations": [
                "1832:11:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3366,
              "src": "1832:11:20"
            },
            "id": 1512,
            "nodeType": "InheritanceSpecifier",
            "src": "1832:11:20"
          }
        ],
        "canonicalName": "Staker",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 2996,
        "linearizedBaseContracts": [
          2996,
          3366,
          3320,
          3291,
          3235,
          3531,
          5773,
          3571
        ],
        "name": "Staker",
        "nameLocation": "1786:6:20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 1516,
            "libraryName": {
              "id": 1513,
              "name": "SafeERC20",
              "nameLocations": [
                "1856:9:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3220,
              "src": "1856:9:20"
            },
            "nodeType": "UsingForDirective",
            "src": "1850:26:20",
            "typeName": {
              "id": 1515,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1514,
                "name": "ICoin",
                "nameLocations": [
                  "1870:5:20"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3374,
                "src": "1870:5:20"
              },
              "referencedDeclaration": 3374,
              "src": "1870:5:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ICoin_$3374",
                "typeString": "contract ICoin"
              }
            }
          },
          {
            "constant": false,
            "id": 1519,
            "mutability": "mutable",
            "name": "projectMan",
            "nameLocation": "1903:10:20",
            "nodeType": "VariableDeclaration",
            "scope": 2996,
            "src": "1882:31:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IProjectMan_$4830",
              "typeString": "contract IProjectMan"
            },
            "typeName": {
              "id": 1518,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1517,
                "name": "IProjectMan",
                "nameLocations": [
                  "1882:11:20"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4830,
                "src": "1882:11:20"
              },
              "referencedDeclaration": 4830,
              "src": "1882:11:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IProjectMan_$4830",
                "typeString": "contract IProjectMan"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1522,
            "mutability": "mutable",
            "name": "stableCoin",
            "nameLocation": "1934:10:20",
            "nodeType": "VariableDeclaration",
            "scope": 2996,
            "src": "1919:25:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ICoin_$3374",
              "typeString": "contract ICoin"
            },
            "typeName": {
              "id": 1521,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1520,
                "name": "ICoin",
                "nameLocations": [
                  "1919:5:20"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3374,
                "src": "1919:5:20"
              },
              "referencedDeclaration": 3374,
              "src": "1919:5:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ICoin_$3374",
                "typeString": "contract ICoin"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "5c975abb",
            "id": 1525,
            "mutability": "mutable",
            "name": "paused",
            "nameLocation": "1963:6:20",
            "nodeType": "VariableDeclaration",
            "scope": 2996,
            "src": "1951:26:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1523,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1951:4:20",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 1524,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1972:5:20",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "eventSelector": "b58845b0a64f92dd8d1ba04f905319d6be2021b57783b3d10155e7e36a84e128",
            "id": 1531,
            "name": "StakeEvent",
            "nameLocation": "1990:10:20",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1530,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1527,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "staker",
                  "nameLocation": "2017:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1531,
                  "src": "2001:22:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1526,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2001:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1529,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2033:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1531,
                  "src": "2025:14:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1528,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2025:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2000:40:20"
            },
            "src": "1984:57:20"
          },
          {
            "anonymous": false,
            "eventSelector": "9bf028f26713dbfd10f1790f08ee2c2df9a1d82c0f238230bb0b64af2aab4a9e",
            "id": 1539,
            "name": "CollectRewards",
            "nameLocation": "2052:14:20",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1538,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1533,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "staker",
                  "nameLocation": "2092:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1539,
                  "src": "2076:22:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1532,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2076:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1535,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "2123:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1539,
                  "src": "2108:24:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1534,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2108:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1537,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2150:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1539,
                  "src": "2142:14:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1536,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2142:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2066:96:20"
            },
            "src": "2046:117:20"
          },
          {
            "anonymous": false,
            "eventSelector": "e7ba5389a2696d7e54ff7f18c911057d086a1c641c23ffbaebdb0fe236b0e04e",
            "id": 1545,
            "name": "BalanceDeposit",
            "nameLocation": "2174:14:20",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1544,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1541,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "who",
                  "nameLocation": "2205:3:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1545,
                  "src": "2189:19:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1540,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2189:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1543,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2226:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1545,
                  "src": "2210:22:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1542,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2210:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2188:45:20"
            },
            "src": "2168:66:20"
          },
          {
            "anonymous": false,
            "eventSelector": "8777844761eb456b028cf7f87fc8dcb146ad8eeafbc6f80f2d006e5cd9e5a745",
            "id": 1551,
            "name": "BalanceWithdraw",
            "nameLocation": "2245:15:20",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1550,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1547,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "who",
                  "nameLocation": "2277:3:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1551,
                  "src": "2261:19:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1546,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2261:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1549,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2298:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1551,
                  "src": "2282:22:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1548,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2282:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2260:45:20"
            },
            "src": "2239:67:20"
          },
          {
            "constant": false,
            "id": 1558,
            "mutability": "mutable",
            "name": "stakers",
            "nameLocation": "2408:7:20",
            "nodeType": "VariableDeclaration",
            "scope": 2996,
            "src": "2350:65:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
              "typeString": "mapping(address => mapping(uint32 => struct StakeInfo))"
            },
            "typeName": {
              "id": 1557,
              "keyType": {
                "id": 1552,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2358:7:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2350:48:20",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                "typeString": "mapping(address => mapping(uint32 => struct StakeInfo))"
              },
              "valueType": {
                "id": 1556,
                "keyType": {
                  "id": 1553,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2377:6:20",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "nodeType": "Mapping",
                "src": "2369:28:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                  "typeString": "mapping(uint32 => struct StakeInfo)"
                },
                "valueType": {
                  "id": 1555,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 1554,
                    "name": "StakeInfo",
                    "nameLocations": [
                      "2387:9:20"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 3427,
                    "src": "2387:9:20"
                  },
                  "referencedDeclaration": 3427,
                  "src": "2387:9:20",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                    "typeString": "struct StakeInfo"
                  }
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1562,
            "mutability": "mutable",
            "name": "usedNonce_",
            "nameLocation": "2455:10:20",
            "nodeType": "VariableDeclaration",
            "scope": 2996,
            "src": "2421:44:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint64_$_t_uint8_$",
              "typeString": "mapping(uint64 => uint8)"
            },
            "typeName": {
              "id": 1561,
              "keyType": {
                "id": 1559,
                "name": "uint64",
                "nodeType": "ElementaryTypeName",
                "src": "2429:6:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint64",
                  "typeString": "uint64"
                }
              },
              "nodeType": "Mapping",
              "src": "2421:24:20",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint64_$_t_uint8_$",
                "typeString": "mapping(uint64 => uint8)"
              },
              "valueType": {
                "id": 1560,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "2439:5:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1569,
            "mutability": "mutable",
            "name": "holdings",
            "nameLocation": "2531:8:20",
            "nodeType": "VariableDeclaration",
            "scope": 2996,
            "src": "2471:68:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
              "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo))"
            },
            "typeName": {
              "id": 1568,
              "keyType": {
                "id": 1563,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2479:7:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2471:50:20",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo))"
              },
              "valueType": {
                "id": 1567,
                "keyType": {
                  "id": 1564,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2498:6:20",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "nodeType": "Mapping",
                "src": "2490:30:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                  "typeString": "mapping(uint32 => struct HoldingInfo)"
                },
                "valueType": {
                  "id": 1566,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 1565,
                    "name": "HoldingInfo",
                    "nameLocations": [
                      "2508:11:20"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 3385,
                    "src": "2508:11:20"
                  },
                  "referencedDeclaration": 3385,
                  "src": "2508:11:20",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                    "typeString": "struct HoldingInfo"
                  }
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1600,
              "nodeType": "Block",
              "src": "2595:177:20",
              "statements": [
                {
                  "expression": {
                    "id": 1580,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1576,
                      "name": "stableCoin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1522,
                      "src": "2605:10:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICoin_$3374",
                        "typeString": "contract ICoin"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1578,
                          "name": "_stableCoin",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1571,
                          "src": "2624:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1577,
                        "name": "ICoin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3374,
                        "src": "2618:5:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICoin_$3374_$",
                          "typeString": "type(contract ICoin)"
                        }
                      },
                      "id": 1579,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2618:18:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICoin_$3374",
                        "typeString": "contract ICoin"
                      }
                    },
                    "src": "2605:31:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICoin_$3374",
                      "typeString": "contract ICoin"
                    }
                  },
                  "id": 1581,
                  "nodeType": "ExpressionStatement",
                  "src": "2605:31:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1583,
                        "name": "_admin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1573,
                        "src": "2656:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1582,
                      "name": "_setAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3277
                      ],
                      "referencedDeclaration": 3277,
                      "src": "2646:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1584,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2646:17:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1585,
                  "nodeType": "ExpressionStatement",
                  "src": "2646:17:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1591,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "2740:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Staker_$2996",
                              "typeString": "contract Staker"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_Staker_$2996",
                              "typeString": "contract Staker"
                            }
                          ],
                          "id": 1590,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2732:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1589,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2732:7:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2732:13:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1595,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2752:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 1594,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "2752:7:20",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              }
                            ],
                            "id": 1593,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "2747:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 1596,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2747:13:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint256",
                            "typeString": "type(uint256)"
                          }
                        },
                        "id": 1597,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2761:3:20",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "2747:17:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1586,
                        "name": "stableCoin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1522,
                        "src": "2699:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ICoin_$3374",
                          "typeString": "contract ICoin"
                        }
                      },
                      "id": 1588,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2710:21:20",
                      "memberName": "safeIncreaseAllowance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3133,
                      "src": "2699:32:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$4908_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4908_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 1598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2699:66:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1599,
                  "nodeType": "ExpressionStatement",
                  "src": "2699:66:20"
                }
              ]
            },
            "id": 1601,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1574,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1571,
                  "mutability": "mutable",
                  "name": "_stableCoin",
                  "nameLocation": "2566:11:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1601,
                  "src": "2558:19:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1570,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2558:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1573,
                  "mutability": "mutable",
                  "name": "_admin",
                  "nameLocation": "2587:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1601,
                  "src": "2579:14:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1572,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2579:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2557:37:20"
            },
            "returnParameters": {
              "id": 1575,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2595:0:20"
            },
            "scope": 2996,
            "src": "2546:226:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1615,
              "nodeType": "Block",
              "src": "2804:85:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1610,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1604,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2822:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1605,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2826:6:20",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2822:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 1608,
                              "name": "projectMan",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1519,
                              "src": "2844:10:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IProjectMan_$4830",
                                "typeString": "contract IProjectMan"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IProjectMan_$4830",
                                "typeString": "contract IProjectMan"
                              }
                            ],
                            "id": 1607,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2836:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1606,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2836:7:20",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1609,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2836:19:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2822:33:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "2170726f6a6563744d616e",
                        "id": 1611,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2857:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a29b64168240aba5b88a59907be9d3a59642019048a1fcc1bf92f3dd5ee1735",
                          "typeString": "literal_string \"!projectMan\""
                        },
                        "value": "!projectMan"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a29b64168240aba5b88a59907be9d3a59642019048a1fcc1bf92f3dd5ee1735",
                          "typeString": "literal_string \"!projectMan\""
                        }
                      ],
                      "id": 1603,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2814:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1612,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2814:57:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1613,
                  "nodeType": "ExpressionStatement",
                  "src": "2814:57:20"
                },
                {
                  "id": 1614,
                  "nodeType": "PlaceholderStatement",
                  "src": "2881:1:20"
                }
              ]
            },
            "id": 1616,
            "name": "onlyProjectMan",
            "nameLocation": "2787:14:20",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 1602,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2801:2:20"
            },
            "src": "2778:111:20",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1659,
              "nodeType": "Block",
              "src": "2948:243:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_contract$_IProjectMan_$4830",
                          "typeString": "contract IProjectMan"
                        },
                        "id": 1629,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1622,
                          "name": "projectMan",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1519,
                          "src": "2966:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IProjectMan_$4830",
                            "typeString": "contract IProjectMan"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 1626,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3000:1:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1625,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2992:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1624,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2992:7:20",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1627,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2992:10:20",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1623,
                            "name": "IProjectMan",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4830,
                            "src": "2980:11:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IProjectMan_$4830_$",
                              "typeString": "type(contract IProjectMan)"
                            }
                          },
                          "id": 1628,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2980:23:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IProjectMan_$4830",
                            "typeString": "contract IProjectMan"
                          }
                        },
                        "src": "2966:37:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "706d20736574",
                        "id": 1630,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3005:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f1e101e6d2323fed875c4de40051cee0a70ce9b2651447527bcc02bd36aae3bb",
                          "typeString": "literal_string \"pm set\""
                        },
                        "value": "pm set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f1e101e6d2323fed875c4de40051cee0a70ce9b2651447527bcc02bd36aae3bb",
                          "typeString": "literal_string \"pm set\""
                        }
                      ],
                      "id": 1621,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2958:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1631,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2958:56:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1632,
                  "nodeType": "ExpressionStatement",
                  "src": "2958:56:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1638,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1634,
                            "name": "tx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -26,
                            "src": "3032:2:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_transaction",
                              "typeString": "tx"
                            }
                          },
                          "id": 1635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3035:6:20",
                          "memberName": "origin",
                          "nodeType": "MemberAccess",
                          "src": "3032:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1636,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3460,
                            "src": "3045:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 1637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3045:7:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3032:20:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "216f776e6572",
                        "id": 1639,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3054:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f90560991e3f715cdce86f88841433ea2f749a73c924ce7483b146bbc74f1efa",
                          "typeString": "literal_string \"!owner\""
                        },
                        "value": "!owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f90560991e3f715cdce86f88841433ea2f749a73c924ce7483b146bbc74f1efa",
                          "typeString": "literal_string \"!owner\""
                        }
                      ],
                      "id": 1633,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3024:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3024:39:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1641,
                  "nodeType": "ExpressionStatement",
                  "src": "3024:39:20"
                },
                {
                  "expression": {
                    "id": 1646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1642,
                      "name": "projectMan",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1519,
                      "src": "3073:10:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IProjectMan_$4830",
                        "typeString": "contract IProjectMan"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1644,
                          "name": "_projectMan",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1618,
                          "src": "3098:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1643,
                        "name": "IProjectMan",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4830,
                        "src": "3086:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IProjectMan_$4830_$",
                          "typeString": "type(contract IProjectMan)"
                        }
                      },
                      "id": 1645,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3086:24:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IProjectMan_$4830",
                        "typeString": "contract IProjectMan"
                      }
                    },
                    "src": "3073:37:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IProjectMan_$4830",
                      "typeString": "contract IProjectMan"
                    }
                  },
                  "id": 1647,
                  "nodeType": "ExpressionStatement",
                  "src": "3073:37:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1651,
                        "name": "_projectMan",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1618,
                        "src": "3153:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1654,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3171:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 1653,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "3171:7:20",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              }
                            ],
                            "id": 1652,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3166:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 1655,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3166:13:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint256",
                            "typeString": "type(uint256)"
                          }
                        },
                        "id": 1656,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3180:3:20",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "3166:17:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1648,
                        "name": "stableCoin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1522,
                        "src": "3120:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ICoin_$3374",
                          "typeString": "contract ICoin"
                        }
                      },
                      "id": 1650,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3131:21:20",
                      "memberName": "safeIncreaseAllowance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3133,
                      "src": "3120:32:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$4908_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4908_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 1657,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3120:64:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1658,
                  "nodeType": "ExpressionStatement",
                  "src": "3120:64:20"
                }
              ]
            },
            "functionSelector": "9dea67e3",
            "id": 1660,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setProjectMan",
            "nameLocation": "2904:13:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1619,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1618,
                  "mutability": "mutable",
                  "name": "_projectMan",
                  "nameLocation": "2926:11:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1660,
                  "src": "2918:19:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1617,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2918:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2917:21:20"
            },
            "returnParameters": {
              "id": 1620,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2948:0:20"
            },
            "scope": 2996,
            "src": "2895:296:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1673,
              "nodeType": "Block",
              "src": "3293:56:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1670,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1662,
                        "src": "3332:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "expression": {
                        "id": 1668,
                        "name": "projectMan",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1519,
                        "src": "3310:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProjectMan_$4830",
                          "typeString": "contract IProjectMan"
                        }
                      },
                      "id": 1669,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3321:10:20",
                      "memberName": "getProject",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4829,
                      "src": "3310:21:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint32_$returns$_t_struct$_ProjectInfo_$3414_memory_ptr_$",
                        "typeString": "function (uint32) view external returns (struct ProjectInfo memory)"
                      }
                    },
                    "id": 1671,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3310:32:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                      "typeString": "struct ProjectInfo memory"
                    }
                  },
                  "functionReturnParameters": 1667,
                  "id": 1672,
                  "nodeType": "Return",
                  "src": "3303:39:20"
                }
              ]
            },
            "id": 1674,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getProject",
            "nameLocation": "3206:11:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1663,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1662,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "3234:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1674,
                  "src": "3227:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1661,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3227:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3217:32:20"
            },
            "returnParameters": {
              "id": 1667,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1666,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1674,
                  "src": "3273:18:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                    "typeString": "struct ProjectInfo"
                  },
                  "typeName": {
                    "id": 1665,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1664,
                      "name": "ProjectInfo",
                      "nameLocations": [
                        "3273:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3414,
                      "src": "3273:11:20"
                    },
                    "referencedDeclaration": 3414,
                    "src": "3273:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                      "typeString": "struct ProjectInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3272:20:20"
            },
            "scope": 2996,
            "src": "3197:152:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1685,
              "nodeType": "Block",
              "src": "3414:37:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1682,
                        "name": "newAdmin_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1676,
                        "src": "3434:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1681,
                      "name": "_setAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3277
                      ],
                      "referencedDeclaration": 3277,
                      "src": "3424:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1683,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3424:20:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1684,
                  "nodeType": "ExpressionStatement",
                  "src": "3424:20:20"
                }
              ]
            },
            "functionSelector": "8f283970",
            "id": 1686,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1679,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1678,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "3404:9:20"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3474,
                  "src": "3404:9:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "3404:9:20"
              }
            ],
            "name": "changeAdmin",
            "nameLocation": "3364:11:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1677,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1676,
                  "mutability": "mutable",
                  "name": "newAdmin_",
                  "nameLocation": "3384:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1686,
                  "src": "3376:17:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1675,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3376:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3375:19:20"
            },
            "returnParameters": {
              "id": 1680,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3414:0:20"
            },
            "scope": 2996,
            "src": "3355:96:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1732,
              "nodeType": "Block",
              "src": "3922:192:20",
              "statements": [
                {
                  "assignments": [
                    1701
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1701,
                      "mutability": "mutable",
                      "name": "a_days",
                      "nameLocation": "3939:6:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1732,
                      "src": "3932:13:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "typeName": {
                        "id": 1700,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3932:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1711,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 1709,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              "id": 1706,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1704,
                                "name": "_endTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1693,
                                "src": "3956:8:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 1705,
                                "name": "_startTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1691,
                                "src": "3967:10:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              "src": "3956:21:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            }
                          ],
                          "id": 1707,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "3955:23:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 1708,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3981:6:20",
                          "subdenomination": "days",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_86400_by_1",
                            "typeString": "int_const 86400"
                          },
                          "value": "1"
                        },
                        "src": "3955:32:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 1703,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3948:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint32_$",
                        "typeString": "type(uint32)"
                      },
                      "typeName": {
                        "id": 1702,
                        "name": "uint32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3948:6:20",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 1710,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3948:40:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3932:56:20"
                },
                {
                  "assignments": [
                    1713
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1713,
                      "mutability": "mutable",
                      "name": "a_amount",
                      "nameLocation": "4006:8:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1732,
                      "src": "3998:16:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1712,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3998:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1718,
                  "initialValue": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1716,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1714,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1689,
                          "src": "4018:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "id": 1715,
                          "name": "apy",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1695,
                          "src": "4028:3:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4018:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 1717,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "4017:15:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3998:34:20"
                },
                {
                  "expression": {
                    "id": 1726,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1719,
                      "name": "rewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1698,
                      "src": "4042:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1725,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1722,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1720,
                              "name": "a_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1713,
                              "src": "4053:8:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 1721,
                              "name": "a_days",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1701,
                              "src": "4064:6:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "src": "4053:17:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 1723,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "4052:19:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "/",
                      "rightExpression": {
                        "hexValue": "333635",
                        "id": 1724,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4074:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_365_by_1",
                          "typeString": "int_const 365"
                        },
                        "value": "365"
                      },
                      "src": "4052:25:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4042:35:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1727,
                  "nodeType": "ExpressionStatement",
                  "src": "4042:35:20"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1730,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1728,
                      "name": "rewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1698,
                      "src": "4094:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "313030",
                      "id": 1729,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4104:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100_by_1",
                        "typeString": "int_const 100"
                      },
                      "value": "100"
                    },
                    "src": "4094:13:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1699,
                  "id": 1731,
                  "nodeType": "Return",
                  "src": "4087:20:20"
                }
              ]
            },
            "documentation": {
              "id": 1687,
              "nodeType": "StructuredDocumentation",
              "src": "3457:292:20",
              "text": " @dev function to calculate rewards,\n      rewards is progressive to 12% per year.\n @param _amount amount of stable coin.\n @param _startTime time when staking started.\n @param _endTime time when staking ended.\n @return rewards amount of rewards"
            },
            "functionSelector": "45305ab8",
            "id": 1733,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "calculateRewards",
            "nameLocation": "3763:16:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1696,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1689,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "3797:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1733,
                  "src": "3789:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1688,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3789:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1691,
                  "mutability": "mutable",
                  "name": "_startTime",
                  "nameLocation": "3821:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1733,
                  "src": "3814:17:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1690,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3814:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1693,
                  "mutability": "mutable",
                  "name": "_endTime",
                  "nameLocation": "3848:8:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1733,
                  "src": "3841:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1692,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3841:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1695,
                  "mutability": "mutable",
                  "name": "apy",
                  "nameLocation": "3874:3:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1733,
                  "src": "3866:11:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1694,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3866:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3779:104:20"
            },
            "returnParameters": {
              "id": 1699,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1698,
                  "mutability": "mutable",
                  "name": "rewards",
                  "nameLocation": "3913:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1733,
                  "src": "3905:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1697,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3905:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3904:17:20"
            },
            "scope": 2996,
            "src": "3754:360:20",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1939,
              "nodeType": "Block",
              "src": "4189:1660:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1744,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "4207:7:20",
                        "subExpression": {
                          "id": 1743,
                          "name": "paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1525,
                          "src": "4208:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "706175736564",
                        "id": 1745,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4216:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee35723ac350a69d2a92d3703f17439cbaadf2f093a21ba5bf5f1a53eb2a14d9",
                          "typeString": "literal_string \"paused\""
                        },
                        "value": "paused"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee35723ac350a69d2a92d3703f17439cbaadf2f093a21ba5bf5f1a53eb2a14d9",
                          "typeString": "literal_string \"paused\""
                        }
                      ],
                      "id": 1742,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4199:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1746,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4199:26:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1747,
                  "nodeType": "ExpressionStatement",
                  "src": "4199:26:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "id": 1751,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1749,
                          "name": "qty",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1737,
                          "src": "4243:3:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1750,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4249:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "4243:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "21717479",
                        "id": 1752,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4252:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_94de11adf9f8c898de132cca41cc4c022e22f0d0c43e8a634e891246a032145d",
                          "typeString": "literal_string \"!qty\""
                        },
                        "value": "!qty"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_94de11adf9f8c898de132cca41cc4c022e22f0d0c43e8a634e891246a032145d",
                          "typeString": "literal_string \"!qty\""
                        }
                      ],
                      "id": 1748,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4235:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1753,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4235:24:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1754,
                  "nodeType": "ExpressionStatement",
                  "src": "4235:24:20"
                },
                {
                  "assignments": [
                    1756
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1756,
                      "mutability": "mutable",
                      "name": "_sender",
                      "nameLocation": "4278:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1939,
                      "src": "4270:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1755,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4270:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1759,
                  "initialValue": {
                    "expression": {
                      "id": 1757,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "4288:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1758,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "4292:6:20",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "4288:10:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4270:28:20"
                },
                {
                  "assignments": [
                    1762
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1762,
                      "mutability": "mutable",
                      "name": "project",
                      "nameLocation": "4328:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1939,
                      "src": "4309:26:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                        "typeString": "struct ProjectInfo"
                      },
                      "typeName": {
                        "id": 1761,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1760,
                          "name": "ProjectInfo",
                          "nameLocations": [
                            "4309:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3414,
                          "src": "4309:11:20"
                        },
                        "referencedDeclaration": 3414,
                        "src": "4309:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                          "typeString": "struct ProjectInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1766,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1764,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1735,
                        "src": "4350:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 1763,
                      "name": "_getProject",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1674,
                      "src": "4338:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint32_$returns$_t_struct$_ProjectInfo_$3414_memory_ptr_$",
                        "typeString": "function (uint32) view returns (struct ProjectInfo memory)"
                      }
                    },
                    "id": 1765,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4338:22:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                      "typeString": "struct ProjectInfo memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4309:51:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1768,
                        "name": "project",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1762,
                        "src": "4385:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                          "typeString": "struct ProjectInfo memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                          "typeString": "struct ProjectInfo memory"
                        }
                      ],
                      "id": 1767,
                      "name": "_checkProject",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2773,
                      "src": "4371:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_ProjectInfo_$3414_memory_ptr_$returns$__$",
                        "typeString": "function (struct ProjectInfo memory) pure"
                      }
                    },
                    "id": 1769,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4371:22:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1770,
                  "nodeType": "ExpressionStatement",
                  "src": "4371:22:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        },
                        "id": 1775,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1772,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1762,
                            "src": "4411:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 1773,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4419:6:20",
                          "memberName": "status",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3401,
                          "src": "4411:14:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1774,
                          "name": "ACTIVE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4800,
                          "src": "4429:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "src": "4411:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "21616374697665",
                        "id": 1776,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4437:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5f3f69ce5e4606b03ed1bd946f699844049b6ab1cd761baf995ff8e6b07a265f",
                          "typeString": "literal_string \"!active\""
                        },
                        "value": "!active"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5f3f69ce5e4606b03ed1bd946f699844049b6ab1cd761baf995ff8e6b07a265f",
                          "typeString": "literal_string \"!active\""
                        }
                      ],
                      "id": 1771,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4403:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1777,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4403:44:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1778,
                  "nodeType": "ExpressionStatement",
                  "src": "4403:44:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1784,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1780,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1762,
                            "src": "4465:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 1781,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4473:9:20",
                          "memberName": "startTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3411,
                          "src": "4465:17:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 1782,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "4486:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 1783,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4492:9:20",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "4486:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4465:36:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "217374617274",
                        "id": 1785,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4503:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8aa2d44dcfdb120fea3dc7f28ab034207598fccd12631bc01958fb8d900dbccd",
                          "typeString": "literal_string \"!start\""
                        },
                        "value": "!start"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8aa2d44dcfdb120fea3dc7f28ab034207598fccd12631bc01958fb8d900dbccd",
                          "typeString": "literal_string \"!start\""
                        }
                      ],
                      "id": 1779,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4457:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1786,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4457:55:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1787,
                  "nodeType": "ExpressionStatement",
                  "src": "4457:55:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1793,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1789,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1762,
                            "src": "4530:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 1790,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4538:7:20",
                          "memberName": "endTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3413,
                          "src": "4530:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "expression": {
                            "id": 1791,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "4548:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 1792,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4554:9:20",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "4548:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4530:33:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "21656e646564",
                        "id": 1794,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4565:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_dd466a237314543bc1df2d490d2bf30b641767dbb894a94e6004fc207a2dcd1f",
                          "typeString": "literal_string \"!ended\""
                        },
                        "value": "!ended"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_dd466a237314543bc1df2d490d2bf30b641767dbb894a94e6004fc207a2dcd1f",
                          "typeString": "literal_string \"!ended\""
                        }
                      ],
                      "id": 1788,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4522:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1795,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4522:52:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1796,
                  "nodeType": "ExpressionStatement",
                  "src": "4522:52:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1809,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 1805,
                              "name": "_sender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1756,
                              "src": "4695:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1806,
                              "name": "projectId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1735,
                              "src": "4704:9:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1801,
                                      "name": "projectMan",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1519,
                                      "src": "4672:10:20",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IProjectMan_$4830",
                                        "typeString": "contract IProjectMan"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IProjectMan_$4830",
                                        "typeString": "contract IProjectMan"
                                      }
                                    ],
                                    "id": 1800,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4664:7:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1799,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4664:7:20",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1802,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4664:19:20",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1798,
                                "name": "IERC1155",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5895,
                                "src": "4655:8:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC1155_$5895_$",
                                  "typeString": "type(contract IERC1155)"
                                }
                              },
                              "id": 1803,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4655:29:20",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC1155_$5895",
                                "typeString": "contract IERC1155"
                              }
                            },
                            "id": 1804,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4685:9:20",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5833,
                            "src": "4655:39:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) view external returns (uint256)"
                            }
                          },
                          "id": 1807,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4655:59:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 1808,
                          "name": "qty",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1737,
                          "src": "4718:3:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "src": "4655:66:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "62616c616e6365203c",
                        "id": 1810,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4735:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_208f24d7a1cd76f7f6c7a386106e976000541dbadc3dcc74ed2c23104ae19c73",
                          "typeString": "literal_string \"balance <\""
                        },
                        "value": "balance <"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_208f24d7a1cd76f7f6c7a386106e976000541dbadc3dcc74ed2c23104ae19c73",
                          "typeString": "literal_string \"balance <\""
                        }
                      ],
                      "id": 1797,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4634:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1811,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4634:122:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1812,
                  "nodeType": "ExpressionStatement",
                  "src": "4634:122:20"
                },
                {
                  "assignments": [
                    1815
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1815,
                      "mutability": "mutable",
                      "name": "staker",
                      "nameLocation": "4813:6:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1939,
                      "src": "4796:23:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo"
                      },
                      "typeName": {
                        "id": 1814,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1813,
                          "name": "StakeInfo",
                          "nameLocations": [
                            "4796:9:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3427,
                          "src": "4796:9:20"
                        },
                        "referencedDeclaration": 3427,
                        "src": "4796:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                          "typeString": "struct StakeInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1821,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1816,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1558,
                        "src": "4822:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                        }
                      },
                      "id": 1818,
                      "indexExpression": {
                        "id": 1817,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1756,
                        "src": "4830:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4822:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                        "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                      }
                    },
                    "id": 1820,
                    "indexExpression": {
                      "id": 1819,
                      "name": "projectId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1735,
                      "src": "4839:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4822:27:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4796:53:20"
                },
                {
                  "assignments": [
                    1824
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1824,
                      "mutability": "mutable",
                      "name": "hld",
                      "nameLocation": "4879:3:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1939,
                      "src": "4860:22:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                        "typeString": "struct HoldingInfo"
                      },
                      "typeName": {
                        "id": 1823,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1822,
                          "name": "HoldingInfo",
                          "nameLocations": [
                            "4860:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3385,
                          "src": "4860:11:20"
                        },
                        "referencedDeclaration": 3385,
                        "src": "4860:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                          "typeString": "struct HoldingInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1831,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1825,
                        "name": "holdings",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1569,
                        "src": "4885:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                        }
                      },
                      "id": 1827,
                      "indexExpression": {
                        "id": 1826,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1756,
                        "src": "4894:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4885:17:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                        "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                      }
                    },
                    "id": 1830,
                    "indexExpression": {
                      "expression": {
                        "id": 1828,
                        "name": "project",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1762,
                        "src": "4903:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                          "typeString": "struct ProjectInfo memory"
                        }
                      },
                      "id": 1829,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4911:2:20",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3389,
                      "src": "4903:10:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4885:29:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                      "typeString": "struct HoldingInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4860:54:20"
                },
                {
                  "assignments": [
                    1833
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1833,
                      "mutability": "mutable",
                      "name": "holdingRewards",
                      "nameLocation": "4933:14:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1939,
                      "src": "4925:22:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1832,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4925:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1839,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1835,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1756,
                        "src": "4971:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1836,
                        "name": "project",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1762,
                        "src": "4980:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                          "typeString": "struct ProjectInfo memory"
                        }
                      },
                      {
                        "id": 1837,
                        "name": "hld",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1824,
                        "src": "4989:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                          "typeString": "struct ProjectInfo memory"
                        },
                        {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      ],
                      "id": 1834,
                      "name": "_accumHoldingRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2565,
                      "src": "4950:20:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_ProjectInfo_$3414_memory_ptr_$_t_struct$_HoldingInfo_$3385_memory_ptr_$returns$_t_uint256_$",
                        "typeString": "function (address,struct ProjectInfo memory,struct HoldingInfo memory) returns (uint256)"
                      }
                    },
                    "id": 1838,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4950:43:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4925:68:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1842,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1840,
                      "name": "holdingRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1833,
                      "src": "5064:14:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 1841,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5081:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "5064:18:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1857,
                  "nodeType": "IfStatement",
                  "src": "5060:166:20",
                  "trueBody": {
                    "id": 1856,
                    "nodeType": "Block",
                    "src": "5084:142:20",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1846,
                              "name": "_sender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1756,
                              "src": "5122:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1847,
                              "name": "holdingRewards",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1833,
                              "src": "5131:14:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1843,
                              "name": "stableCoin",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1522,
                              "src": "5098:10:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ICoin_$3374",
                                "typeString": "contract ICoin"
                              }
                            },
                            "id": 1845,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5109:12:20",
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3027,
                            "src": "5098:23:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$4908_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4908_$",
                              "typeString": "function (contract IERC20,address,uint256)"
                            }
                          },
                          "id": 1848,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5098:48:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1849,
                        "nodeType": "ExpressionStatement",
                        "src": "5098:48:20"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1851,
                              "name": "_sender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1756,
                              "src": "5180:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1852,
                              "name": "projectId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1735,
                              "src": "5189:9:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 1853,
                              "name": "holdingRewards",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1833,
                              "src": "5200:14:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1850,
                            "name": "CollectRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1539,
                            "src": "5165:14:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint32,uint256)"
                            }
                          },
                          "id": 1854,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5165:50:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1855,
                        "nodeType": "EmitStatement",
                        "src": "5160:55:20"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1859
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1859,
                      "mutability": "mutable",
                      "name": "endTime",
                      "nameLocation": "5243:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1939,
                      "src": "5236:14:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 1858,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "5236:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1869,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1863,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "5264:5:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1864,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5270:9:20",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "5264:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1862,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5257:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 1861,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "5257:6:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1865,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5257:23:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "expression": {
                          "id": 1866,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1762,
                          "src": "5282:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 1867,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5290:7:20",
                        "memberName": "endTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3413,
                        "src": "5282:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 1860,
                      "name": "min",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1974,
                      "src": "5253:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint64_$_t_uint64_$returns$_t_uint64_$",
                        "typeString": "function (uint64,uint64) pure returns (uint64)"
                      }
                    },
                    "id": 1868,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5253:45:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5236:62:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1878,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      },
                      "id": 1873,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 1870,
                          "name": "staker",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1815,
                          "src": "5362:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                            "typeString": "struct StakeInfo memory"
                          }
                        },
                        "id": 1871,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5369:3:20",
                        "memberName": "qty",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3418,
                        "src": "5362:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 1872,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5375:1:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "5362:14:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "id": 1877,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 1874,
                          "name": "staker",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1815,
                          "src": "5380:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                            "typeString": "struct StakeInfo memory"
                          }
                        },
                        "id": 1875,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5387:9:20",
                        "memberName": "startTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3422,
                        "src": "5380:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "id": 1876,
                        "name": "endTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1859,
                        "src": "5399:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "src": "5380:26:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "5362:44:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1897,
                  "nodeType": "IfStatement",
                  "src": "5358:266:20",
                  "trueBody": {
                    "id": 1896,
                    "nodeType": "Block",
                    "src": "5408:216:20",
                    "statements": [
                      {
                        "expression": {
                          "id": 1894,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1879,
                              "name": "staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1815,
                              "src": "5422:6:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 1881,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "5429:12:20",
                            "memberName": "accumRewards",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3424,
                            "src": "5422:19:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1887,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1883,
                                    "name": "staker",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1815,
                                    "src": "5479:6:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                      "typeString": "struct StakeInfo memory"
                                    }
                                  },
                                  "id": 1884,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5486:3:20",
                                  "memberName": "qty",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3418,
                                  "src": "5479:10:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1885,
                                    "name": "project",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1762,
                                    "src": "5492:7:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                      "typeString": "struct ProjectInfo memory"
                                    }
                                  },
                                  "id": 1886,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5500:5:20",
                                  "memberName": "price",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3397,
                                  "src": "5492:13:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5479:26:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 1888,
                                  "name": "staker",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1815,
                                  "src": "5523:6:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                    "typeString": "struct StakeInfo memory"
                                  }
                                },
                                "id": 1889,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5530:9:20",
                                "memberName": "startTime",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3422,
                                "src": "5523:16:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "id": 1890,
                                "name": "endTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1859,
                                "src": "5557:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "expression": {
                                  "id": 1891,
                                  "name": "project",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1762,
                                  "src": "5582:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                    "typeString": "struct ProjectInfo memory"
                                  }
                                },
                                "id": 1892,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5590:9:20",
                                "memberName": "stakedApy",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3409,
                                "src": "5582:17:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1882,
                              "name": "calculateRewards",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1733,
                              "src": "5445:16:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint64_$_t_uint64_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint64,uint64,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1893,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5445:168:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5422:191:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1895,
                        "nodeType": "ExpressionStatement",
                        "src": "5422:191:20"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 1902,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1898,
                        "name": "staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1815,
                        "src": "5634:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 1900,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5641:3:20",
                      "memberName": "qty",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3418,
                      "src": "5634:10:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 1901,
                      "name": "qty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1737,
                      "src": "5648:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "src": "5634:17:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "id": 1903,
                  "nodeType": "ExpressionStatement",
                  "src": "5634:17:20"
                },
                {
                  "expression": {
                    "id": 1912,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1904,
                        "name": "staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1815,
                        "src": "5661:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 1906,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5668:9:20",
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3422,
                      "src": "5661:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 1909,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "5687:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 1910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5693:9:20",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "5687:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 1908,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "5680:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint64_$",
                          "typeString": "type(uint64)"
                        },
                        "typeName": {
                          "id": 1907,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "5680:6:20",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1911,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5680:23:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "5661:42:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "id": 1913,
                  "nodeType": "ExpressionStatement",
                  "src": "5661:42:20"
                },
                {
                  "expression": {
                    "id": 1918,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1914,
                        "name": "hld",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1824,
                        "src": "5714:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 1916,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5718:3:20",
                      "memberName": "qty",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3378,
                      "src": "5714:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 1917,
                      "name": "qty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1737,
                      "src": "5725:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "src": "5714:14:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1919,
                  "nodeType": "ExpressionStatement",
                  "src": "5714:14:20"
                },
                {
                  "expression": {
                    "id": 1926,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1920,
                          "name": "stakers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1558,
                          "src": "5739:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                            "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                          }
                        },
                        "id": 1923,
                        "indexExpression": {
                          "id": 1921,
                          "name": "_sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1756,
                          "src": "5747:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5739:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                          "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                        }
                      },
                      "id": 1924,
                      "indexExpression": {
                        "id": 1922,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1735,
                        "src": "5756:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5739:27:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                        "typeString": "struct StakeInfo storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1925,
                      "name": "staker",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1815,
                      "src": "5769:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo memory"
                      }
                    },
                    "src": "5739:36:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "id": 1927,
                  "nodeType": "ExpressionStatement",
                  "src": "5739:36:20"
                },
                {
                  "expression": {
                    "id": 1935,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1928,
                          "name": "holdings",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1569,
                          "src": "5785:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                            "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                          }
                        },
                        "id": 1932,
                        "indexExpression": {
                          "id": 1929,
                          "name": "_sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1756,
                          "src": "5794:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5785:17:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                          "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                        }
                      },
                      "id": 1933,
                      "indexExpression": {
                        "expression": {
                          "id": 1930,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1762,
                          "src": "5803:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 1931,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5811:2:20",
                        "memberName": "id",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3389,
                        "src": "5803:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5785:29:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                        "typeString": "struct HoldingInfo storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1934,
                      "name": "hld",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1824,
                      "src": "5817:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                        "typeString": "struct HoldingInfo memory"
                      }
                    },
                    "src": "5785:35:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                      "typeString": "struct HoldingInfo storage ref"
                    }
                  },
                  "id": 1936,
                  "nodeType": "ExpressionStatement",
                  "src": "5785:35:20"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1937,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5838:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1741,
                  "id": 1938,
                  "nodeType": "Return",
                  "src": "5831:11:20"
                }
              ]
            },
            "functionSelector": "6792a95b",
            "id": 1940,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "stake",
            "nameLocation": "4129:5:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1738,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1735,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "4142:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1940,
                  "src": "4135:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1734,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4135:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1737,
                  "mutability": "mutable",
                  "name": "qty",
                  "nameLocation": "4160:3:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1940,
                  "src": "4153:10:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1736,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4153:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4134:30:20"
            },
            "returnParameters": {
              "id": 1741,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1740,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1940,
                  "src": "4183:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1739,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4183:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4182:6:20"
            },
            "scope": 2996,
            "src": "4120:1729:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1956,
              "nodeType": "Block",
              "src": "5919:38:20",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "id": 1951,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1949,
                        "name": "a",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1942,
                        "src": "5936:1:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">=",
                      "rightExpression": {
                        "id": 1950,
                        "name": "b",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1944,
                        "src": "5941:1:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "src": "5936:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 1953,
                      "name": "b",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1944,
                      "src": "5949:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "id": 1954,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "5936:14:20",
                    "trueExpression": {
                      "id": 1952,
                      "name": "a",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1942,
                      "src": "5945:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "functionReturnParameters": 1948,
                  "id": 1955,
                  "nodeType": "Return",
                  "src": "5929:21:20"
                }
              ]
            },
            "id": 1957,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "max",
            "nameLocation": "5864:3:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1945,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1942,
                  "mutability": "mutable",
                  "name": "a",
                  "nameLocation": "5875:1:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1957,
                  "src": "5868:8:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1941,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5868:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1944,
                  "mutability": "mutable",
                  "name": "b",
                  "nameLocation": "5885:1:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1957,
                  "src": "5878:8:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1943,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5878:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5867:20:20"
            },
            "returnParameters": {
              "id": 1948,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1947,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1957,
                  "src": "5911:6:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1946,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5911:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5910:8:20"
            },
            "scope": 2996,
            "src": "5855:102:20",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1973,
              "nodeType": "Block",
              "src": "6027:38:20",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "id": 1968,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1966,
                        "name": "a",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1959,
                        "src": "6044:1:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "id": 1967,
                        "name": "b",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1961,
                        "src": "6049:1:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "src": "6044:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 1970,
                      "name": "b",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1961,
                      "src": "6057:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "id": 1971,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "6044:14:20",
                    "trueExpression": {
                      "id": 1969,
                      "name": "a",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1959,
                      "src": "6053:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "functionReturnParameters": 1965,
                  "id": 1972,
                  "nodeType": "Return",
                  "src": "6037:21:20"
                }
              ]
            },
            "id": 1974,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "min",
            "nameLocation": "5972:3:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1962,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1959,
                  "mutability": "mutable",
                  "name": "a",
                  "nameLocation": "5983:1:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1974,
                  "src": "5976:8:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1958,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5976:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1961,
                  "mutability": "mutable",
                  "name": "b",
                  "nameLocation": "5993:1:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1974,
                  "src": "5986:8:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1960,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5986:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5975:20:20"
            },
            "returnParameters": {
              "id": 1965,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1964,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1974,
                  "src": "6019:6:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 1963,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "6019:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6018:8:20"
            },
            "scope": 2996,
            "src": "5963:102:20",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2040,
              "nodeType": "Block",
              "src": "6242:516:20",
              "statements": [
                {
                  "assignments": [
                    1987
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1987,
                      "mutability": "mutable",
                      "name": "_stakeInfo",
                      "nameLocation": "6269:10:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2040,
                      "src": "6252:27:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo"
                      },
                      "typeName": {
                        "id": 1986,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1985,
                          "name": "StakeInfo",
                          "nameLocations": [
                            "6252:9:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3427,
                          "src": "6252:9:20"
                        },
                        "referencedDeclaration": 3427,
                        "src": "6252:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                          "typeString": "struct StakeInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1993,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1988,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1558,
                        "src": "6282:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                        }
                      },
                      "id": 1990,
                      "indexExpression": {
                        "id": 1989,
                        "name": "_staker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1977,
                        "src": "6290:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6282:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                        "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                      }
                    },
                    "id": 1992,
                    "indexExpression": {
                      "id": 1991,
                      "name": "projectId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1979,
                      "src": "6299:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6282:27:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6252:57:20"
                },
                {
                  "assignments": [
                    1996
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1996,
                      "mutability": "mutable",
                      "name": "project",
                      "nameLocation": "6338:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2040,
                      "src": "6319:26:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                        "typeString": "struct ProjectInfo"
                      },
                      "typeName": {
                        "id": 1995,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1994,
                          "name": "ProjectInfo",
                          "nameLocations": [
                            "6319:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3414,
                          "src": "6319:11:20"
                        },
                        "referencedDeclaration": 3414,
                        "src": "6319:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                          "typeString": "struct ProjectInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2000,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1998,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1979,
                        "src": "6360:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 1997,
                      "name": "_getProject",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1674,
                      "src": "6348:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint32_$returns$_t_struct$_ProjectInfo_$3414_memory_ptr_$",
                        "typeString": "function (uint32) view returns (struct ProjectInfo memory)"
                      }
                    },
                    "id": 1999,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6348:22:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                      "typeString": "struct ProjectInfo memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6319:51:20"
                },
                {
                  "assignments": [
                    2002
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2002,
                      "mutability": "mutable",
                      "name": "endTime",
                      "nameLocation": "6387:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2040,
                      "src": "6380:14:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 2001,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "6380:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2012,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 2006,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "6408:5:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2007,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6414:9:20",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "6408:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2005,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6401:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 2004,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "6401:6:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2008,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6401:23:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "expression": {
                          "id": 2009,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1996,
                          "src": "6426:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 2010,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "6434:7:20",
                        "memberName": "endTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3413,
                        "src": "6426:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 2003,
                      "name": "min",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1974,
                      "src": "6397:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint64_$_t_uint64_$returns$_t_uint64_$",
                        "typeString": "function (uint64,uint64) pure returns (uint64)"
                      }
                    },
                    "id": 2011,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6397:45:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6380:62:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    },
                    "id": 2016,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2013,
                        "name": "_stakeInfo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1987,
                        "src": "6457:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 2014,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6468:9:20",
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3422,
                      "src": "6457:20:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 2015,
                      "name": "endTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2002,
                      "src": "6480:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "6457:30:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2020,
                  "nodeType": "IfStatement",
                  "src": "6453:78:20",
                  "trueBody": {
                    "id": 2019,
                    "nodeType": "Block",
                    "src": "6489:42:20",
                    "statements": [
                      {
                        "expression": {
                          "id": 2017,
                          "name": "_stakeInfo",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1987,
                          "src": "6510:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                            "typeString": "struct StakeInfo memory"
                          }
                        },
                        "functionReturnParameters": 1984,
                        "id": 2018,
                        "nodeType": "Return",
                        "src": "6503:17:20"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 2036,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2021,
                        "name": "_stakeInfo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1987,
                        "src": "6541:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 2023,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "6552:12:20",
                      "memberName": "accumRewards",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3424,
                      "src": "6541:23:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2029,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2025,
                              "name": "_stakeInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1987,
                              "src": "6598:10:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 2026,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6609:3:20",
                            "memberName": "qty",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3418,
                            "src": "6598:14:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "expression": {
                              "id": 2027,
                              "name": "project",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1996,
                              "src": "6615:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                "typeString": "struct ProjectInfo memory"
                              }
                            },
                            "id": 2028,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6623:5:20",
                            "memberName": "price",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3397,
                            "src": "6615:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6598:30:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 2030,
                            "name": "_stakeInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1987,
                            "src": "6642:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                              "typeString": "struct StakeInfo memory"
                            }
                          },
                          "id": 2031,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "6653:9:20",
                          "memberName": "startTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3422,
                          "src": "6642:20:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "id": 2032,
                          "name": "endTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2002,
                          "src": "6676:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "expression": {
                            "id": 2033,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1996,
                            "src": "6697:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2034,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "6705:9:20",
                          "memberName": "stakedApy",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3409,
                          "src": "6697:17:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 2024,
                        "name": "calculateRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1733,
                        "src": "6568:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint64_$_t_uint64_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint64,uint64,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2035,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6568:156:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6541:183:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2037,
                  "nodeType": "ExpressionStatement",
                  "src": "6541:183:20"
                },
                {
                  "expression": {
                    "id": 2038,
                    "name": "_stakeInfo",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1987,
                    "src": "6741:10:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                      "typeString": "struct StakeInfo memory"
                    }
                  },
                  "functionReturnParameters": 1984,
                  "id": 2039,
                  "nodeType": "Return",
                  "src": "6734:17:20"
                }
              ]
            },
            "documentation": {
              "id": 1975,
              "nodeType": "StructuredDocumentation",
              "src": "6071:44:20",
              "text": " @dev get user stake info."
            },
            "functionSelector": "08bc92d2",
            "id": 2041,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getStakingInfo",
            "nameLocation": "6129:14:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1980,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1977,
                  "mutability": "mutable",
                  "name": "_staker",
                  "nameLocation": "6161:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2041,
                  "src": "6153:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1976,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6153:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1979,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "6185:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2041,
                  "src": "6178:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1978,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6178:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6143:57:20"
            },
            "returnParameters": {
              "id": 1984,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1983,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2041,
                  "src": "6224:16:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                    "typeString": "struct StakeInfo"
                  },
                  "typeName": {
                    "id": 1982,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1981,
                      "name": "StakeInfo",
                      "nameLocations": [
                        "6224:9:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3427,
                      "src": "6224:9:20"
                    },
                    "referencedDeclaration": 3427,
                    "src": "6224:9:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                      "typeString": "struct StakeInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6223:18:20"
            },
            "scope": 2996,
            "src": "6120:638:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2062,
              "nodeType": "Block",
              "src": "6856:88:20",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2060,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2049,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "6873:5:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 2050,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6879:9:20",
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "6873:15:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "id": 2059,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 2051,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2044,
                          "src": "6892:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 2052,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "6900:9:20",
                        "memberName": "startTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3411,
                        "src": "6892:17:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint24",
                              "typeString": "uint24"
                            },
                            "id": 2057,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "hexValue": "31",
                                  "id": 2053,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6914:6:20",
                                  "subdenomination": "days",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_86400_by_1",
                                    "typeString": "int_const 86400"
                                  },
                                  "value": "1"
                                }
                              ],
                              "id": 2054,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "6913:8:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_86400_by_1",
                                "typeString": "int_const 86400"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "expression": {
                                "id": 2055,
                                "name": "project",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2044,
                                "src": "6924:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                  "typeString": "struct ProjectInfo memory"
                                }
                              },
                              "id": 2056,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6932:4:20",
                              "memberName": "term",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3403,
                              "src": "6924:12:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              }
                            },
                            "src": "6913:23:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint24",
                              "typeString": "uint24"
                            }
                          }
                        ],
                        "id": 2058,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "6912:25:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint24",
                          "typeString": "uint24"
                        }
                      },
                      "src": "6892:45:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "6873:64:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2048,
                  "id": 2061,
                  "nodeType": "Return",
                  "src": "6866:71:20"
                }
              ]
            },
            "id": 2063,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_projectEnd",
            "nameLocation": "6773:11:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2045,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2044,
                  "mutability": "mutable",
                  "name": "project",
                  "nameLocation": "6813:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2063,
                  "src": "6794:26:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                    "typeString": "struct ProjectInfo"
                  },
                  "typeName": {
                    "id": 2043,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2042,
                      "name": "ProjectInfo",
                      "nameLocations": [
                        "6794:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3414,
                      "src": "6794:11:20"
                    },
                    "referencedDeclaration": 3414,
                    "src": "6794:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                      "typeString": "struct ProjectInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6784:42:20"
            },
            "returnParameters": {
              "id": 2048,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2047,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2063,
                  "src": "6850:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2046,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6850:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6849:6:20"
            },
            "scope": 2996,
            "src": "6764:180:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2081,
              "nodeType": "Block",
              "src": "7012:98:20",
              "statements": [
                {
                  "assignments": [
                    2072
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2072,
                      "mutability": "mutable",
                      "name": "project",
                      "nameLocation": "7041:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2081,
                      "src": "7022:26:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                        "typeString": "struct ProjectInfo"
                      },
                      "typeName": {
                        "id": 2071,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2070,
                          "name": "ProjectInfo",
                          "nameLocations": [
                            "7022:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3414,
                          "src": "7022:11:20"
                        },
                        "referencedDeclaration": 3414,
                        "src": "7022:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                          "typeString": "struct ProjectInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2076,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 2074,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2065,
                        "src": "7063:2:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 2073,
                      "name": "_getProject",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1674,
                      "src": "7051:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint32_$returns$_t_struct$_ProjectInfo_$3414_memory_ptr_$",
                        "typeString": "function (uint32) view returns (struct ProjectInfo memory)"
                      }
                    },
                    "id": 2075,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7051:15:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                      "typeString": "struct ProjectInfo memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7022:44:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2078,
                        "name": "project",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2072,
                        "src": "7095:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                          "typeString": "struct ProjectInfo memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                          "typeString": "struct ProjectInfo memory"
                        }
                      ],
                      "id": 2077,
                      "name": "_projectEnd",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2063,
                      "src": "7083:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_ProjectInfo_$3414_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (struct ProjectInfo memory) view returns (bool)"
                      }
                    },
                    "id": 2079,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7083:20:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2069,
                  "id": 2080,
                  "nodeType": "Return",
                  "src": "7076:27:20"
                }
              ]
            },
            "functionSelector": "b4bbf4af",
            "id": 2082,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isProjectEnd",
            "nameLocation": "6959:12:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2066,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2065,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "6979:2:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2082,
                  "src": "6972:9:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2064,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6972:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6971:11:20"
            },
            "returnParameters": {
              "id": 2069,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2068,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2082,
                  "src": "7006:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2067,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7006:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7005:6:20"
            },
            "scope": 2996,
            "src": "6950:160:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2242,
              "nodeType": "Block",
              "src": "7187:1283:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2093,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "7205:7:20",
                        "subExpression": {
                          "id": 2092,
                          "name": "paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1525,
                          "src": "7206:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "706175736564",
                        "id": 2094,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7214:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee35723ac350a69d2a92d3703f17439cbaadf2f093a21ba5bf5f1a53eb2a14d9",
                          "typeString": "literal_string \"paused\""
                        },
                        "value": "paused"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee35723ac350a69d2a92d3703f17439cbaadf2f093a21ba5bf5f1a53eb2a14d9",
                          "typeString": "literal_string \"paused\""
                        }
                      ],
                      "id": 2091,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7197:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2095,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7197:26:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2096,
                  "nodeType": "ExpressionStatement",
                  "src": "7197:26:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "id": 2100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2098,
                          "name": "qty",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2086,
                          "src": "7241:3:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2099,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7247:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "7241:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "21717479",
                        "id": 2101,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7250:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_94de11adf9f8c898de132cca41cc4c022e22f0d0c43e8a634e891246a032145d",
                          "typeString": "literal_string \"!qty\""
                        },
                        "value": "!qty"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_94de11adf9f8c898de132cca41cc4c022e22f0d0c43e8a634e891246a032145d",
                          "typeString": "literal_string \"!qty\""
                        }
                      ],
                      "id": 2097,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7233:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7233:24:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2103,
                  "nodeType": "ExpressionStatement",
                  "src": "7233:24:20"
                },
                {
                  "assignments": [
                    2105
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2105,
                      "mutability": "mutable",
                      "name": "_sender",
                      "nameLocation": "7276:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2242,
                      "src": "7268:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2104,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7268:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2108,
                  "initialValue": {
                    "expression": {
                      "id": 2106,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "7286:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 2107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "7290:6:20",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "7286:10:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7268:28:20"
                },
                {
                  "assignments": [
                    2111
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2111,
                      "mutability": "mutable",
                      "name": "project",
                      "nameLocation": "7326:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2242,
                      "src": "7307:26:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                        "typeString": "struct ProjectInfo"
                      },
                      "typeName": {
                        "id": 2110,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2109,
                          "name": "ProjectInfo",
                          "nameLocations": [
                            "7307:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3414,
                          "src": "7307:11:20"
                        },
                        "referencedDeclaration": 3414,
                        "src": "7307:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                          "typeString": "struct ProjectInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2115,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 2113,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2084,
                        "src": "7348:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 2112,
                      "name": "_getProject",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1674,
                      "src": "7336:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint32_$returns$_t_struct$_ProjectInfo_$3414_memory_ptr_$",
                        "typeString": "function (uint32) view returns (struct ProjectInfo memory)"
                      }
                    },
                    "id": 2114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7336:22:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                      "typeString": "struct ProjectInfo memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7307:51:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        },
                        "id": 2120,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2117,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2111,
                            "src": "7376:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2118,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7384:6:20",
                          "memberName": "status",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3401,
                          "src": "7376:14:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 2119,
                          "name": "ACTIVE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4800,
                          "src": "7394:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "src": "7376:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "21616374697665",
                        "id": 2121,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7402:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5f3f69ce5e4606b03ed1bd946f699844049b6ab1cd761baf995ff8e6b07a265f",
                          "typeString": "literal_string \"!active\""
                        },
                        "value": "!active"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5f3f69ce5e4606b03ed1bd946f699844049b6ab1cd761baf995ff8e6b07a265f",
                          "typeString": "literal_string \"!active\""
                        }
                      ],
                      "id": 2116,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7368:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7368:44:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2123,
                  "nodeType": "ExpressionStatement",
                  "src": "7368:44:20"
                },
                {
                  "assignments": [
                    2126
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2126,
                      "mutability": "mutable",
                      "name": "_stakerInfo",
                      "nameLocation": "7440:11:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2242,
                      "src": "7423:28:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo"
                      },
                      "typeName": {
                        "id": 2125,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2124,
                          "name": "StakeInfo",
                          "nameLocations": [
                            "7423:9:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3427,
                          "src": "7423:9:20"
                        },
                        "referencedDeclaration": 3427,
                        "src": "7423:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                          "typeString": "struct StakeInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2132,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 2127,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1558,
                        "src": "7454:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                        }
                      },
                      "id": 2129,
                      "indexExpression": {
                        "id": 2128,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2105,
                        "src": "7462:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "7454:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                        "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                      }
                    },
                    "id": 2131,
                    "indexExpression": {
                      "id": 2130,
                      "name": "projectId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2084,
                      "src": "7471:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7454:27:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7423:58:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "id": 2137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2134,
                            "name": "_stakerInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2126,
                            "src": "7500:11:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                              "typeString": "struct StakeInfo memory"
                            }
                          },
                          "id": 2135,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7512:3:20",
                          "memberName": "qty",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3418,
                          "src": "7500:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2136,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7519:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "7500:20:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "217374616b65722e717479",
                        "id": 2138,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7522:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cb8a88954054959c951c9539fac11c6b41311fa288378adc94ee8a89cee8b8b9",
                          "typeString": "literal_string \"!staker.qty\""
                        },
                        "value": "!staker.qty"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cb8a88954054959c951c9539fac11c6b41311fa288378adc94ee8a89cee8b8b9",
                          "typeString": "literal_string \"!staker.qty\""
                        }
                      ],
                      "id": 2133,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7492:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7492:44:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2140,
                  "nodeType": "ExpressionStatement",
                  "src": "7492:44:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "id": 2145,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2142,
                            "name": "_stakerInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2126,
                            "src": "7616:11:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                              "typeString": "struct StakeInfo memory"
                            }
                          },
                          "id": 2143,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7628:3:20",
                          "memberName": "qty",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3418,
                          "src": "7616:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 2144,
                          "name": "qty",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2086,
                          "src": "7635:3:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "src": "7616:22:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "717479203e",
                        "id": 2146,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7640:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2084793de3f64fd0be902c13aef3e30c4f70d54d321680c64bf7651fe22c15a1",
                          "typeString": "literal_string \"qty >\""
                        },
                        "value": "qty >"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2084793de3f64fd0be902c13aef3e30c4f70d54d321680c64bf7651fe22c15a1",
                          "typeString": "literal_string \"qty >\""
                        }
                      ],
                      "id": 2141,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7608:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2147,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7608:40:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2148,
                  "nodeType": "ExpressionStatement",
                  "src": "7608:40:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2151,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2111,
                            "src": "7726:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          ],
                          "id": 2150,
                          "name": "_projectEnd",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2063,
                          "src": "7714:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_ProjectInfo_$3414_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (struct ProjectInfo memory) view returns (bool)"
                          }
                        },
                        "id": 2152,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7714:20:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "21656e64",
                        "id": 2153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7736:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_af57bbbf1b6de22c0b4f111a463e7be489f632422460d9f47cd7bdcd9b45dd81",
                          "typeString": "literal_string \"!end\""
                        },
                        "value": "!end"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_af57bbbf1b6de22c0b4f111a463e7be489f632422460d9f47cd7bdcd9b45dd81",
                          "typeString": "literal_string \"!end\""
                        }
                      ],
                      "id": 2149,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7706:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7706:37:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2155,
                  "nodeType": "ExpressionStatement",
                  "src": "7706:37:20"
                },
                {
                  "assignments": [
                    2157
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2157,
                      "mutability": "mutable",
                      "name": "endsTime",
                      "nameLocation": "7761:8:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2242,
                      "src": "7754:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 2156,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "7754:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2167,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 2161,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "7783:5:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2162,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "7789:9:20",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "7783:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2160,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7776:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 2159,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "7776:6:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2163,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7776:23:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "expression": {
                          "id": 2164,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2111,
                          "src": "7801:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 2165,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "7809:7:20",
                        "memberName": "endTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3413,
                        "src": "7801:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 2158,
                      "name": "min",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1974,
                      "src": "7772:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint64_$_t_uint64_$returns$_t_uint64_$",
                        "typeString": "function (uint64,uint64) pure returns (uint64)"
                      }
                    },
                    "id": 2166,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7772:45:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7754:63:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    },
                    "id": 2171,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2168,
                        "name": "_stakerInfo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2126,
                        "src": "7832:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 2169,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7844:9:20",
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3422,
                      "src": "7832:21:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 2170,
                      "name": "endsTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2157,
                      "src": "7856:8:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "7832:32:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2190,
                  "nodeType": "IfStatement",
                  "src": "7828:306:20",
                  "trueBody": {
                    "id": 2189,
                    "nodeType": "Block",
                    "src": "7866:268:20",
                    "statements": [
                      {
                        "expression": {
                          "id": 2187,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2172,
                              "name": "_stakerInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2126,
                              "src": "7916:11:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 2174,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "7928:12:20",
                            "memberName": "accumRewards",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3424,
                            "src": "7916:24:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2180,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 2176,
                                    "name": "_stakerInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2126,
                                    "src": "7978:11:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                      "typeString": "struct StakeInfo memory"
                                    }
                                  },
                                  "id": 2177,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "7990:3:20",
                                  "memberName": "qty",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3418,
                                  "src": "7978:15:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "expression": {
                                    "id": 2178,
                                    "name": "project",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2111,
                                    "src": "7996:7:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                      "typeString": "struct ProjectInfo memory"
                                    }
                                  },
                                  "id": 2179,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "8004:5:20",
                                  "memberName": "price",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3397,
                                  "src": "7996:13:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "7978:31:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 2181,
                                  "name": "_stakerInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2126,
                                  "src": "8027:11:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                    "typeString": "struct StakeInfo memory"
                                  }
                                },
                                "id": 2182,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "8039:9:20",
                                "memberName": "startTime",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3422,
                                "src": "8027:21:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "id": 2183,
                                "name": "endsTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2157,
                                "src": "8066:8:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "expression": {
                                  "id": 2184,
                                  "name": "project",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2111,
                                  "src": "8092:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                    "typeString": "struct ProjectInfo memory"
                                  }
                                },
                                "id": 2185,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "8100:9:20",
                                "memberName": "stakedApy",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3409,
                                "src": "8092:17:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 2175,
                              "name": "calculateRewards",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1733,
                              "src": "7944:16:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint64_$_t_uint64_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint64,uint64,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 2186,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7944:179:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7916:207:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2188,
                        "nodeType": "ExpressionStatement",
                        "src": "7916:207:20"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 2195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2191,
                        "name": "_stakerInfo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2126,
                        "src": "8144:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 2193,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "8156:3:20",
                      "memberName": "qty",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3418,
                      "src": "8144:15:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 2194,
                      "name": "qty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2086,
                      "src": "8163:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "src": "8144:22:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "id": 2196,
                  "nodeType": "ExpressionStatement",
                  "src": "8144:22:20"
                },
                {
                  "expression": {
                    "id": 2205,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2197,
                        "name": "_stakerInfo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2126,
                        "src": "8176:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 2199,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "8188:9:20",
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3422,
                      "src": "8176:21:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 2202,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "8207:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 2203,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8213:9:20",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "8207:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 2201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "8200:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint64_$",
                          "typeString": "type(uint64)"
                        },
                        "typeName": {
                          "id": 2200,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "8200:6:20",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 2204,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8200:23:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "8176:47:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "id": 2206,
                  "nodeType": "ExpressionStatement",
                  "src": "8176:47:20"
                },
                {
                  "expression": {
                    "id": 2213,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 2207,
                          "name": "stakers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1558,
                          "src": "8234:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                            "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                          }
                        },
                        "id": 2210,
                        "indexExpression": {
                          "id": 2208,
                          "name": "_sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2105,
                          "src": "8242:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8234:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                          "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                        }
                      },
                      "id": 2211,
                      "indexExpression": {
                        "id": 2209,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2084,
                        "src": "8251:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8234:27:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                        "typeString": "struct StakeInfo storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2212,
                      "name": "_stakerInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2126,
                      "src": "8264:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo memory"
                      }
                    },
                    "src": "8234:41:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "id": 2214,
                  "nodeType": "ExpressionStatement",
                  "src": "8234:41:20"
                },
                {
                  "assignments": [
                    2217
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2217,
                      "mutability": "mutable",
                      "name": "hld",
                      "nameLocation": "8337:3:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2242,
                      "src": "8318:22:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                        "typeString": "struct HoldingInfo"
                      },
                      "typeName": {
                        "id": 2216,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2215,
                          "name": "HoldingInfo",
                          "nameLocations": [
                            "8318:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3385,
                          "src": "8318:11:20"
                        },
                        "referencedDeclaration": 3385,
                        "src": "8318:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                          "typeString": "struct HoldingInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2224,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 2218,
                        "name": "holdings",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1569,
                        "src": "8343:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                        }
                      },
                      "id": 2220,
                      "indexExpression": {
                        "id": 2219,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2105,
                        "src": "8352:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "8343:17:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                        "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                      }
                    },
                    "id": 2223,
                    "indexExpression": {
                      "expression": {
                        "id": 2221,
                        "name": "project",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2111,
                        "src": "8361:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                          "typeString": "struct ProjectInfo memory"
                        }
                      },
                      "id": 2222,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8369:2:20",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3389,
                      "src": "8361:10:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8343:29:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                      "typeString": "struct HoldingInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8318:54:20"
                },
                {
                  "expression": {
                    "id": 2229,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2225,
                        "name": "hld",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2217,
                        "src": "8382:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 2227,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "8386:3:20",
                      "memberName": "qty",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3378,
                      "src": "8382:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 2228,
                      "name": "qty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2086,
                      "src": "8393:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "src": "8382:14:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2230,
                  "nodeType": "ExpressionStatement",
                  "src": "8382:14:20"
                },
                {
                  "expression": {
                    "id": 2238,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 2231,
                          "name": "holdings",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1569,
                          "src": "8406:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                            "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                          }
                        },
                        "id": 2235,
                        "indexExpression": {
                          "id": 2232,
                          "name": "_sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2105,
                          "src": "8415:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8406:17:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                          "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                        }
                      },
                      "id": 2236,
                      "indexExpression": {
                        "expression": {
                          "id": 2233,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2111,
                          "src": "8424:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 2234,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8432:2:20",
                        "memberName": "id",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3389,
                        "src": "8424:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8406:29:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                        "typeString": "struct HoldingInfo storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2237,
                      "name": "hld",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2217,
                      "src": "8438:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                        "typeString": "struct HoldingInfo memory"
                      }
                    },
                    "src": "8406:35:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                      "typeString": "struct HoldingInfo storage ref"
                    }
                  },
                  "id": 2239,
                  "nodeType": "ExpressionStatement",
                  "src": "8406:35:20"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 2240,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8459:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 2090,
                  "id": 2241,
                  "nodeType": "Return",
                  "src": "8452:11:20"
                }
              ]
            },
            "functionSelector": "d7526ffa",
            "id": 2243,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "unstake",
            "nameLocation": "7125:7:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2087,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2084,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "7140:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2243,
                  "src": "7133:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2083,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7133:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2086,
                  "mutability": "mutable",
                  "name": "qty",
                  "nameLocation": "7158:3:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2243,
                  "src": "7151:10:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2085,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7151:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7132:30:20"
            },
            "returnParameters": {
              "id": 2090,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2089,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2243,
                  "src": "7181:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2088,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7181:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7180:6:20"
            },
            "scope": 2996,
            "src": "7116:1354:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2468,
              "nodeType": "Block",
              "src": "9538:2019:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2257,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "9556:7:20",
                        "subExpression": {
                          "id": 2256,
                          "name": "paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1525,
                          "src": "9557:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "706175736564",
                        "id": 2258,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9565:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee35723ac350a69d2a92d3703f17439cbaadf2f093a21ba5bf5f1a53eb2a14d9",
                          "typeString": "literal_string \"paused\""
                        },
                        "value": "paused"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee35723ac350a69d2a92d3703f17439cbaadf2f093a21ba5bf5f1a53eb2a14d9",
                          "typeString": "literal_string \"paused\""
                        }
                      ],
                      "id": 2255,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9548:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2259,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9548:26:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2260,
                  "nodeType": "ExpressionStatement",
                  "src": "9548:26:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 2274,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          },
                          "id": 2267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                },
                                "id": 2264,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2262,
                                  "name": "rewardType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2248,
                                  "src": "9606:10:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&",
                                "rightExpression": {
                                  "id": 2263,
                                  "name": "REWARD_TYPE_HOLDING",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1415,
                                  "src": "9619:19:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "src": "9606:32:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              }
                            ],
                            "id": 2265,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "9605:34:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2266,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9643:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "9605:39:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          },
                          "id": 2273,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                },
                                "id": 2270,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2268,
                                  "name": "rewardType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2248,
                                  "src": "9665:10:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&",
                                "rightExpression": {
                                  "id": 2269,
                                  "name": "REWARD_TYPE_STAKING",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1418,
                                  "src": "9678:19:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "src": "9665:32:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              }
                            ],
                            "id": 2271,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "9664:34:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2272,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9702:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "9664:39:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "9605:98:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "2174797065",
                        "id": 2275,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9717:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_76b7b7f671dcec068b9715acbafa10bdb61a00c778ab1dc0f2b40e1f9b8bc24d",
                          "typeString": "literal_string \"!type\""
                        },
                        "value": "!type"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_76b7b7f671dcec068b9715acbafa10bdb61a00c778ab1dc0f2b40e1f9b8bc24d",
                          "typeString": "literal_string \"!type\""
                        }
                      ],
                      "id": 2261,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9584:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2276,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9584:150:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2277,
                  "nodeType": "ExpressionStatement",
                  "src": "9584:150:20"
                },
                {
                  "assignments": [
                    2279
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2279,
                      "mutability": "mutable",
                      "name": "_sender",
                      "nameLocation": "9753:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2468,
                      "src": "9745:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2278,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9745:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2282,
                  "initialValue": {
                    "expression": {
                      "id": 2280,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "9763:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 2281,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "9767:6:20",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "9763:10:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9745:28:20"
                },
                {
                  "assignments": [
                    2285
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2285,
                      "mutability": "mutable",
                      "name": "project",
                      "nameLocation": "9803:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2468,
                      "src": "9784:26:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                        "typeString": "struct ProjectInfo"
                      },
                      "typeName": {
                        "id": 2284,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2283,
                          "name": "ProjectInfo",
                          "nameLocations": [
                            "9784:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3414,
                          "src": "9784:11:20"
                        },
                        "referencedDeclaration": 3414,
                        "src": "9784:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                          "typeString": "struct ProjectInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2289,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 2287,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2246,
                        "src": "9825:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 2286,
                      "name": "_getProject",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1674,
                      "src": "9813:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint32_$returns$_t_struct$_ProjectInfo_$3414_memory_ptr_$",
                        "typeString": "function (uint32) view returns (struct ProjectInfo memory)"
                      }
                    },
                    "id": 2288,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9813:22:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                      "typeString": "struct ProjectInfo memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9784:51:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        },
                        "id": 2294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2291,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2285,
                            "src": "9853:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2292,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9861:6:20",
                          "memberName": "status",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3401,
                          "src": "9853:14:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 2293,
                          "name": "ACTIVE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4800,
                          "src": "9871:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "src": "9853:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "21616374697665",
                        "id": 2295,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9879:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5f3f69ce5e4606b03ed1bd946f699844049b6ab1cd761baf995ff8e6b07a265f",
                          "typeString": "literal_string \"!active\""
                        },
                        "value": "!active"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5f3f69ce5e4606b03ed1bd946f699844049b6ab1cd761baf995ff8e6b07a265f",
                          "typeString": "literal_string \"!active\""
                        }
                      ],
                      "id": 2290,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9845:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2296,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9845:44:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2297,
                  "nodeType": "ExpressionStatement",
                  "src": "9845:44:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2299,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2285,
                            "src": "9907:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2300,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9915:9:20",
                          "memberName": "startTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3411,
                          "src": "9907:17:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 2301,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "9928:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 2302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9934:9:20",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "9928:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9907:36:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "217374617274",
                        "id": 2304,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9945:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8aa2d44dcfdb120fea3dc7f28ab034207598fccd12631bc01958fb8d900dbccd",
                          "typeString": "literal_string \"!start\""
                        },
                        "value": "!start"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8aa2d44dcfdb120fea3dc7f28ab034207598fccd12631bc01958fb8d900dbccd",
                          "typeString": "literal_string \"!start\""
                        }
                      ],
                      "id": 2298,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9899:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2305,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9899:55:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2306,
                  "nodeType": "ExpressionStatement",
                  "src": "9899:55:20"
                },
                {
                  "assignments": [
                    2309
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2309,
                      "mutability": "mutable",
                      "name": "stk",
                      "nameLocation": "9982:3:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2468,
                      "src": "9965:20:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo"
                      },
                      "typeName": {
                        "id": 2308,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2307,
                          "name": "StakeInfo",
                          "nameLocations": [
                            "9965:9:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3427,
                          "src": "9965:9:20"
                        },
                        "referencedDeclaration": 3427,
                        "src": "9965:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                          "typeString": "struct StakeInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2315,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 2310,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1558,
                        "src": "9988:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                        }
                      },
                      "id": 2312,
                      "indexExpression": {
                        "id": 2311,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2279,
                        "src": "9996:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "9988:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                        "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                      }
                    },
                    "id": 2314,
                    "indexExpression": {
                      "id": 2313,
                      "name": "projectId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2246,
                      "src": "10005:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9988:27:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9965:50:20"
                },
                {
                  "assignments": [
                    2317
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2317,
                      "mutability": "mutable",
                      "name": "_collectedTotal",
                      "nameLocation": "10034:15:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2468,
                      "src": "10026:23:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2316,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10026:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2319,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 2318,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "10052:1:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10026:27:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    },
                    "id": 2325,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          },
                          "id": 2322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2320,
                            "name": "rewardType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2248,
                            "src": "10069:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&",
                          "rightExpression": {
                            "id": 2321,
                            "name": "REWARD_TYPE_HOLDING",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1415,
                            "src": "10082:19:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "src": "10069:32:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        }
                      ],
                      "id": 2323,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "10068:34:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2324,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10106:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "10068:39:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2345,
                  "nodeType": "IfStatement",
                  "src": "10064:248:20",
                  "trueBody": {
                    "id": 2344,
                    "nodeType": "Block",
                    "src": "10109:203:20",
                    "statements": [
                      {
                        "assignments": [
                          2328
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2328,
                            "mutability": "mutable",
                            "name": "_holding",
                            "nameLocation": "10181:8:20",
                            "nodeType": "VariableDeclaration",
                            "scope": 2344,
                            "src": "10162:27:20",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                              "typeString": "struct HoldingInfo"
                            },
                            "typeName": {
                              "id": 2327,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2326,
                                "name": "HoldingInfo",
                                "nameLocations": [
                                  "10162:11:20"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 3385,
                                "src": "10162:11:20"
                              },
                              "referencedDeclaration": 3385,
                              "src": "10162:11:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                                "typeString": "struct HoldingInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2335,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 2329,
                              "name": "holdings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1569,
                              "src": "10192:8:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                                "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                              }
                            },
                            "id": 2331,
                            "indexExpression": {
                              "id": 2330,
                              "name": "_sender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2279,
                              "src": "10201:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "10192:17:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                              "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                            }
                          },
                          "id": 2334,
                          "indexExpression": {
                            "expression": {
                              "id": 2332,
                              "name": "project",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2285,
                              "src": "10210:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                "typeString": "struct ProjectInfo memory"
                              }
                            },
                            "id": 2333,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "10218:2:20",
                            "memberName": "id",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3389,
                            "src": "10210:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10192:29:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                            "typeString": "struct HoldingInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10162:59:20"
                      },
                      {
                        "expression": {
                          "id": 2342,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2336,
                            "name": "_collectedTotal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2317,
                            "src": "10235:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 2338,
                                "name": "_sender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2279,
                                "src": "10274:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 2339,
                                "name": "project",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2285,
                                "src": "10283:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                  "typeString": "struct ProjectInfo memory"
                                }
                              },
                              {
                                "id": 2340,
                                "name": "_holding",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2328,
                                "src": "10292:8:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                                  "typeString": "struct HoldingInfo memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                  "typeString": "struct ProjectInfo memory"
                                },
                                {
                                  "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                                  "typeString": "struct HoldingInfo memory"
                                }
                              ],
                              "id": 2337,
                              "name": "_accumHoldingRewards",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2565,
                              "src": "10253:20:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_ProjectInfo_$3414_memory_ptr_$_t_struct$_HoldingInfo_$3385_memory_ptr_$returns$_t_uint256_$",
                                "typeString": "function (address,struct ProjectInfo memory,struct HoldingInfo memory) returns (uint256)"
                              }
                            },
                            "id": 2341,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10253:48:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10235:66:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2343,
                        "nodeType": "ExpressionStatement",
                        "src": "10235:66:20"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    },
                    "id": 2351,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          },
                          "id": 2348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2346,
                            "name": "rewardType",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2248,
                            "src": "10327:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&",
                          "rightExpression": {
                            "id": 2347,
                            "name": "REWARD_TYPE_STAKING",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1418,
                            "src": "10340:19:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "src": "10327:32:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        }
                      ],
                      "id": 2349,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "10326:34:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2350,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10364:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "10326:39:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2445,
                  "nodeType": "IfStatement",
                  "src": "10322:906:20",
                  "trueBody": {
                    "id": 2444,
                    "nodeType": "Block",
                    "src": "10367:861:20",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              "id": 2356,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2353,
                                  "name": "stk",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2309,
                                  "src": "10389:3:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                    "typeString": "struct StakeInfo memory"
                                  }
                                },
                                "id": 2354,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10393:3:20",
                                "memberName": "qty",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3418,
                                "src": "10389:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 2355,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10399:1:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "10389:11:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "217374616b6564",
                              "id": 2357,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10402:9:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_80b056f9550ecc47107329535d0b0e6d2c94a4e6fda289320403c71d34aecf05",
                                "typeString": "literal_string \"!staked\""
                              },
                              "value": "!staked"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_80b056f9550ecc47107329535d0b0e6d2c94a4e6fda289320403c71d34aecf05",
                                "typeString": "literal_string \"!staked\""
                              }
                            ],
                            "id": 2352,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10381:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10381:31:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2359,
                        "nodeType": "ExpressionStatement",
                        "src": "10381:31:20"
                      },
                      {
                        "assignments": [
                          2361
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2361,
                            "mutability": "mutable",
                            "name": "endTime",
                            "nameLocation": "10526:7:20",
                            "nodeType": "VariableDeclaration",
                            "scope": 2444,
                            "src": "10519:14:20",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            },
                            "typeName": {
                              "id": 2360,
                              "name": "uint64",
                              "nodeType": "ElementaryTypeName",
                              "src": "10519:6:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2371,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 2365,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "10547:5:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 2366,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10553:9:20",
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "10547:15:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2364,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10540:6:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint64_$",
                                  "typeString": "type(uint64)"
                                },
                                "typeName": {
                                  "id": 2363,
                                  "name": "uint64",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "10540:6:20",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2367,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10540:23:20",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            {
                              "expression": {
                                "id": 2368,
                                "name": "project",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2285,
                                "src": "10565:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                  "typeString": "struct ProjectInfo memory"
                                }
                              },
                              "id": 2369,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "10573:7:20",
                              "memberName": "endTime",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3413,
                              "src": "10565:15:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            ],
                            "id": 2362,
                            "name": "min",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1974,
                            "src": "10536:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint64_$_t_uint64_$returns$_t_uint64_$",
                              "typeString": "function (uint64,uint64) pure returns (uint64)"
                            }
                          },
                          "id": 2370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10536:45:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10519:62:20"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 2375,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2372,
                              "name": "stk",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2309,
                              "src": "10600:3:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 2373,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "10604:9:20",
                            "memberName": "startTime",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3422,
                            "src": "10600:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 2374,
                            "name": "endTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2361,
                            "src": "10616:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "10600:23:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2379,
                        "nodeType": "IfStatement",
                        "src": "10596:74:20",
                        "trueBody": {
                          "id": 2378,
                          "nodeType": "Block",
                          "src": "10625:45:20",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "66616c7365",
                                "id": 2376,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10650:5:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              "functionReturnParameters": 2254,
                              "id": 2377,
                              "nodeType": "Return",
                              "src": "10643:12:20"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2381
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2381,
                            "mutability": "mutable",
                            "name": "_accumRewards",
                            "nameLocation": "10692:13:20",
                            "nodeType": "VariableDeclaration",
                            "scope": 2444,
                            "src": "10684:21:20",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2380,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10684:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2384,
                        "initialValue": {
                          "expression": {
                            "id": 2382,
                            "name": "stk",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2309,
                            "src": "10708:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                              "typeString": "struct StakeInfo memory"
                            }
                          },
                          "id": 2383,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "10712:12:20",
                          "memberName": "accumRewards",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3424,
                          "src": "10708:16:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10684:40:20"
                      },
                      {
                        "expression": {
                          "id": 2398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2385,
                            "name": "_accumRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2381,
                            "src": "10738:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2391,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 2387,
                                    "name": "stk",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2309,
                                    "src": "10788:3:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                      "typeString": "struct StakeInfo memory"
                                    }
                                  },
                                  "id": 2388,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10792:3:20",
                                  "memberName": "qty",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3418,
                                  "src": "10788:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint32",
                                    "typeString": "uint32"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "expression": {
                                    "id": 2389,
                                    "name": "project",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2285,
                                    "src": "10798:7:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                      "typeString": "struct ProjectInfo memory"
                                    }
                                  },
                                  "id": 2390,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10806:5:20",
                                  "memberName": "price",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3397,
                                  "src": "10798:13:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "10788:23:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 2392,
                                  "name": "stk",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2309,
                                  "src": "10829:3:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                    "typeString": "struct StakeInfo memory"
                                  }
                                },
                                "id": 2393,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10833:9:20",
                                "memberName": "startTime",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3422,
                                "src": "10829:13:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "id": 2394,
                                "name": "endTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2361,
                                "src": "10860:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              },
                              {
                                "expression": {
                                  "id": 2395,
                                  "name": "project",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2285,
                                  "src": "10885:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                    "typeString": "struct ProjectInfo memory"
                                  }
                                },
                                "id": 2396,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10893:9:20",
                                "memberName": "stakedApy",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3409,
                                "src": "10885:17:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 2386,
                              "name": "calculateRewards",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1733,
                              "src": "10754:16:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint64_$_t_uint64_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint64,uint64,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 2397,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10754:162:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10738:178:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2399,
                        "nodeType": "ExpressionStatement",
                        "src": "10738:178:20"
                      },
                      {
                        "expression": {
                          "id": 2408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2400,
                              "name": "stk",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2309,
                              "src": "10931:3:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 2402,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "10935:9:20",
                            "memberName": "startTime",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3422,
                            "src": "10931:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 2405,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "10954:5:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 2406,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10960:9:20",
                                "memberName": "timestamp",
                                "nodeType": "MemberAccess",
                                "src": "10954:15:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 2404,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "10947:6:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint64_$",
                                "typeString": "type(uint64)"
                              },
                              "typeName": {
                                "id": 2403,
                                "name": "uint64",
                                "nodeType": "ElementaryTypeName",
                                "src": "10947:6:20",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2407,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10947:23:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "10931:39:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "id": 2409,
                        "nodeType": "ExpressionStatement",
                        "src": "10931:39:20"
                      },
                      {
                        "expression": {
                          "id": 2414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2410,
                              "name": "stk",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2309,
                              "src": "10984:3:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 2412,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "10988:12:20",
                            "memberName": "accumRewards",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3424,
                            "src": "10984:16:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 2413,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11003:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "10984:20:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2415,
                        "nodeType": "ExpressionStatement",
                        "src": "10984:20:20"
                      },
                      {
                        "expression": {
                          "id": 2420,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2416,
                              "name": "stk",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2309,
                              "src": "11018:3:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 2418,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "11022:14:20",
                            "memberName": "claimedRewards",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3426,
                            "src": "11018:18:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 2419,
                            "name": "_accumRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2381,
                            "src": "11040:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11018:35:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2421,
                        "nodeType": "ExpressionStatement",
                        "src": "11018:35:20"
                      },
                      {
                        "expression": {
                          "id": 2428,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 2422,
                                "name": "stakers",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1558,
                                "src": "11068:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                                  "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                                }
                              },
                              "id": 2425,
                              "indexExpression": {
                                "id": 2423,
                                "name": "_sender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2279,
                                "src": "11076:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11068:16:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                                "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                              }
                            },
                            "id": 2426,
                            "indexExpression": {
                              "id": 2424,
                              "name": "projectId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2246,
                              "src": "11085:9:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11068:27:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                              "typeString": "struct StakeInfo storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 2427,
                            "name": "stk",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2309,
                            "src": "11098:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                              "typeString": "struct StakeInfo memory"
                            }
                          },
                          "src": "11068:33:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                            "typeString": "struct StakeInfo storage ref"
                          }
                        },
                        "id": 2429,
                        "nodeType": "ExpressionStatement",
                        "src": "11068:33:20"
                      },
                      {
                        "expression": {
                          "id": 2438,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 2430,
                                  "name": "holdings",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1569,
                                  "src": "11116:8:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                                    "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                                  }
                                },
                                "id": 2433,
                                "indexExpression": {
                                  "id": 2431,
                                  "name": "_sender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2279,
                                  "src": "11125:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11116:17:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                                  "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                                }
                              },
                              "id": 2434,
                              "indexExpression": {
                                "id": 2432,
                                "name": "projectId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2246,
                                "src": "11134:9:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11116:28:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                                "typeString": "struct HoldingInfo storage ref"
                              }
                            },
                            "id": 2435,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "11145:9:20",
                            "memberName": "startTime",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3380,
                            "src": "11116:38:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 2436,
                              "name": "stk",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2309,
                              "src": "11157:3:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 2437,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "11161:9:20",
                            "memberName": "startTime",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3422,
                            "src": "11157:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "11116:54:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "id": 2439,
                        "nodeType": "ExpressionStatement",
                        "src": "11116:54:20"
                      },
                      {
                        "expression": {
                          "id": 2442,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2440,
                            "name": "_collectedTotal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2317,
                            "src": "11185:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 2441,
                            "name": "_accumRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2381,
                            "src": "11204:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11185:32:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2443,
                        "nodeType": "ExpressionStatement",
                        "src": "11185:32:20"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2448,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2446,
                      "name": "_collectedTotal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2317,
                      "src": "11278:15:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2447,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "11296:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "11278:19:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2465,
                  "nodeType": "IfStatement",
                  "src": "11274:194:20",
                  "trueBody": {
                    "id": 2464,
                    "nodeType": "Block",
                    "src": "11299:169:20",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2452,
                              "name": "_sender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2279,
                              "src": "11337:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2453,
                              "name": "_collectedTotal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2317,
                              "src": "11346:15:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2449,
                              "name": "stableCoin",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1522,
                              "src": "11313:10:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ICoin_$3374",
                                "typeString": "contract ICoin"
                              }
                            },
                            "id": 2451,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "11324:12:20",
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3027,
                            "src": "11313:23:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$4908_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4908_$",
                              "typeString": "function (contract IERC20,address,uint256)"
                            }
                          },
                          "id": 2454,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11313:49:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2455,
                        "nodeType": "ExpressionStatement",
                        "src": "11313:49:20"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 2457,
                              "name": "_sender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2279,
                              "src": "11396:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2458,
                              "name": "projectId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2246,
                              "src": "11405:9:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              }
                            },
                            {
                              "id": 2459,
                              "name": "_collectedTotal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2317,
                              "src": "11416:15:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint32",
                                "typeString": "uint32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2456,
                            "name": "CollectRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1539,
                            "src": "11381:14:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint32,uint256)"
                            }
                          },
                          "id": 2460,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11381:51:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2461,
                        "nodeType": "EmitStatement",
                        "src": "11376:56:20"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 2462,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11453:4:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 2254,
                        "id": 2463,
                        "nodeType": "Return",
                        "src": "11446:11:20"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "hexValue": "66616c7365",
                    "id": 2466,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "11545:5:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "functionReturnParameters": 2254,
                  "id": 2467,
                  "nodeType": "Return",
                  "src": "11538:12:20"
                }
              ]
            },
            "documentation": {
              "id": 2244,
              "nodeType": "StructuredDocumentation",
              "src": "8476:937:20",
              "text": " This function allows the user to collect rewards from staking and holding\n tokens in a given project.\n It takes in two parameters: 'projectId' and 'rewardType'. It first checks to\n make sure staking is not paused\n and that a valid type of reward is specified. Afterward, it checks that the\n project status is active and then\n collects rewards. If the reward type indicates staking rewards, it calculates\n the rewards earned,\n updates the stake information and starts a new stake period. Afterwards, it\n transfers the collected rewards\n to the user and emits the CollectRewards event.\n @param projectId The ID of the project to collect rewards from.\n @param rewardType {uint16} The type of reward to collect. Can be\n                   REWARD_TYPE_HOLDING, REWARD_TYPE_STAKING or both.\n @return {bool} Boolean indicating success."
            },
            "functionSelector": "fd93238a",
            "id": 2469,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 2251,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 2250,
                  "name": "nonReentrant",
                  "nameLocations": [
                    "9510:12:20"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3570,
                  "src": "9510:12:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "9510:12:20"
              }
            ],
            "name": "collectRewards",
            "nameLocation": "9427:14:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2249,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2246,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "9458:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2469,
                  "src": "9451:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2245,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9451:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2248,
                  "mutability": "mutable",
                  "name": "rewardType",
                  "nameLocation": "9484:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2469,
                  "src": "9477:17:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 2247,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "9477:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9441:59:20"
            },
            "returnParameters": {
              "id": 2254,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2253,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2469,
                  "src": "9532:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2252,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9532:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9531:6:20"
            },
            "scope": 2996,
            "src": "9418:2139:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2564,
              "nodeType": "Block",
              "src": "12341:628:20",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2483,
                        "name": "hld",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2478,
                        "src": "12355:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 2484,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "12359:3:20",
                      "memberName": "qty",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3378,
                      "src": "12355:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2485,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12366:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "12355:12:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2490,
                  "nodeType": "IfStatement",
                  "src": "12351:51:20",
                  "trueBody": {
                    "id": 2489,
                    "nodeType": "Block",
                    "src": "12369:33:20",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 2487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12390:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 2482,
                        "id": 2488,
                        "nodeType": "Return",
                        "src": "12383:8:20"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    2492
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2492,
                      "mutability": "mutable",
                      "name": "endTime",
                      "nameLocation": "12419:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2564,
                      "src": "12412:14:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 2491,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "12412:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2502,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 2496,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "12440:5:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2497,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "12446:9:20",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "12440:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2495,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "12433:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 2494,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "12433:6:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12433:23:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "expression": {
                          "id": 2499,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2475,
                          "src": "12458:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 2500,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "12466:7:20",
                        "memberName": "endTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3413,
                        "src": "12458:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 2493,
                      "name": "min",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1974,
                      "src": "12429:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint64_$_t_uint64_$returns$_t_uint64_$",
                        "typeString": "function (uint64,uint64) pure returns (uint64)"
                      }
                    },
                    "id": 2501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12429:45:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12412:62:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    },
                    "id": 2506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2503,
                        "name": "hld",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2478,
                        "src": "12489:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 2504,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "12493:9:20",
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3380,
                      "src": "12489:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 2505,
                      "name": "endTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2492,
                      "src": "12505:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "12489:23:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2510,
                  "nodeType": "IfStatement",
                  "src": "12485:62:20",
                  "trueBody": {
                    "id": 2509,
                    "nodeType": "Block",
                    "src": "12514:33:20",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 2507,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12535:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 2482,
                        "id": 2508,
                        "nodeType": "Return",
                        "src": "12528:8:20"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    2512
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2512,
                      "mutability": "mutable",
                      "name": "_accumRewards",
                      "nameLocation": "12565:13:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2564,
                      "src": "12557:21:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2511,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12557:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2515,
                  "initialValue": {
                    "expression": {
                      "id": 2513,
                      "name": "hld",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2478,
                      "src": "12581:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                        "typeString": "struct HoldingInfo memory"
                      }
                    },
                    "id": 2514,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "12585:12:20",
                    "memberName": "accumRewards",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 3382,
                    "src": "12581:16:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12557:40:20"
                },
                {
                  "expression": {
                    "id": 2529,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 2516,
                      "name": "_accumRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2512,
                      "src": "12608:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2522,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2518,
                              "name": "hld",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2478,
                              "src": "12655:3:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                                "typeString": "struct HoldingInfo memory"
                              }
                            },
                            "id": 2519,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "12659:3:20",
                            "memberName": "qty",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3378,
                            "src": "12655:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "expression": {
                              "id": 2520,
                              "name": "project",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2475,
                              "src": "12665:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                "typeString": "struct ProjectInfo memory"
                              }
                            },
                            "id": 2521,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "12673:5:20",
                            "memberName": "price",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3397,
                            "src": "12665:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12655:23:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 2523,
                            "name": "hld",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2478,
                            "src": "12692:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                              "typeString": "struct HoldingInfo memory"
                            }
                          },
                          "id": 2524,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "12696:9:20",
                          "memberName": "startTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3380,
                          "src": "12692:13:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "id": 2525,
                          "name": "endTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2492,
                          "src": "12719:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "expression": {
                            "id": 2526,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2475,
                            "src": "12740:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2527,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "12748:3:20",
                          "memberName": "apy",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3407,
                          "src": "12740:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 2517,
                        "name": "calculateRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1733,
                        "src": "12625:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint64_$_t_uint64_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint64,uint64,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2528,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "12625:136:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12608:153:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2530,
                  "nodeType": "ExpressionStatement",
                  "src": "12608:153:20"
                },
                {
                  "expression": {
                    "id": 2539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2531,
                        "name": "hld",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2478,
                        "src": "12771:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 2533,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "12775:9:20",
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3380,
                      "src": "12771:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 2536,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "12794:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 2537,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "12800:9:20",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "12794:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 2535,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "12787:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint64_$",
                          "typeString": "type(uint64)"
                        },
                        "typeName": {
                          "id": 2534,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "12787:6:20",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 2538,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "12787:23:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "12771:39:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "id": 2540,
                  "nodeType": "ExpressionStatement",
                  "src": "12771:39:20"
                },
                {
                  "expression": {
                    "id": 2545,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2541,
                        "name": "hld",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2478,
                        "src": "12820:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 2543,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "12824:12:20",
                      "memberName": "accumRewards",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3382,
                      "src": "12820:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 2544,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12839:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "12820:20:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2546,
                  "nodeType": "ExpressionStatement",
                  "src": "12820:20:20"
                },
                {
                  "expression": {
                    "id": 2551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2547,
                        "name": "hld",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2478,
                        "src": "12850:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 2549,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "12854:14:20",
                      "memberName": "claimedRewards",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3384,
                      "src": "12850:18:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 2550,
                      "name": "_accumRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2512,
                      "src": "12872:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12850:35:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2552,
                  "nodeType": "ExpressionStatement",
                  "src": "12850:35:20"
                },
                {
                  "expression": {
                    "id": 2560,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 2553,
                          "name": "holdings",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1569,
                          "src": "12896:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                            "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                          }
                        },
                        "id": 2557,
                        "indexExpression": {
                          "id": 2554,
                          "name": "_sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2472,
                          "src": "12905:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "12896:17:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                          "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                        }
                      },
                      "id": 2558,
                      "indexExpression": {
                        "expression": {
                          "id": 2555,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2475,
                          "src": "12914:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 2556,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "12922:2:20",
                        "memberName": "id",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3389,
                        "src": "12914:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "12896:29:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                        "typeString": "struct HoldingInfo storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2559,
                      "name": "hld",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2478,
                      "src": "12928:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                        "typeString": "struct HoldingInfo memory"
                      }
                    },
                    "src": "12896:35:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                      "typeString": "struct HoldingInfo storage ref"
                    }
                  },
                  "id": 2561,
                  "nodeType": "ExpressionStatement",
                  "src": "12896:35:20"
                },
                {
                  "expression": {
                    "id": 2562,
                    "name": "_accumRewards",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2512,
                    "src": "12949:13:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2482,
                  "id": 2563,
                  "nodeType": "Return",
                  "src": "12942:20:20"
                }
              ]
            },
            "documentation": {
              "id": 2470,
              "nodeType": "StructuredDocumentation",
              "src": "11563:618:20",
              "text": " This function calculates the total accumulated rewards for a given user and\n project.\n It takes in an '_sender' address and 'project' object.\n It then checks if the user has any tokens in holdings and calculates the\n rewards accordingly.\n Finally, it updates the holding information and returns the accumulated\n rewards.\n @param _sender The address of the user who's rewards will be calculated.\n @param project Project object containing project info.\n @return {uint256} The total accumulated rewards for the given user and\n project."
            },
            "id": 2565,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_accumHoldingRewards",
            "nameLocation": "12195:20:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2472,
                  "mutability": "mutable",
                  "name": "_sender",
                  "nameLocation": "12233:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2565,
                  "src": "12225:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2471,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12225:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2475,
                  "mutability": "mutable",
                  "name": "project",
                  "nameLocation": "12269:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2565,
                  "src": "12250:26:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                    "typeString": "struct ProjectInfo"
                  },
                  "typeName": {
                    "id": 2474,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2473,
                      "name": "ProjectInfo",
                      "nameLocations": [
                        "12250:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3414,
                      "src": "12250:11:20"
                    },
                    "referencedDeclaration": 3414,
                    "src": "12250:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                      "typeString": "struct ProjectInfo"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2478,
                  "mutability": "mutable",
                  "name": "hld",
                  "nameLocation": "12305:3:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2565,
                  "src": "12286:22:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                    "typeString": "struct HoldingInfo"
                  },
                  "typeName": {
                    "id": 2477,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2476,
                      "name": "HoldingInfo",
                      "nameLocations": [
                        "12286:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3385,
                      "src": "12286:11:20"
                    },
                    "referencedDeclaration": 3385,
                    "src": "12286:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                      "typeString": "struct HoldingInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12215:99:20"
            },
            "returnParameters": {
              "id": 2482,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2481,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2565,
                  "src": "12332:7:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2480,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12332:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12331:9:20"
            },
            "scope": 2996,
            "src": "12186:783:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 2756,
              "nodeType": "Block",
              "src": "13612:1474:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 2591,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2583,
                          "name": "nonce",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2572,
                          "src": "13630:5:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 2590,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 2586,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "13646:5:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 2587,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "13652:9:20",
                                "memberName": "timestamp",
                                "nodeType": "MemberAccess",
                                "src": "13646:15:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 2585,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "13639:6:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint64_$",
                                "typeString": "type(uint64)"
                              },
                              "typeName": {
                                "id": 2584,
                                "name": "uint64",
                                "nodeType": "ElementaryTypeName",
                                "src": "13639:6:20",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2588,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13639:23:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "3630",
                            "id": 2589,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "13665:2:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_60_by_1",
                              "typeString": "int_const 60"
                            },
                            "value": "60"
                          },
                          "src": "13639:28:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "13630:37:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "78206e6f6e6365",
                        "id": 2592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13669:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c97ead9fd3401dd9535e16d8c84307fdf467a74442c9895491dd20097aefcdd0",
                          "typeString": "literal_string \"x nonce\""
                        },
                        "value": "x nonce"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c97ead9fd3401dd9535e16d8c84307fdf467a74442c9895491dd20097aefcdd0",
                          "typeString": "literal_string \"x nonce\""
                        }
                      ],
                      "id": 2582,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "13622:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2593,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13622:57:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2594,
                  "nodeType": "ExpressionStatement",
                  "src": "13622:57:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "id": 2600,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 2596,
                            "name": "usedNonce_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1562,
                            "src": "13697:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint64_$_t_uint8_$",
                              "typeString": "mapping(uint64 => uint8)"
                            }
                          },
                          "id": 2598,
                          "indexExpression": {
                            "id": 2597,
                            "name": "nonce",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2572,
                            "src": "13708:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "13697:17:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2599,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "13718:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "13697:22:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "78206e6f6e6365",
                        "id": 2601,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13721:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c97ead9fd3401dd9535e16d8c84307fdf467a74442c9895491dd20097aefcdd0",
                          "typeString": "literal_string \"x nonce\""
                        },
                        "value": "x nonce"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c97ead9fd3401dd9535e16d8c84307fdf467a74442c9895491dd20097aefcdd0",
                          "typeString": "literal_string \"x nonce\""
                        }
                      ],
                      "id": 2595,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "13689:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2602,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13689:42:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2603,
                  "nodeType": "ExpressionStatement",
                  "src": "13689:42:20"
                },
                {
                  "assignments": [
                    2606
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2606,
                      "mutability": "mutable",
                      "name": "project",
                      "nameLocation": "13761:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2756,
                      "src": "13742:26:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                        "typeString": "struct ProjectInfo"
                      },
                      "typeName": {
                        "id": 2605,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2604,
                          "name": "ProjectInfo",
                          "nameLocations": [
                            "13742:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3414,
                          "src": "13742:11:20"
                        },
                        "referencedDeclaration": 3414,
                        "src": "13742:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                          "typeString": "struct ProjectInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2610,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 2608,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2568,
                        "src": "13783:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 2607,
                      "name": "_getProject",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1674,
                      "src": "13771:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint32_$returns$_t_struct$_ProjectInfo_$3414_memory_ptr_$",
                        "typeString": "function (uint32) view returns (struct ProjectInfo memory)"
                      }
                    },
                    "id": 2609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13771:22:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                      "typeString": "struct ProjectInfo memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13742:51:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "id": 2615,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2612,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2606,
                            "src": "13812:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2613,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "13820:2:20",
                          "memberName": "id",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3389,
                          "src": "13812:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2614,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "13826:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "13812:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "2170726f6a656374",
                        "id": 2616,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13829:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1df63df2376f83119180fcc1f27ba1a87e17829026a3a46d566ac1a060d833f7",
                          "typeString": "literal_string \"!project\""
                        },
                        "value": "!project"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1df63df2376f83119180fcc1f27ba1a87e17829026a3a46d566ac1a060d833f7",
                          "typeString": "literal_string \"!project\""
                        }
                      ],
                      "id": 2611,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "13804:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13804:36:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2618,
                  "nodeType": "ExpressionStatement",
                  "src": "13804:36:20"
                },
                {
                  "assignments": [
                    2620
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2620,
                      "mutability": "mutable",
                      "name": "_sender",
                      "nameLocation": "13859:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2756,
                      "src": "13851:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2619,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13851:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2623,
                  "initialValue": {
                    "expression": {
                      "id": 2621,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "13869:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 2622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "13873:6:20",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "13869:10:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13851:28:20"
                },
                {
                  "assignments": [
                    2626
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2626,
                      "mutability": "mutable",
                      "name": "stk",
                      "nameLocation": "13907:3:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2756,
                      "src": "13890:20:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo"
                      },
                      "typeName": {
                        "id": 2625,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2624,
                          "name": "StakeInfo",
                          "nameLocations": [
                            "13890:9:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3427,
                          "src": "13890:9:20"
                        },
                        "referencedDeclaration": 3427,
                        "src": "13890:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                          "typeString": "struct StakeInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2632,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 2627,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1558,
                        "src": "13913:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                        }
                      },
                      "id": 2629,
                      "indexExpression": {
                        "id": 2628,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2620,
                        "src": "13921:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "13913:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                        "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                      }
                    },
                    "id": 2631,
                    "indexExpression": {
                      "id": 2630,
                      "name": "projectId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2568,
                      "src": "13930:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "13913:27:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13890:50:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "id": 2637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2634,
                            "name": "stk",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2626,
                            "src": "13959:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                              "typeString": "struct StakeInfo memory"
                            }
                          },
                          "id": 2635,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "13963:3:20",
                          "memberName": "qty",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3418,
                          "src": "13959:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2636,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "13970:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "13959:12:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "217374616b65722e717479",
                        "id": 2638,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13973:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cb8a88954054959c951c9539fac11c6b41311fa288378adc94ee8a89cee8b8b9",
                          "typeString": "literal_string \"!staker.qty\""
                        },
                        "value": "!staker.qty"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cb8a88954054959c951c9539fac11c6b41311fa288378adc94ee8a89cee8b8b9",
                          "typeString": "literal_string \"!staker.qty\""
                        }
                      ],
                      "id": 2633,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "13951:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2639,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13951:36:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2640,
                  "nodeType": "ExpressionStatement",
                  "src": "13951:36:20"
                },
                {
                  "assignments": [
                    2642
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2642,
                      "mutability": "mutable",
                      "name": "message",
                      "nameLocation": "14033:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2756,
                      "src": "14025:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 2641,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "14025:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2654,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 2647,
                                "name": "projectId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2568,
                                "src": "14095:9:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                }
                              },
                              {
                                "id": 2648,
                                "name": "_sender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2620,
                                "src": "14106:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 2649,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2570,
                                "src": "14115:6:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 2650,
                                "name": "nonce",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2572,
                                "src": "14123:5:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint32",
                                  "typeString": "uint32"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint64",
                                  "typeString": "uint64"
                                }
                              ],
                              "expression": {
                                "id": 2645,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "14078:3:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 2646,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "14082:12:20",
                              "memberName": "encodePacked",
                              "nodeType": "MemberAccess",
                              "src": "14078:16:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 2651,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14078:51:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 2644,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "14068:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 2652,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14068:62:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 2643,
                      "name": "sigPrefixed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3339
                      ],
                      "referencedDeclaration": 3339,
                      "src": "14043:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) pure returns (bytes32)"
                      }
                    },
                    "id": 2653,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14043:97:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14025:115:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2657,
                            "name": "admin",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3239,
                            "src": "14169:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 2658,
                            "name": "message",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2642,
                            "src": "14176:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 2659,
                            "name": "sig",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2575,
                            "src": "14185:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Sig_$3300_memory_ptr",
                              "typeString": "struct Sig memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_struct$_Sig_$3300_memory_ptr",
                              "typeString": "struct Sig memory"
                            }
                          ],
                          "id": 2656,
                          "name": "_isSigner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            3365
                          ],
                          "referencedDeclaration": 3365,
                          "src": "14159:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes32_$_t_struct$_Sig_$3300_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (address,bytes32,struct Sig memory) pure returns (bool)"
                          }
                        },
                        "id": 2660,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14159:30:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "78207369676e6174757265",
                        "id": 2661,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14191:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c843c677eecfc44cd819c7fcbf445b15eb82d349af4a733aa0a0af264becde5c",
                          "typeString": "literal_string \"x signature\""
                        },
                        "value": "x signature"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c843c677eecfc44cd819c7fcbf445b15eb82d349af4a733aa0a0af264becde5c",
                          "typeString": "literal_string \"x signature\""
                        }
                      ],
                      "id": 2655,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "14151:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2662,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14151:54:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2663,
                  "nodeType": "ExpressionStatement",
                  "src": "14151:54:20"
                },
                {
                  "expression": {
                    "id": 2668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 2664,
                        "name": "usedNonce_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1562,
                        "src": "14216:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint64_$_t_uint8_$",
                          "typeString": "mapping(uint64 => uint8)"
                        }
                      },
                      "id": 2666,
                      "indexExpression": {
                        "id": 2665,
                        "name": "nonce",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2572,
                        "src": "14227:5:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "14216:17:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 2667,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "14236:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "14216:21:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 2669,
                  "nodeType": "ExpressionStatement",
                  "src": "14216:21:20"
                },
                {
                  "assignments": [
                    2671
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2671,
                      "mutability": "mutable",
                      "name": "_accumRewards",
                      "nameLocation": "14256:13:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2756,
                      "src": "14248:21:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2670,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14248:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2674,
                  "initialValue": {
                    "expression": {
                      "id": 2672,
                      "name": "stk",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2626,
                      "src": "14272:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo memory"
                      }
                    },
                    "id": 2673,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "14276:12:20",
                    "memberName": "accumRewards",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 3424,
                    "src": "14272:16:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14248:40:20"
                },
                {
                  "assignments": [
                    2676
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2676,
                      "mutability": "mutable",
                      "name": "endTime",
                      "nameLocation": "14306:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2756,
                      "src": "14299:14:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 2675,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "14299:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2686,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 2680,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "14327:5:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2681,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "14333:9:20",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "14327:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2679,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "14320:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 2678,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "14320:6:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2682,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14320:23:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "expression": {
                          "id": 2683,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2606,
                          "src": "14345:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 2684,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "14353:7:20",
                        "memberName": "endTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3413,
                        "src": "14345:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 2677,
                      "name": "min",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1974,
                      "src": "14316:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint64_$_t_uint64_$returns$_t_uint64_$",
                        "typeString": "function (uint64,uint64) pure returns (uint64)"
                      }
                    },
                    "id": 2685,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14316:45:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14299:62:20"
                },
                {
                  "expression": {
                    "id": 2700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 2687,
                      "name": "_accumRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2671,
                      "src": "14457:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2693,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2689,
                              "name": "stk",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2626,
                              "src": "14504:3:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                                "typeString": "struct StakeInfo memory"
                              }
                            },
                            "id": 2690,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "14508:3:20",
                            "memberName": "qty",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3418,
                            "src": "14504:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint32",
                              "typeString": "uint32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "expression": {
                              "id": 2691,
                              "name": "project",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2606,
                              "src": "14514:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                "typeString": "struct ProjectInfo memory"
                              }
                            },
                            "id": 2692,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "14522:5:20",
                            "memberName": "price",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3397,
                            "src": "14514:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "14504:23:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 2694,
                            "name": "stk",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2626,
                            "src": "14541:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                              "typeString": "struct StakeInfo memory"
                            }
                          },
                          "id": 2695,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "14545:9:20",
                          "memberName": "startTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3422,
                          "src": "14541:13:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "id": 2696,
                          "name": "endTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2676,
                          "src": "14568:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "expression": {
                            "id": 2697,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2606,
                            "src": "14589:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2698,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "14597:9:20",
                          "memberName": "stakedApy",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3409,
                          "src": "14589:17:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 2688,
                        "name": "calculateRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1733,
                        "src": "14474:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint64_$_t_uint64_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint64,uint64,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "14474:142:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14457:159:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2701,
                  "nodeType": "ExpressionStatement",
                  "src": "14457:159:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2703,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2570,
                          "src": "14691:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "id": 2704,
                          "name": "_accumRewards",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2671,
                          "src": "14701:13:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "14691:23:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7820616d6f756e74",
                        "id": 2706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14716:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_461d20c81dc8f3e112ca943ef5178a1870cdaa48cc30cf520861e44fad50a609",
                          "typeString": "literal_string \"x amount\""
                        },
                        "value": "x amount"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_461d20c81dc8f3e112ca943ef5178a1870cdaa48cc30cf520861e44fad50a609",
                          "typeString": "literal_string \"x amount\""
                        }
                      ],
                      "id": 2702,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "14683:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14683:44:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2708,
                  "nodeType": "ExpressionStatement",
                  "src": "14683:44:20"
                },
                {
                  "expression": {
                    "id": 2717,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2709,
                        "name": "stk",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2626,
                        "src": "14738:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 2711,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "14742:9:20",
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3422,
                      "src": "14738:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 2714,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "14761:5:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 2715,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "14767:9:20",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "14761:15:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 2713,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "14754:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint64_$",
                          "typeString": "type(uint64)"
                        },
                        "typeName": {
                          "id": 2712,
                          "name": "uint64",
                          "nodeType": "ElementaryTypeName",
                          "src": "14754:6:20",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 2716,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "14754:23:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "14738:39:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "id": 2718,
                  "nodeType": "ExpressionStatement",
                  "src": "14738:39:20"
                },
                {
                  "expression": {
                    "id": 2725,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2719,
                        "name": "stk",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2626,
                        "src": "14787:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 2721,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "14791:12:20",
                      "memberName": "accumRewards",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3424,
                      "src": "14787:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 2724,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 2722,
                        "name": "_accumRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2671,
                        "src": "14806:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 2723,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2570,
                        "src": "14822:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "14806:22:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14787:41:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2726,
                  "nodeType": "ExpressionStatement",
                  "src": "14787:41:20"
                },
                {
                  "expression": {
                    "id": 2731,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2727,
                        "name": "stk",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2626,
                        "src": "14838:3:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                          "typeString": "struct StakeInfo memory"
                        }
                      },
                      "id": 2729,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "14842:14:20",
                      "memberName": "claimedRewards",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3426,
                      "src": "14838:18:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 2730,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2570,
                      "src": "14860:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14838:28:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2732,
                  "nodeType": "ExpressionStatement",
                  "src": "14838:28:20"
                },
                {
                  "expression": {
                    "id": 2739,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 2733,
                          "name": "stakers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1558,
                          "src": "14877:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                            "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                          }
                        },
                        "id": 2736,
                        "indexExpression": {
                          "id": 2734,
                          "name": "_sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2620,
                          "src": "14885:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "14877:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                          "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                        }
                      },
                      "id": 2737,
                      "indexExpression": {
                        "id": 2735,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2568,
                        "src": "14894:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "14877:27:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                        "typeString": "struct StakeInfo storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2738,
                      "name": "stk",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2626,
                      "src": "14907:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo memory"
                      }
                    },
                    "src": "14877:33:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "id": 2740,
                  "nodeType": "ExpressionStatement",
                  "src": "14877:33:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2744,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2620,
                        "src": "14983:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2745,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2570,
                        "src": "14992:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 2741,
                        "name": "stableCoin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1522,
                        "src": "14959:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ICoin_$3374",
                          "typeString": "contract ICoin"
                        }
                      },
                      "id": 2743,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "14970:12:20",
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3027,
                      "src": "14959:23:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$4908_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4908_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 2746,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14959:40:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2747,
                  "nodeType": "ExpressionStatement",
                  "src": "14959:40:20"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 2749,
                        "name": "_sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2620,
                        "src": "15030:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2750,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2568,
                        "src": "15039:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      {
                        "id": 2751,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2570,
                        "src": "15050:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2748,
                      "name": "CollectRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1539,
                      "src": "15015:14:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint32,uint256)"
                      }
                    },
                    "id": 2752,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "15015:42:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2753,
                  "nodeType": "EmitStatement",
                  "src": "15010:47:20"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 2754,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15075:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 2581,
                  "id": 2755,
                  "nodeType": "Return",
                  "src": "15068:11:20"
                }
              ]
            },
            "documentation": {
              "id": 2566,
              "nodeType": "StructuredDocumentation",
              "src": "12975:467:20",
              "text": " @dev Function to collect specific amount of rewards from project manually,\n      rewards is calculated off-chain and need authorization signature to proceed.\n      This procedure can work in paused state (for emergency purpose).\n @param projectId the ID of project.\n @param amount the amount of rewards to collect.\n @param nonce the nonce of the signature.\n @param sig the signature to authorize the transaction."
            },
            "functionSelector": "13f91252",
            "id": 2757,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 2578,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 2577,
                  "name": "nonReentrant",
                  "nameLocations": [
                    "13584:12:20"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3570,
                  "src": "13584:12:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "13584:12:20"
              }
            ],
            "name": "collectRewardsBy",
            "nameLocation": "13456:16:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2576,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2568,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "13489:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2757,
                  "src": "13482:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2567,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "13482:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2570,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "13516:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2757,
                  "src": "13508:14:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2569,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13508:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2572,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "13539:5:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2757,
                  "src": "13532:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 2571,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "13532:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2575,
                  "mutability": "mutable",
                  "name": "sig",
                  "nameLocation": "13565:3:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2757,
                  "src": "13554:14:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Sig_$3300_memory_ptr",
                    "typeString": "struct Sig"
                  },
                  "typeName": {
                    "id": 2574,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2573,
                      "name": "Sig",
                      "nameLocations": [
                        "13554:3:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3300,
                      "src": "13554:3:20"
                    },
                    "referencedDeclaration": 3300,
                    "src": "13554:3:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Sig_$3300_storage_ptr",
                      "typeString": "struct Sig"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13472:102:20"
            },
            "returnParameters": {
              "id": 2581,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2580,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2757,
                  "src": "13606:4:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2579,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "13606:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13605:6:20"
            },
            "scope": 2996,
            "src": "13447:1639:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2772,
              "nodeType": "Block",
              "src": "15209:52:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        "id": 2768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2765,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2761,
                            "src": "15227:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2766,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "15235:2:20",
                          "memberName": "id",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3389,
                          "src": "15227:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2767,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "15240:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "15227:14:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "2170726f6a656374",
                        "id": 2769,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "15243:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1df63df2376f83119180fcc1f27ba1a87e17829026a3a46d566ac1a060d833f7",
                          "typeString": "literal_string \"!project\""
                        },
                        "value": "!project"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1df63df2376f83119180fcc1f27ba1a87e17829026a3a46d566ac1a060d833f7",
                          "typeString": "literal_string \"!project\""
                        }
                      ],
                      "id": 2764,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "15219:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2770,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "15219:35:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2771,
                  "nodeType": "ExpressionStatement",
                  "src": "15219:35:20"
                }
              ]
            },
            "documentation": {
              "id": 2758,
              "nodeType": "StructuredDocumentation",
              "src": "15092:47:20",
              "text": " @dev check is project exists"
            },
            "id": 2773,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkProject",
            "nameLocation": "15153:13:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2762,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2761,
                  "mutability": "mutable",
                  "name": "project",
                  "nameLocation": "15186:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2773,
                  "src": "15167:26:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                    "typeString": "struct ProjectInfo"
                  },
                  "typeName": {
                    "id": 2760,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2759,
                      "name": "ProjectInfo",
                      "nameLocations": [
                        "15167:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3414,
                      "src": "15167:11:20"
                    },
                    "referencedDeclaration": 3414,
                    "src": "15167:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                      "typeString": "struct ProjectInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15166:28:20"
            },
            "returnParameters": {
              "id": 2763,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15209:0:20"
            },
            "scope": 2996,
            "src": "15144:117:20",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2839,
              "nodeType": "Block",
              "src": "15459:496:20",
              "statements": [
                {
                  "assignments": [
                    2786
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2786,
                      "mutability": "mutable",
                      "name": "_holding",
                      "nameLocation": "15488:8:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2839,
                      "src": "15469:27:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                        "typeString": "struct HoldingInfo"
                      },
                      "typeName": {
                        "id": 2785,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2784,
                          "name": "HoldingInfo",
                          "nameLocations": [
                            "15469:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3385,
                          "src": "15469:11:20"
                        },
                        "referencedDeclaration": 3385,
                        "src": "15469:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                          "typeString": "struct HoldingInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2792,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 2787,
                        "name": "holdings",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1569,
                        "src": "15499:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                        }
                      },
                      "id": 2789,
                      "indexExpression": {
                        "id": 2788,
                        "name": "user",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2776,
                        "src": "15508:4:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "15499:14:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                        "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                      }
                    },
                    "id": 2791,
                    "indexExpression": {
                      "id": 2790,
                      "name": "projectId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2778,
                      "src": "15514:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "15499:25:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                      "typeString": "struct HoldingInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15469:55:20"
                },
                {
                  "assignments": [
                    2795
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2795,
                      "mutability": "mutable",
                      "name": "project",
                      "nameLocation": "15553:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2839,
                      "src": "15534:26:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                        "typeString": "struct ProjectInfo"
                      },
                      "typeName": {
                        "id": 2794,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2793,
                          "name": "ProjectInfo",
                          "nameLocations": [
                            "15534:11:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3414,
                          "src": "15534:11:20"
                        },
                        "referencedDeclaration": 3414,
                        "src": "15534:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProjectInfo_$3414_storage_ptr",
                          "typeString": "struct ProjectInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2799,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 2797,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2778,
                        "src": "15575:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 2796,
                      "name": "_getProject",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1674,
                      "src": "15563:11:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint32_$returns$_t_struct$_ProjectInfo_$3414_memory_ptr_$",
                        "typeString": "function (uint32) view returns (struct ProjectInfo memory)"
                      }
                    },
                    "id": 2798,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "15563:22:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                      "typeString": "struct ProjectInfo memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15534:51:20"
                },
                {
                  "assignments": [
                    2801
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2801,
                      "mutability": "mutable",
                      "name": "endTime",
                      "nameLocation": "15602:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2839,
                      "src": "15595:14:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 2800,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "15595:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2811,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 2805,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "15623:5:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2806,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "15629:9:20",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "15623:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2804,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "15616:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 2803,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "15616:6:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2807,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15616:23:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "expression": {
                          "id": 2808,
                          "name": "project",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2795,
                          "src": "15641:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                            "typeString": "struct ProjectInfo memory"
                          }
                        },
                        "id": 2809,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "15649:7:20",
                        "memberName": "endTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3413,
                        "src": "15641:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 2802,
                      "name": "min",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1974,
                      "src": "15612:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint64_$_t_uint64_$returns$_t_uint64_$",
                        "typeString": "function (uint64,uint64) pure returns (uint64)"
                      }
                    },
                    "id": 2810,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "15612:45:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15595:62:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    },
                    "id": 2815,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2812,
                        "name": "_holding",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2786,
                        "src": "15672:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 2813,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "15681:9:20",
                      "memberName": "startTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3380,
                      "src": "15672:18:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 2814,
                      "name": "endTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2801,
                      "src": "15693:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "15672:28:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2819,
                  "nodeType": "IfStatement",
                  "src": "15668:74:20",
                  "trueBody": {
                    "id": 2818,
                    "nodeType": "Block",
                    "src": "15702:40:20",
                    "statements": [
                      {
                        "expression": {
                          "id": 2816,
                          "name": "_holding",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2786,
                          "src": "15723:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                            "typeString": "struct HoldingInfo memory"
                          }
                        },
                        "functionReturnParameters": 2783,
                        "id": 2817,
                        "nodeType": "Return",
                        "src": "15716:15:20"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 2835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2820,
                        "name": "_holding",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2786,
                        "src": "15752:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                          "typeString": "struct HoldingInfo memory"
                        }
                      },
                      "id": 2822,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "15761:12:20",
                      "memberName": "accumRewards",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3382,
                      "src": "15752:21:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2828,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2824,
                              "name": "_holding",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2786,
                              "src": "15807:8:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                                "typeString": "struct HoldingInfo memory"
                              }
                            },
                            "id": 2825,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "15816:3:20",
                            "memberName": "qty",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3378,
                            "src": "15807:12:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "expression": {
                              "id": 2826,
                              "name": "project",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2795,
                              "src": "15822:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                                "typeString": "struct ProjectInfo memory"
                              }
                            },
                            "id": 2827,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "15830:5:20",
                            "memberName": "price",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3397,
                            "src": "15822:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "15807:28:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "id": 2829,
                            "name": "_holding",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2786,
                            "src": "15849:8:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                              "typeString": "struct HoldingInfo memory"
                            }
                          },
                          "id": 2830,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "15858:9:20",
                          "memberName": "startTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3380,
                          "src": "15849:18:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "id": 2831,
                          "name": "endTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2801,
                          "src": "15881:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "expression": {
                            "id": 2832,
                            "name": "project",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2795,
                            "src": "15902:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ProjectInfo_$3414_memory_ptr",
                              "typeString": "struct ProjectInfo memory"
                            }
                          },
                          "id": 2833,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "15910:3:20",
                          "memberName": "apy",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3407,
                          "src": "15902:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 2823,
                        "name": "calculateRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1733,
                        "src": "15777:16:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint64_$_t_uint64_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint64,uint64,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2834,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "15777:146:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "15752:171:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2836,
                  "nodeType": "ExpressionStatement",
                  "src": "15752:171:20"
                },
                {
                  "expression": {
                    "id": 2837,
                    "name": "_holding",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2786,
                    "src": "15940:8:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                      "typeString": "struct HoldingInfo memory"
                    }
                  },
                  "functionReturnParameters": 2783,
                  "id": 2838,
                  "nodeType": "Return",
                  "src": "15933:15:20"
                }
              ]
            },
            "documentation": {
              "id": 2774,
              "nodeType": "StructuredDocumentation",
              "src": "15267:66:20",
              "text": " @dev get holding information on project of user"
            },
            "functionSelector": "aeaed1b7",
            "id": 2840,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getHoldingInfo",
            "nameLocation": "15347:14:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2779,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2776,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "15379:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2840,
                  "src": "15371:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2775,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15371:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2778,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "15400:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2840,
                  "src": "15393:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2777,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "15393:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15361:54:20"
            },
            "returnParameters": {
              "id": 2783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2782,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2840,
                  "src": "15439:18:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                    "typeString": "struct HoldingInfo"
                  },
                  "typeName": {
                    "id": 2781,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2780,
                      "name": "HoldingInfo",
                      "nameLocations": [
                        "15439:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3385,
                      "src": "15439:11:20"
                    },
                    "referencedDeclaration": 3385,
                    "src": "15439:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                      "typeString": "struct HoldingInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15438:20:20"
            },
            "scope": 2996,
            "src": "15338:617:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2856,
              "nodeType": "Block",
              "src": "16085:49:20",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 2850,
                        "name": "holdings",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1569,
                        "src": "16102:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                        }
                      },
                      "id": 2852,
                      "indexExpression": {
                        "id": 2851,
                        "name": "user",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2842,
                        "src": "16111:4:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "16102:14:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                        "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                      }
                    },
                    "id": 2854,
                    "indexExpression": {
                      "id": 2853,
                      "name": "projectId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2844,
                      "src": "16117:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "16102:25:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                      "typeString": "struct HoldingInfo storage ref"
                    }
                  },
                  "functionReturnParameters": 2849,
                  "id": 2855,
                  "nodeType": "Return",
                  "src": "16095:32:20"
                }
              ]
            },
            "functionSelector": "947e89c8",
            "id": 2857,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getHoldingInfoRaw",
            "nameLocation": "15970:17:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2845,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2842,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "16005:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2857,
                  "src": "15997:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2841,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15997:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2844,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "16026:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2857,
                  "src": "16019:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2843,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "16019:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15987:54:20"
            },
            "returnParameters": {
              "id": 2849,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2848,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2857,
                  "src": "16065:18:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                    "typeString": "struct HoldingInfo"
                  },
                  "typeName": {
                    "id": 2847,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2846,
                      "name": "HoldingInfo",
                      "nameLocations": [
                        "16065:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3385,
                      "src": "16065:11:20"
                    },
                    "referencedDeclaration": 3385,
                    "src": "16065:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                      "typeString": "struct HoldingInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16064:20:20"
            },
            "scope": 2996,
            "src": "15961:173:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2877,
              "nodeType": "Block",
              "src": "16282:52:20",
              "statements": [
                {
                  "expression": {
                    "id": 2875,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 2869,
                          "name": "holdings",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1569,
                          "src": "16292:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$_$",
                            "typeString": "mapping(address => mapping(uint32 => struct HoldingInfo storage ref))"
                          }
                        },
                        "id": 2872,
                        "indexExpression": {
                          "id": 2870,
                          "name": "user",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2859,
                          "src": "16301:4:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "16292:14:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_HoldingInfo_$3385_storage_$",
                          "typeString": "mapping(uint32 => struct HoldingInfo storage ref)"
                        }
                      },
                      "id": 2873,
                      "indexExpression": {
                        "id": 2871,
                        "name": "projectId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2861,
                        "src": "16307:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "16292:25:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                        "typeString": "struct HoldingInfo storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2874,
                      "name": "holding",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2864,
                      "src": "16320:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                        "typeString": "struct HoldingInfo memory"
                      }
                    },
                    "src": "16292:35:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage",
                      "typeString": "struct HoldingInfo storage ref"
                    }
                  },
                  "id": 2876,
                  "nodeType": "ExpressionStatement",
                  "src": "16292:35:20"
                }
              ]
            },
            "functionSelector": "ccfcd622",
            "id": 2878,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 2867,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 2866,
                  "name": "onlyProjectMan",
                  "nameLocations": [
                    "16267:14:20"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1616,
                  "src": "16267:14:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "16267:14:20"
              }
            ],
            "name": "setHoldingInfoData",
            "nameLocation": "16149:18:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2865,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2859,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "16185:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2878,
                  "src": "16177:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2858,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16177:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2861,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "16206:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2878,
                  "src": "16199:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2860,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "16199:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2864,
                  "mutability": "mutable",
                  "name": "holding",
                  "nameLocation": "16244:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2878,
                  "src": "16225:26:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_HoldingInfo_$3385_memory_ptr",
                    "typeString": "struct HoldingInfo"
                  },
                  "typeName": {
                    "id": 2863,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2862,
                      "name": "HoldingInfo",
                      "nameLocations": [
                        "16225:11:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3385,
                      "src": "16225:11:20"
                    },
                    "referencedDeclaration": 3385,
                    "src": "16225:11:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_HoldingInfo_$3385_storage_ptr",
                      "typeString": "struct HoldingInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16167:90:20"
            },
            "returnParameters": {
              "id": 2868,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16282:0:20"
            },
            "scope": 2996,
            "src": "16140:194:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2899,
              "nodeType": "Block",
              "src": "16460:90:20",
              "statements": [
                {
                  "assignments": [
                    2890
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2890,
                      "mutability": "mutable",
                      "name": "staker",
                      "nameLocation": "16487:6:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 2899,
                      "src": "16470:23:20",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                        "typeString": "struct StakeInfo"
                      },
                      "typeName": {
                        "id": 2889,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 2888,
                          "name": "StakeInfo",
                          "nameLocations": [
                            "16470:9:20"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3427,
                          "src": "16470:9:20"
                        },
                        "referencedDeclaration": 3427,
                        "src": "16470:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                          "typeString": "struct StakeInfo"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2896,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 2891,
                        "name": "stakers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1558,
                        "src": "16496:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$_$",
                          "typeString": "mapping(address => mapping(uint32 => struct StakeInfo storage ref))"
                        }
                      },
                      "id": 2893,
                      "indexExpression": {
                        "id": 2892,
                        "name": "user",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2880,
                        "src": "16504:4:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "16496:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint32_$_t_struct$_StakeInfo_$3427_storage_$",
                        "typeString": "mapping(uint32 => struct StakeInfo storage ref)"
                      }
                    },
                    "id": 2895,
                    "indexExpression": {
                      "id": 2894,
                      "name": "projectId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2882,
                      "src": "16510:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "16496:24:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage",
                      "typeString": "struct StakeInfo storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16470:50:20"
                },
                {
                  "expression": {
                    "id": 2897,
                    "name": "staker",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2890,
                    "src": "16537:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                      "typeString": "struct StakeInfo memory"
                    }
                  },
                  "functionReturnParameters": 2887,
                  "id": 2898,
                  "nodeType": "Return",
                  "src": "16530:13:20"
                }
              ]
            },
            "functionSelector": "ddb93b1a",
            "id": 2900,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getStakingInfoRaw",
            "nameLocation": "16349:17:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2883,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2880,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "16384:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2900,
                  "src": "16376:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2879,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16376:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2882,
                  "mutability": "mutable",
                  "name": "projectId",
                  "nameLocation": "16405:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2900,
                  "src": "16398:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 2881,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "16398:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16366:54:20"
            },
            "returnParameters": {
              "id": 2887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2886,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2900,
                  "src": "16442:16:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_StakeInfo_$3427_memory_ptr",
                    "typeString": "struct StakeInfo"
                  },
                  "typeName": {
                    "id": 2885,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 2884,
                      "name": "StakeInfo",
                      "nameLocations": [
                        "16442:9:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3427,
                      "src": "16442:9:20"
                    },
                    "referencedDeclaration": 3427,
                    "src": "16442:9:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeInfo_$3427_storage_ptr",
                      "typeString": "struct StakeInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16441:18:20"
            },
            "scope": 2996,
            "src": "16340:210:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2915,
              "nodeType": "Block",
              "src": "16606:54:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 2911,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2906,
                          "name": "addr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2902,
                          "src": "16624:4:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 2909,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16640:1:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 2908,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "16632:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 2907,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "16632:7:20",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16632:10:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "16624:18:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "782061646472",
                        "id": 2912,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "16644:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7756967b3d494e470fc93aa46404ba2040a76d5122bdfecbd650f380cf3094be",
                          "typeString": "literal_string \"x addr\""
                        },
                        "value": "x addr"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7756967b3d494e470fc93aa46404ba2040a76d5122bdfecbd650f380cf3094be",
                          "typeString": "literal_string \"x addr\""
                        }
                      ],
                      "id": 2905,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "16616:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2913,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16616:37:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2914,
                  "nodeType": "ExpressionStatement",
                  "src": "16616:37:20"
                }
              ]
            },
            "id": 2916,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkAddress",
            "nameLocation": "16565:13:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2903,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2902,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "16587:4:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2916,
                  "src": "16579:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2901,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16579:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16578:14:20"
            },
            "returnParameters": {
              "id": 2904,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16606:0:20"
            },
            "scope": 2996,
            "src": "16556:104:20",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 2966,
              "nodeType": "Block",
              "src": "16950:260:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2927,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2921,
                        "src": "16974:2:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2926,
                      "name": "_checkAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2916,
                      "src": "16960:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_address_$returns$__$",
                        "typeString": "function (address) pure"
                      }
                    },
                    "id": 2928,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16960:17:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2929,
                  "nodeType": "ExpressionStatement",
                  "src": "16960:17:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2933,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2931,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2919,
                          "src": "16995:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 2932,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "17004:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "16995:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "21616d6f756e74",
                        "id": 2934,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17007:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d5985f05241e9f930ee82fd8ec3cfd07f1cb81fa920b4a9977053fe3350791e5",
                          "typeString": "literal_string \"!amount\""
                        },
                        "value": "!amount"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d5985f05241e9f930ee82fd8ec3cfd07f1cb81fa920b4a9977053fe3350791e5",
                          "typeString": "literal_string \"!amount\""
                        }
                      ],
                      "id": 2930,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "16987:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2935,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16987:30:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2936,
                  "nodeType": "ExpressionStatement",
                  "src": "16987:30:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2946,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2942,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "17065:4:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Staker_$2996",
                                    "typeString": "contract Staker"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_Staker_$2996",
                                    "typeString": "contract Staker"
                                  }
                                ],
                                "id": 2941,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "17057:7:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 2940,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "17057:7:20",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2943,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17057:13:20",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 2938,
                              "name": "stableCoin",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1522,
                              "src": "17036:10:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ICoin_$3374",
                                "typeString": "contract ICoin"
                              }
                            },
                            "id": 2939,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "17047:9:20",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4847,
                            "src": "17036:20:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 2944,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17036:35:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 2945,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2919,
                          "src": "17075:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "17036:45:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "62616c616e6365203c",
                        "id": 2947,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17083:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_208f24d7a1cd76f7f6c7a386106e976000541dbadc3dcc74ed2c23104ae19c73",
                          "typeString": "literal_string \"balance <\""
                        },
                        "value": "balance <"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_208f24d7a1cd76f7f6c7a386106e976000541dbadc3dcc74ed2c23104ae19c73",
                          "typeString": "literal_string \"balance <\""
                        }
                      ],
                      "id": 2937,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "17028:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2948,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17028:67:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2949,
                  "nodeType": "ExpressionStatement",
                  "src": "17028:67:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2955,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "17142:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Staker_$2996",
                              "typeString": "contract Staker"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_Staker_$2996",
                              "typeString": "contract Staker"
                            }
                          ],
                          "id": 2954,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "17134:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 2953,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "17134:7:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2956,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17134:13:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2957,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2921,
                        "src": "17149:2:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2958,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2919,
                        "src": "17153:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 2950,
                        "name": "stableCoin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1522,
                        "src": "17106:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ICoin_$3374",
                          "typeString": "contract ICoin"
                        }
                      },
                      "id": 2952,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "17117:16:20",
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3053,
                      "src": "17106:27:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$4908_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$4908_$",
                        "typeString": "function (contract IERC20,address,address,uint256)"
                      }
                    },
                    "id": 2959,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17106:54:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2960,
                  "nodeType": "ExpressionStatement",
                  "src": "17106:54:20"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 2962,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2921,
                        "src": "17192:2:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2963,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2919,
                        "src": "17196:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2961,
                      "name": "BalanceWithdraw",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1551,
                      "src": "17176:15:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2964,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17176:27:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2965,
                  "nodeType": "EmitStatement",
                  "src": "17171:32:20"
                }
              ]
            },
            "documentation": {
              "id": 2917,
              "nodeType": "StructuredDocumentation",
              "src": "16666:212:20",
              "text": " @dev Withdraw amount of deposit from this contract to `to` address.\n      Caller of this function must be owner.\n @param amount to withdraw.\n @param to address to withdraw to."
            },
            "functionSelector": "c86283c8",
            "id": 2967,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 2924,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 2923,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "16940:9:20"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3474,
                  "src": "16940:9:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "16940:9:20"
              }
            ],
            "name": "withdrawTo",
            "nameLocation": "16892:10:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2922,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2919,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "16911:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2967,
                  "src": "16903:14:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2918,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16903:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2921,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "16927:2:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2967,
                  "src": "16919:10:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2920,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16919:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16902:28:20"
            },
            "returnParameters": {
              "id": 2925,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16950:0:20"
            },
            "scope": 2996,
            "src": "16883:327:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2994,
              "nodeType": "Block",
              "src": "17506:158:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 2986,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 2978,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 2974,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3460,
                              "src": "17537:5:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 2975,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17537:7:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 2976,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5763,
                              "src": "17548:10:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 2977,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17548:12:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "17537:23:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 2985,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 2981,
                                "name": "projectMan",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1519,
                                "src": "17572:10:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IProjectMan_$4830",
                                  "typeString": "contract IProjectMan"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IProjectMan_$4830",
                                  "typeString": "contract IProjectMan"
                                }
                              ],
                              "id": 2980,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "17564:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 2979,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "17564:7:20",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2982,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17564:19:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 2983,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5763,
                              "src": "17587:10:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 2984,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17587:12:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "17564:35:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "17537:62:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "216f776e6572",
                        "id": 2987,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17613:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f90560991e3f715cdce86f88841433ea2f749a73c924ce7483b146bbc74f1efa",
                          "typeString": "literal_string \"!owner\""
                        },
                        "value": "!owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f90560991e3f715cdce86f88841433ea2f749a73c924ce7483b146bbc74f1efa",
                          "typeString": "literal_string \"!owner\""
                        }
                      ],
                      "id": 2973,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "17516:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2988,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17516:115:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2989,
                  "nodeType": "ExpressionStatement",
                  "src": "17516:115:20"
                },
                {
                  "expression": {
                    "id": 2992,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 2990,
                      "name": "paused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1525,
                      "src": "17641:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2991,
                      "name": "_paused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2970,
                      "src": "17650:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "17641:16:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2993,
                  "nodeType": "ExpressionStatement",
                  "src": "17641:16:20"
                }
              ]
            },
            "documentation": {
              "id": 2968,
              "nodeType": "StructuredDocumentation",
              "src": "17216:247:20",
              "text": " This function is used to pause or unpause contract.\n Only the owner of the contract or the project manager contract can call this function.\n @param _paused A boolean indicating whether should be paused or not."
            },
            "functionSelector": "02329a29",
            "id": 2995,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "pause",
            "nameLocation": "17477:5:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2971,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2970,
                  "mutability": "mutable",
                  "name": "_paused",
                  "nameLocation": "17488:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2995,
                  "src": "17483:12:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2969,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "17483:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17482:14:20"
            },
            "returnParameters": {
              "id": 2972,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17506:0:20"
            },
            "scope": 2996,
            "src": "17468:196:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2997,
        "src": "1777:15889:20",
        "usedErrors": []
      }
    ],
    "src": "0:17667:20"
  },
  "bytecode": "",
  "bytecodeSha1": "da514e531ff7f99e0d117ddfa712f5f490d720d3",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.17+commit.8df45f5f"
  },
  "contractName": "Staker",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable.transferOwnership": {
          "164": [
            1934,
            1956,
            true
          ]
        }
      },
      "1": {},
      "10": {
        "Address.functionCallWithValue": {
          "161": [
            4745,
            4775,
            true
          ]
        },
        "Address.verifyCallResult": {
          "162": [
            7335,
            7342,
            false
          ],
          "163": [
            7476,
            7497,
            false
          ]
        }
      },
      "11": {},
      "14": {},
      "17": {},
      "19": {},
      "20": {
        "Staker._accumHoldingRewards": {
          "158": [
            12355,
            12367,
            false
          ],
          "159": [
            12489,
            12512,
            false
          ]
        },
        "Staker._checkAddress": {
          "160": [
            16624,
            16642,
            true
          ]
        },
        "Staker._checkProject": {
          "157": [
            15227,
            15241,
            true
          ]
        },
        "Staker.collectRewards": {
          "146": [
            9556,
            9563,
            true
          ],
          "147": [
            9605,
            9644,
            true
          ],
          "148": [
            9664,
            9703,
            true
          ],
          "149": [
            9853,
            9877,
            true
          ],
          "150": [
            9907,
            9943,
            true
          ],
          "151": [
            10068,
            10107,
            false
          ],
          "152": [
            10326,
            10365,
            false
          ],
          "153": [
            10389,
            10400,
            true
          ],
          "154": [
            10600,
            10623,
            false
          ],
          "155": [
            11278,
            11297,
            false
          ]
        },
        "Staker.collectRewardsBy": {
          "119": [
            13630,
            13667,
            true
          ],
          "120": [
            13697,
            13719,
            true
          ],
          "121": [
            13812,
            13827,
            true
          ],
          "122": [
            13959,
            13971,
            true
          ],
          "123": [
            14159,
            14189,
            true
          ],
          "124": [
            14691,
            14714,
            true
          ]
        },
        "Staker.getHoldingInfo": {
          "136": [
            15672,
            15700,
            false
          ]
        },
        "Staker.getStakingInfo": {
          "118": [
            6457,
            6487,
            false
          ]
        },
        "Staker.min": {
          "156": [
            6044,
            6050,
            true
          ]
        },
        "Staker.pause": {
          "116": [
            17537,
            17560,
            true
          ],
          "117": [
            17564,
            17599,
            true
          ]
        },
        "Staker.setProjectMan": {
          "134": [
            2966,
            3003,
            true
          ],
          "135": [
            3032,
            3052,
            true
          ]
        },
        "Staker.stake": {
          "125": [
            4207,
            4214,
            true
          ],
          "126": [
            4243,
            4250,
            true
          ],
          "127": [
            4411,
            4435,
            true
          ],
          "128": [
            4465,
            4501,
            true
          ],
          "129": [
            4530,
            4563,
            true
          ],
          "130": [
            4655,
            4721,
            true
          ],
          "131": [
            5064,
            5082,
            false
          ],
          "132": [
            5362,
            5376,
            false
          ],
          "133": [
            5380,
            5406,
            false
          ]
        },
        "Staker.unstake": {
          "139": [
            7205,
            7212,
            true
          ],
          "140": [
            7241,
            7248,
            true
          ],
          "141": [
            7376,
            7400,
            true
          ],
          "142": [
            7500,
            7520,
            true
          ],
          "143": [
            7616,
            7638,
            true
          ],
          "144": [
            7714,
            7734,
            true
          ],
          "145": [
            7832,
            7864,
            false
          ]
        },
        "Staker.withdrawTo": {
          "137": [
            16995,
            17005,
            true
          ],
          "138": [
            17036,
            17081,
            true
          ]
        }
      },
      "25": {},
      "26": {},
      "27": {},
      "28": {},
      "29": {},
      "3": {},
      "7": {},
      "9": {
        "SafeERC20._callOptionalReturn": {
          "165": [
            3668,
            3689,
            false
          ],
          "166": [
            3752,
            3782,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Ownable._setOwner": {
          "103": [
            2131,
            2148
          ],
          "104": [
            2158,
            2203
          ]
        },
        "Ownable.owner": {
          "0": [
            1038,
            1051
          ]
        },
        "Ownable.renounceOwnership": {
          "40": [
            1669,
            1690
          ]
        },
        "Ownable.transferOwnership": {
          "68": [
            1926,
            1999
          ],
          "69": [
            2009,
            2028
          ]
        }
      },
      "1": {},
      "10": {
        "Address.functionCall": {
          "89": [
            3618,
            3677
          ]
        },
        "Address.functionCallWithValue": {
          "111": [
            4737,
            4818
          ],
          "112": [
            4828,
            4888
          ],
          "113": [
            4982,
            5040
          ]
        },
        "Address.verifyCallResult": {
          "114": [
            7358,
            7375
          ],
          "115": [
            7802,
            7822
          ]
        }
      },
      "11": {
        "Context._msgSender": {
          "1": [
            659,
            676
          ]
        }
      },
      "14": {},
      "17": {
        "HasAdmin._setAdmin": {
          "105": [
            726,
            741
          ],
          "106": [
            751,
            775
          ]
        }
      },
      "19": {
        "SigVerifier._isSigner": {
          "92": [
            842,
            899
          ]
        },
        "SigVerifier.sigPrefixed": {
          "11": [
            564,
            682
          ]
        }
      },
      "20": {
        "Staker._accumHoldingRewards": {
          "95": [
            12383,
            12391
          ],
          "96": [
            12528,
            12536
          ],
          "97": [
            12608,
            12761
          ],
          "98": [
            12771,
            12810
          ],
          "99": [
            12820,
            12840
          ],
          "100": [
            12850,
            12885
          ],
          "101": [
            12896,
            12931
          ],
          "102": [
            12942,
            12962
          ]
        },
        "Staker._checkAddress": {
          "108": [
            16616,
            16653
          ]
        },
        "Staker._checkProject": {
          "94": [
            15219,
            15254
          ]
        },
        "Staker._getProject": {
          "90": [
            3303,
            3342
          ]
        },
        "Staker._projectEnd": {
          "107": [
            6866,
            6937
          ]
        },
        "Staker.calculateRewards": {
          "23": [
            4042,
            4077
          ],
          "24": [
            4087,
            4107
          ]
        },
        "Staker.changeAdmin": {
          "41": [
            3424,
            3444
          ]
        },
        "Staker.collectRewards": {
          "70": [
            9548,
            9574
          ],
          "71": [
            9584,
            9734
          ],
          "72": [
            9845,
            9889
          ],
          "73": [
            9899,
            9954
          ],
          "74": [
            10235,
            10301
          ],
          "75": [
            10381,
            10412
          ],
          "76": [
            10643,
            10655
          ],
          "77": [
            10738,
            10916
          ],
          "78": [
            10931,
            10970
          ],
          "79": [
            10984,
            11004
          ],
          "80": [
            11018,
            11053
          ],
          "81": [
            11068,
            11101
          ],
          "82": [
            11116,
            11170
          ],
          "83": [
            11185,
            11217
          ],
          "84": [
            11313,
            11362
          ],
          "85": [
            11376,
            11432
          ],
          "86": [
            11446,
            11457
          ],
          "87": [
            11538,
            11550
          ]
        },
        "Staker.collectRewardsBy": {
          "7": [
            13622,
            13679
          ],
          "8": [
            13689,
            13731
          ],
          "9": [
            13804,
            13840
          ],
          "10": [
            13951,
            13987
          ],
          "12": [
            14151,
            14205
          ],
          "13": [
            14216,
            14237
          ],
          "14": [
            14457,
            14616
          ],
          "15": [
            14683,
            14727
          ],
          "16": [
            14738,
            14777
          ],
          "17": [
            14787,
            14828
          ],
          "18": [
            14838,
            14866
          ],
          "19": [
            14877,
            14910
          ],
          "20": [
            14959,
            14999
          ],
          "21": [
            15010,
            15057
          ],
          "22": [
            15068,
            15079
          ]
        },
        "Staker.getHoldingInfo": {
          "47": [
            15716,
            15731
          ],
          "48": [
            15752,
            15923
          ]
        },
        "Staker.getHoldingInfoRaw": {
          "42": [
            16095,
            16127
          ]
        },
        "Staker.getStakingInfo": {
          "4": [
            6503,
            6520
          ],
          "5": [
            6541,
            6724
          ],
          "6": [
            6734,
            6751
          ]
        },
        "Staker.isProjectEnd": {
          "49": [
            7076,
            7103
          ]
        },
        "Staker.min": {
          "91": [
            6037,
            6058
          ]
        },
        "Staker.pause": {
          "2": [
            17516,
            17631
          ],
          "3": [
            17641,
            17657
          ]
        },
        "Staker.setHoldingInfoData": {
          "55": [
            16292,
            16327
          ]
        },
        "Staker.setProjectMan": {
          "43": [
            2958,
            3014
          ],
          "44": [
            3024,
            3063
          ],
          "45": [
            3073,
            3110
          ],
          "46": [
            3120,
            3184
          ]
        },
        "Staker.stake": {
          "25": [
            4199,
            4225
          ],
          "26": [
            4235,
            4259
          ],
          "27": [
            4371,
            4393
          ],
          "28": [
            4403,
            4447
          ],
          "29": [
            4457,
            4512
          ],
          "30": [
            4522,
            4574
          ],
          "31": [
            4634,
            4756
          ],
          "32": [
            5098,
            5146
          ],
          "33": [
            5160,
            5215
          ],
          "34": [
            5422,
            5613
          ],
          "35": [
            5634,
            5651
          ],
          "36": [
            5661,
            5703
          ],
          "37": [
            5714,
            5728
          ],
          "38": [
            5739,
            5775
          ],
          "39": [
            5785,
            5820
          ]
        },
        "Staker.unstake": {
          "56": [
            7197,
            7223
          ],
          "57": [
            7233,
            7257
          ],
          "58": [
            7368,
            7412
          ],
          "59": [
            7492,
            7536
          ],
          "60": [
            7608,
            7648
          ],
          "61": [
            7706,
            7743
          ],
          "62": [
            7916,
            8123
          ],
          "63": [
            8144,
            8166
          ],
          "64": [
            8176,
            8223
          ],
          "65": [
            8234,
            8275
          ],
          "66": [
            8382,
            8396
          ],
          "67": [
            8406,
            8441
          ]
        },
        "Staker.withdrawTo": {
          "50": [
            16960,
            16977
          ],
          "51": [
            16987,
            17017
          ],
          "52": [
            17028,
            17095
          ],
          "53": [
            17106,
            17160
          ],
          "54": [
            17171,
            17203
          ]
        }
      },
      "25": {},
      "26": {},
      "27": {},
      "28": {},
      "29": {},
      "3": {},
      "7": {},
      "9": {
        "SafeERC20._callOptionalReturn": {
          "110": [
            3744,
            3829
          ]
        },
        "SafeERC20.safeIncreaseAllowance": {
          "88": [
            2161,
            2258
          ]
        },
        "SafeERC20.safeTransfer": {
          "93": [
            746,
            832
          ]
        },
        "SafeERC20.safeTransferFrom": {
          "109": [
            983,
            1079
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.3.2/Address",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/Context",
    "HasAdmin",
    "ICoin",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/IERC1155",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/IERC165",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/IERC20",
    "IHasAdmin",
    "IProjectMan",
    "ISigVerifier",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/Ownable",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/ReentrancyGuard",
    "OpenZeppelin/openzeppelin-contracts@4.3.2/SafeERC20",
    "SigVerifier"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061012c5760003560e01c80639dea67e3116100ad578063d7526ffa11610071578063d7526ffa14610310578063ddb93b1a14610323578063f2fde38b146103da578063f851a440146103ed578063fd93238a1461040057600080fd5b80639dea67e3146102b1578063aeaed1b7146102c4578063b4bbf4af146102d7578063c86283c8146102ea578063ccfcd622146102fd57600080fd5b80636792a95b116100f45780636792a95b1461020f578063715018a6146102225780638da5cb5b1461022a5780638f2839701461024f578063947e89c81461026257600080fd5b806302329a291461013157806308bc92d21461014657806313f91252146101b757806345305ab8146101da5780635c975abb146101fb575b600080fd5b61014461013f366004612615565b610413565b005b610159610154366004612659565b61048e565b6040516101ae9190600060a08201905063ffffffff808451168352806020850151166020840152506001600160401b036040840151166040830152606083015160608301526080830151608083015292915050565b60405180910390f35b6101ca6101c53660046126e6565b6105c2565b60405190151581526020016101ae565b6101ed6101e836600461278e565b610b26565b6040519081526020016101ae565b6004546101ca90600160a01b900460ff1681565b6101ca61021d3660046127d6565b610b86565b610144611060565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016101ae565b61014461025d3660046127f4565b611096565b610275610270366004612659565b6110cc565b6040516101ae9190815181526020808301516001600160401b031690820152604080830151908201526060918201519181019190915260800190565b6101446102bf3660046127f4565b611169565b6102756102d2366004612659565b61121f565b6101ca6102e5366004612811565b611330565b6101446102f836600461282e565b61134e565b61014461030b366004612853565b6114b8565b6101ca61031e3660046127d6565b611570565b610159610331366004612659565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b0391909116600090815260056020908152604080832063ffffffff9485168452825291829020825160a08101845281548086168252600160201b810490951692810192909252600160401b9093046001600160401b03169181019190915260018201546060820152600290910154608082015290565b6101446103e83660046127f4565b611952565b600254610237906001600160a01b031681565b6101ca61040e366004612905565b6119ea565b6001546001600160a01b031633148061043657506003546001600160a01b031633145b6104705760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064015b60405180910390fd5b60048054911515600160a01b0260ff60a01b19909216919091179055565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160a01b038316600090815260056020908152604080832063ffffffff8681168552908352818420825160a08101845281548084168252600160201b810490931694810194909452600160401b9091046001600160401b031691830191909152600181015460608301526002015460808201529061053984611f65565b9050600061054c42836101800151612040565b9050806001600160401b031683604001516001600160401b03161115610577578293505050506105bc565b608082015183516105a2916105919163ffffffff16612949565b846040015183856101400151610b26565b836060018181516105b39190612960565b90525091925050505b92915050565b60006002600054036106165760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610467565b6002600055610626603c42612989565b6001600160401b0316836001600160401b031610156106715760405162461bcd60e51b815260206004820152600760248201526678206e6f6e636560c81b6044820152606401610467565b6001600160401b03831660009081526006602052604090205460ff16156106c45760405162461bcd60e51b815260206004820152600760248201526678206e6f6e636560c81b6044820152606401610467565b60006106cf86611f65565b805190915063ffffffff166000036107145760405162461bcd60e51b8152602060048201526008602482015267085c1c9bda9958dd60c21b6044820152606401610467565b33600081815260056020908152604080832063ffffffff8b81168552908352818420825160a0810184528154808416808352600160201b820490941695820195909552600160401b9094046001600160401b0316928401929092526001820154606084015260029091015460808301529091036107c15760405162461bcd60e51b815260206004820152600b60248201526a217374616b65722e71747960a81b6044820152606401610467565b60405160e089901b6001600160e01b0319166020820152606083811b6bffffffffffffffffffffffff191660248301526038820189905260c088901b6001600160c01b031916605883015260009161087d9101604051602081830303815290604052805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b600254909150610897906001600160a01b03168288612069565b6108d15760405162461bcd60e51b815260206004820152600b60248201526a78207369676e617475726560a81b6044820152606401610467565b6001600160401b0387166000908152600660205260408120805460ff19166001179055606083015161018086015190919061090d904290612040565b905061093d8660800151856000015163ffffffff1661092c9190612949565b856040015183896101400151610b26565b6109479083612960565b9150818a11156109845760405162461bcd60e51b81526020600482015260086024820152671e08185b5bdd5b9d60c21b6044820152606401610467565b6001600160401b034216604085015261099d8a836129af565b60608501526080840180518b91906109b6908390612960565b915081815250508360056000876001600160a01b03166001600160a01b0316815260200190815260200160002060008d63ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a8154816001600160401b0302191690836001600160401b031602179055506060820151816001015560808201518160020155905050610ac5858b600460009054906101000a90046001600160a01b03166001600160a01b03166120fc9092919063ffffffff16565b8a63ffffffff16856001600160a01b03167f9bf028f26713dbfd10f1790f08ee2c2df9a1d82c0f238230bb0b64af2aab4a9e8c604051610b0791815260200190565b60405180910390a3600196505050505050506001600055949350505050565b60008062015180610b3786866129c2565b610b419190612989565b90506000610b4f8488612949565b905061016d610b6463ffffffff841683612949565b610b6e91906129e9565b9250610b7b6064846129e9565b979650505050505050565b600454600090600160a01b900460ff1615610bb35760405162461bcd60e51b8152600401610467906129fd565b60008263ffffffff1611610bf25760405162461bcd60e51b8152600401610467906020808252600490820152632171747960e01b604082015260600190565b336000610bfe85611f65565b9050610c0981612131565b60c08101516001600160f81b031916600160f81b14610c3a5760405162461bcd60e51b815260040161046790612a1d565b428161016001516001600160401b03161115610c815760405162461bcd60e51b8152602060048201526006602482015265085cdd185c9d60d21b6044820152606401610467565b428161018001516001600160401b031611610cc75760405162461bcd60e51b815260206004820152600660248201526508595b99195960d21b6044820152606401610467565b600354604051627eeac760e11b81526001600160a01b03848116600483015263ffffffff8881166024840152871692169062fdd58e90604401602060405180830381865afa158015610d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d419190612a3e565b1015610d7b5760405162461bcd60e51b815260206004820152600960248201526818985b185b98d9480f60ba1b6044820152606401610467565b6001600160a01b038216600081815260056020908152604080832063ffffffff808b168552908352818420825160a08101845281548084168252600160201b81048416828701526001600160401b03600160401b909104811682860152600180840154606080850191909152600294850154608080860191909152998952600788528689208b5190961689529487528588208651998a01875280548a5290810154909116958801959095529084015492860192909252600390920154918401919091529190610e4b858584612170565b90508015610eb557600454610e6a906001600160a01b031686836120fc565b8763ffffffff16856001600160a01b03167f9bf028f26713dbfd10f1790f08ee2c2df9a1d82c0f238230bb0b64af2aab4a9e83604051610eac91815260200190565b60405180910390a35b6000610ec642866101800151612040565b845190915063ffffffff1615801590610ef45750806001600160401b031684604001516001600160401b0316105b15610f395760808501518451610f2491610f139163ffffffff16612949565b856040015183886101400151610b26565b84606001818151610f359190612960565b9052505b8784600001818151610f4b9190612a57565b63ffffffff9081169091526001600160401b03421660408701528451908a1691508490610f799083906129af565b90525050506001600160a01b0393909316600081815260056020908152604080832063ffffffff9a8b1684528252808320855181548785015188850151928e1667ffffffffffffffff1992831617600160201b918f16919091021767ffffffffffffffff60401b1916600160401b6001600160401b0393841602178355606080890151600180860191909155608090990151600294850155968652600785528386209851909c1685529683529281902087518155918701518286018054909b1696169590951790985592840151928701929092559101516003909401939093555090919050565b6001546001600160a01b0316331461108a5760405162461bcd60e51b815260040161046790612a74565b6110946000612291565b565b6001546001600160a01b031633146110c05760405162461bcd60e51b815260040161046790612a74565b6110c9816122e3565b50565b61110060405180608001604052806000815260200160006001600160401b0316815260200160008152602001600081525090565b506001600160a01b038216600090815260076020908152604080832063ffffffff8516845282529182902082516080810184528154815260018201546001600160401b031692810192909252600281015492820192909252600390910154606082015292915050565b6003546001600160a01b0316156111ab5760405162461bcd60e51b81526020600482015260066024820152651c1b481cd95d60d21b6044820152606401610467565b6001546001600160a01b031632146111ee5760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401610467565b600380546001600160a01b0319166001600160a01b03838116919091179091556004546110c9911682600019611e63565b61125360405180608001604052806000815260200160006001600160401b0316815260200160008152602001600081525090565b6001600160a01b038316600090815260076020908152604080832063ffffffff86168452825280832081516080810183528154815260018201546001600160401b031693810193909352600281015491830191909152600301546060820152906112bc84611f65565b905060006112cf42836101800151612040565b9050806001600160401b031683602001516001600160401b031611156112fa578293505050506105bc565b6080820151835161131f9161130e91612949565b846020015183856101200151610b26565b836040018181516105b39190612960565b60008061133c83611f65565b90506113478161232d565b9392505050565b6001546001600160a01b031633146113785760405162461bcd60e51b815260040161046790612a74565b6113818161236d565b600082116113bb5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610467565b600480546040516370a0823160e01b8152309281019290925283916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c9190612a3e565b10156114665760405162461bcd60e51b815260206004820152600960248201526818985b185b98d9480f60ba1b6044820152606401610467565b60045461147e906001600160a01b03163083856123ac565b60405182906001600160a01b038316907f8777844761eb456b028cf7f87fc8dcb146ad8eeafbc6f80f2d006e5cd9e5a74590600090a35050565b6003546001600160a01b031633146115005760405162461bcd60e51b815260206004820152600b60248201526a10b83937b532b1ba26b0b760a91b6044820152606401610467565b6001600160a01b03909216600090815260076020908152604080832063ffffffff90941683529281529082902083518155908301516001820180546001600160401b0390921667ffffffffffffffff19909216919091179055908201516002820155606090910151600390910155565b600454600090600160a01b900460ff161561159d5760405162461bcd60e51b8152600401610467906129fd565b60008263ffffffff16116115dc5760405162461bcd60e51b8152600401610467906020808252600490820152632171747960e01b604082015260600190565b3360006115e885611f65565b60c08101519091506001600160f81b031916600160f81b1461161c5760405162461bcd60e51b815260040161046790612a1d565b6001600160a01b038216600090815260056020908152604080832063ffffffff8981168552908352818420825160a0810184528154808416808352600160201b820490941695820195909552600160401b9094046001600160401b0316928401929092526001820154606084015260029091015460808301529091036116d25760405162461bcd60e51b815260206004820152600b60248201526a217374616b65722e71747960a81b6044820152606401610467565b805163ffffffff808716911610156117145760405162461bcd60e51b815260206004820152600560248201526438ba3c901f60d91b6044820152606401610467565b61171d8261232d565b6117525760405162461bcd60e51b81526004016104679060208082526004908201526308595b9960e21b604082015260600190565b600061176342846101800151612040565b9050806001600160401b031682604001516001600160401b031610156117c357608083015182516117ae9161179d9163ffffffff16612949565b836040015183866101400151610b26565b826060018181516117bf9190612960565b9052505b85826000018181516117d59190612aa9565b63ffffffff9081169091526001600160401b0342811660408087019182526001600160a01b0389166000818152600560209081528382208f8816835281528382208a518154838d015197518916600160401b0267ffffffffffffffff60401b19988b16600160201b0267ffffffffffffffff19909216928b169290921717969096169590951785556060808b01516001808801919091556080808d0151600298890155948452600783528584208d518a16855283529285902085519485018652805480865293810154909716918401919091529385015492820192909252600390930154918301919091529092509088169082906118d4908390612960565b9052506001600160a01b03949094166000908152600760209081526040808320955163ffffffff1683529481529084902085518155908501516001808301805467ffffffffffffffff19166001600160401b039093169290921790915593850151600282015560609094015160039094019390935550949350505050565b6001546001600160a01b0316331461197c5760405162461bcd60e51b815260040161046790612a74565b6001600160a01b0381166119e15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610467565b6110c981612291565b6000600260005403611a3e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610467565b6002600055600454600160a01b900460ff1615611a6d5760405162461bcd60e51b8152600401610467906129fd565b60018216151580611a8057506002821615155b611ab45760405162461bcd60e51b8152602060048201526005602482015264217479706560d81b6044820152606401610467565b336000611ac085611f65565b60c08101519091506001600160f81b031916600160f81b14611af45760405162461bcd60e51b815260040161046790612a1d565b428161016001516001600160401b03161115611b3b5760405162461bcd60e51b8152602060048201526006602482015265085cdd185c9d60d21b6044820152606401610467565b6001600160a01b038216600090815260056020908152604080832063ffffffff8981168552908352818420825160a08101845281548084168252600160201b810490931694810194909452600160401b9091046001600160401b03169183019190915260018082015460608401526002909101546080830152909190861615611c30576001600160a01b0384166000908152600760209081526040808320865163ffffffff16845282529182902082516080810184528154815260018201546001600160401b0316928101929092526002810154928201929092526003909101546060820152611c2c858583612170565b9150505b6002861615611ddb57815163ffffffff16611c775760405162461bcd60e51b8152602060048201526007602482015266085cdd185ad95960ca1b6044820152606401610467565b6000611c8842856101800151612040565b9050806001600160401b031683604001516001600160401b03161115611cb657600095505050505050611e58565b606083015160808501518451611ce691611cd59163ffffffff16612949565b856040015184886101400151610b26565b6001600160401b0342166040860152600060608601526080850180519192508291611d12908390612960565b9052506001600160a01b038616600081815260056020908152604080832063ffffffff8e81168086529184528285208a5181548c8701518d87015192851667ffffffffffffffff1992831617600160201b91909516029390931767ffffffffffffffff60401b1916600160401b6001600160401b0390921691820217825560608c015160018084019190915560808d01516002909301929092559686526007855283862092865291909352922090910180549091169091179055611dd68184612960565b925050505b8015611e4f57600454611df8906001600160a01b031685836120fc565b8663ffffffff16846001600160a01b03167f9bf028f26713dbfd10f1790f08ee2c2df9a1d82c0f238230bb0b64af2aab4a9e83604051611e3a91815260200190565b60405180910390a36001945050505050611e58565b60009450505050505b600160005592915050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed89190612a3e565b611ee29190612960565b6040516001600160a01b038516602482015260448101829052909150611f4890859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123e4565b50505050565b6060611f5d84846000856124b6565b949350505050565b604080516101a081018252600080825260606020830181905282840182905282018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820181905261016082018190526101808201526003549151638206d49f60e01b815263ffffffff8416600482015290916001600160a01b031690638206d49f90602401600060405180830381865afa158015612018573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105bc9190810190612be5565b6000816001600160401b0316836001600160401b031611156120625781611347565b5090919050565b6000836001600160a01b0316600184846040015185600001518660200151604051600081526020016040526040516120bd949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa1580156120df573d6000803e3d6000fd5b505050602060405103516001600160a01b03161490509392505050565b6040516001600160a01b03831660248201526044810182905261212c90849063a9059cbb60e01b90606401611f11565b505050565b805163ffffffff166110c95760405162461bcd60e51b8152602060048201526008602482015267085c1c9bda9958dd60c21b6044820152606401610467565b8051600090810361218357506000611347565b600061219442856101800151612040565b9050806001600160401b031683602001516001600160401b031611156121be576000915050611347565b6040830151608085015184516121e8916121d791612949565b856020015184886101200151610b26565b6121f29082612960565b6001600160401b034216602086015260006040860152606085018051919250829161221e908390612960565b9052506001600160a01b03959095166000908152600760209081526040808320965163ffffffff16835295815290859020845181559084015160018201805467ffffffffffffffff19166001600160401b0390921691909117905593830151600285015550506060015160039091015590565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f7ce7ec0b50378fb6c0186ffb5f48325f6593fcb4ca4386f21861af3129188f5c90600090a250565b60008160e0015161ffff16620151806123469190612d18565b62ffffff1682610160015161235b9190612d3f565b6001600160401b031642101592915050565b6001600160a01b0381166110c95760405162461bcd60e51b81526020600482015260066024820152653c1030b2323960d11b6044820152606401610467565b6040516001600160a01b0380851660248301528316604482015260648101829052611f489085906323b872dd60e01b90608401611f11565b6000612439826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f4e9092919063ffffffff16565b80519091501561212c57808060200190518101906124579190612d5f565b61212c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610467565b6060824710156125175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610467565b843b6125655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610467565b600080866001600160a01b031685876040516125819190612d7c565b60006040518083038185875af1925050503d80600081146125be576040519150601f19603f3d011682016040523d82523d6000602084013e6125c3565b606091505b5091509150610b7b828286606083156125dd575081611347565b8251156125ed5782518084602001fd5b8160405162461bcd60e51b81526004016104679190612d98565b80151581146110c957600080fd5b60006020828403121561262757600080fd5b813561134781612607565b6001600160a01b03811681146110c957600080fd5b63ffffffff811681146110c957600080fd5b6000806040838503121561266c57600080fd5b823561267781612632565b9150602083013561268781612647565b809150509250929050565b6001600160401b03811681146110c957600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156126e0576126e06126a7565b60405290565b60008060008084860360c08112156126fd57600080fd5b853561270881612647565b945060208601359350604086013561271f81612692565b92506060605f198201121561273357600080fd5b50604051606081018181106001600160401b0382111715612756576127566126a7565b604052606086013581526080860135602082015260a086013560ff8116811461277e57600080fd5b6040820152939692955090935050565b600080600080608085870312156127a457600080fd5b8435935060208501356127b681612692565b925060408501356127c681612692565b9396929550929360600135925050565b600080604083850312156127e957600080fd5b823561267781612647565b60006020828403121561280657600080fd5b813561134781612632565b60006020828403121561282357600080fd5b813561134781612647565b6000806040838503121561284157600080fd5b82359150602083013561268781612632565b600080600083850360c081121561286957600080fd5b843561287481612632565b9350602085013561288481612647565b92506080603f198201121561289857600080fd5b50604051608081018181106001600160401b03821117156128bb576128bb6126a7565b6040908152850135815260608501356128d381612692565b60208201526080850135604082015260a0909401356060850152509093909250565b61ffff811681146110c957600080fd5b6000806040838503121561291857600080fd5b823561292381612647565b91506020830135612687816128f5565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105bc576105bc612933565b808201808211156105bc576105bc612933565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b03808416806129a3576129a3612973565b92169190910492915050565b818103818111156105bc576105bc612933565b6001600160401b038281168282160390808211156129e2576129e2612933565b5092915050565b6000826129f8576129f8612973565b500490565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b6020808252600790820152662161637469766560c81b604082015260600190565b600060208284031215612a5057600080fd5b5051919050565b63ffffffff8181168382160190808211156129e2576129e2612933565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b63ffffffff8281168282160390808211156129e2576129e2612933565b8051612ad181612647565b919050565b60005b83811015612af1578181015183820152602001612ad9565b50506000910152565b600082601f830112612b0b57600080fd5b81516001600160401b0380821115612b2557612b256126a7565b604051601f8301601f19908116603f01168101908282118183101715612b4d57612b4d6126a7565b81604052838152866020858801011115612b6657600080fd5b612b77846020830160208901612ad6565b9695505050505050565b8051612ad181612632565b8051612ad1816128f5565b8051612ad181612607565b80516001600160f81b031981168114612ad157600080fd5b80516fffffffffffffffffffffffffffffffff81168114612ad157600080fd5b8051612ad181612692565b600060208284031215612bf757600080fd5b81516001600160401b0380821115612c0e57600080fd5b908301906101a08286031215612c2357600080fd5b612c2b6126bd565b612c3483612ac6565b8152602083015182811115612c4857600080fd5b612c5487828601612afa565b602083015250612c6660408401612b81565b6040820152612c7760608401612b8c565b606082015260808301516080820152612c9260a08401612b97565b60a0820152612ca360c08401612ba2565b60c0820152612cb460e08401612b8c565b60e08201526101009150612cc9828401612bba565b918101919091526101208281015190820152610140808301519082015261016090612cf5828401612bda565b828201526101809150612d09828401612bda565b91810191909152949350505050565b62ffffff818116838216028082169190828114612d3757612d37612933565b505092915050565b6001600160401b038181168382160190808211156129e2576129e2612933565b600060208284031215612d7157600080fd5b815161134781612607565b60008251612d8e818460208701612ad6565b9190910192915050565b6020815260008251806020840152612db7816040850160208701612ad6565b601f01601f1916919091016040019291505056fea2646970667358221220b3d53ff72eb0b17c2e880b1308e4e8001ea52cc8fdbbfb3dd314330ebb09309a64736f6c63430008110033",
  "deployedSourceMap": "1777:15889:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17468:196;;;;;;:::i;:::-;;:::i;:::-;;6120:638;;;;;;:::i;:::-;;:::i;:::-;;;;;;1182:4:30;1224:3;1213:9;1209:19;1201:27;;1247:10;1303:2;1294:6;1288:13;1284:22;1273:9;1266:41;1375:2;1367:4;1359:6;1355:17;1349:24;1345:33;1338:4;1327:9;1323:20;1316:63;;-1:-1:-1;;;;;1439:4:30;1431:6;1427:17;1421:24;1417:49;1410:4;1399:9;1395:20;1388:79;1523:4;1515:6;1511:17;1505:24;1498:4;1487:9;1483:20;1476:54;1586:4;1578:6;1574:17;1568:24;1561:4;1550:9;1546:20;1539:54;1036:563;;;;;6120:638:20;;;;;;;;13447:1639;;;;;;:::i;:::-;;:::i;:::-;;;3378:14:30;;3371:22;3353:41;;3341:2;3326:18;13447:1639:20;3213:187:30;3754:360:20;;;;;;:::i;:::-;;:::i;:::-;;;4077:25:30;;;4065:2;4050:18;3754:360:20;3931:177:30;1951:26:20;;;;;-1:-1:-1;;;1951:26:20;;;;;;4120:1729;;;;;;:::i;:::-;;:::i;1605:92:0:-;;;:::i;973:85::-;1045:6;;-1:-1:-1;;;;;1045:6:0;973:85;;;-1:-1:-1;;;;;4666:32:30;;;4648:51;;4636:2;4621:18;973:85:0;4502:203:30;3355:96:20;;;;;;:::i;:::-;;:::i;15961:173::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;5185:13:30;;5167:32;;5259:4;5247:17;;;5241:24;-1:-1:-1;;;;;5237:49:30;5215:20;;;5208:79;5343:4;5331:17;;;5325:24;5303:20;;;5296:54;5406:4;5394:17;;;5388:24;5366:20;;;5359:54;;;;5154:3;5139:19;;4962:457;2895:296:20;;;;;;:::i;:::-;;:::i;15338:617::-;;;;;;:::i;:::-;;:::i;6950:160::-;;;;;;:::i;:::-;;:::i;16883:327::-;;;;;;:::i;:::-;;:::i;16140:194::-;;;;;;:::i;:::-;;:::i;7116:1354::-;;;;;;:::i;:::-;;:::i;16340:210::-;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16496:13:20;;;;16470:23;16496:13;;;:7;:13;;;;;;;;:24;;;;;;;;;;;;16470:50;;;;;;;;;;;;;;-1:-1:-1;;;16470:50:20;;;;;;;;;;;;-1:-1:-1;;;16470:50:20;;;-1:-1:-1;;;;;16470:50:20;;;;;;;;;;;;;;;;;;;;;;;;;;16340:210;1846:189:0;;;;;;:::i;:::-;;:::i;326:20:17:-;;;;;-1:-1:-1;;;;;326:20:17;;;9418:2139:20;;;;;;:::i;:::-;;:::i;17468:196::-;1045:6:0;;-1:-1:-1;;;;;1045:6:0;666:10:11;17537:23:20;;:62;;-1:-1:-1;17572:10:20;;-1:-1:-1;;;;;17572:10:20;666::11;17564:35:20;17537:62;17516:115;;;;-1:-1:-1;;;17516:115:20;;7781:2:30;17516:115:20;;;7763:21:30;7820:1;7800:18;;;7793:29;-1:-1:-1;;;7838:18:30;;;7831:36;7884:18;;17516:115:20;;;;;;;;;17641:6;:16;;;;;-1:-1:-1;;;17641:16:20;-1:-1:-1;;;;17641:16:20;;;;;;;;;17468:196::o;6120:638::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6282:16:20;;6252:27;6282:16;;;:7;:16;;;;;;;;:27;;;;;;;;;;;;6252:57;;;;;;;;;;;;;;-1:-1:-1;;;6252:57:20;;;;;;;;;;;;-1:-1:-1;;;6252:57:20;;;-1:-1:-1;;;;;6252:57:20;;;;;;;;;;;;;;;;;;;;;;;;6348:22;6282:27;6348:11;:22::i;:::-;6319:51;;6380:14;6397:45;6408:15;6426:7;:15;;;6397:3;:45::i;:::-;6380:62;;6480:7;-1:-1:-1;;;;;6457:30:20;:10;:20;;;-1:-1:-1;;;;;6457:30:20;;6453:78;;;6510:10;6503:17;;;;;;;6453:78;6615:13;;;;6598:14;;6568:156;;6598:30;;;;;:::i;:::-;6642:10;:20;;;6676:7;6697;:17;;;6568:16;:156::i;:::-;6541:10;:23;;:183;;;;;;;:::i;:::-;;;-1:-1:-1;6741:10:20;;-1:-1:-1;;;6120:638:20;;;;;:::o;13447:1639::-;13606:4;1680:1:1;2259:7;;:19;2251:63;;;;-1:-1:-1;;;2251:63:1;;8550:2:30;2251:63:1;;;8532:21:30;8589:2;8569:18;;;8562:30;8628:33;8608:18;;;8601:61;8679:18;;2251:63:1;8348:355:30;2251:63:1;1680:1;2389:7;:18;13639:28:20::1;13665:2;13646:15;13639:28;:::i;:::-;-1:-1:-1::0;;;;;13630:37:20::1;:5;-1:-1:-1::0;;;;;13630:37:20::1;;;13622:57;;;::::0;-1:-1:-1;;;13622:57:20;;9246:2:30;13622:57:20::1;::::0;::::1;9228:21:30::0;9285:1;9265:18;;;9258:29;-1:-1:-1;;;9303:18:30;;;9296:37;9350:18;;13622:57:20::1;9044:330:30::0;13622:57:20::1;-1:-1:-1::0;;;;;13697:17:20;::::1;;::::0;;;:10:::1;:17;::::0;;;;;::::1;;:22:::0;13689:42:::1;;;::::0;-1:-1:-1;;;13689:42:20;;9246:2:30;13689:42:20::1;::::0;::::1;9228:21:30::0;9285:1;9265:18;;;9258:29;-1:-1:-1;;;9303:18:30;;;9296:37;9350:18;;13689:42:20::1;9044:330:30::0;13689:42:20::1;13742:26;13771:22;13783:9;13771:11;:22::i;:::-;13812:10:::0;;13742:51;;-1:-1:-1;13812:15:20::1;;:10;:15:::0;13804:36:::1;;;::::0;-1:-1:-1;;;13804:36:20;;9581:2:30;13804:36:20::1;::::0;::::1;9563:21:30::0;9620:1;9600:18;;;9593:29;-1:-1:-1;;;9638:18:30;;;9631:38;9686:18;;13804:36:20::1;9379:331:30::0;13804:36:20::1;13869:10;13851:15;13913:16:::0;;;:7:::1;:16;::::0;;;;;;;:27:::1;::::0;;::::1;::::0;;;;;;;;13890:50;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;;;-1:-1:-1;;;13890:50:20;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;-1:-1:-1;;;13890:50:20;;::::1;-1:-1:-1::0;;;;;13890:50:20::1;::::0;;;;;;;;;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;;;13959:12;13951:36:::1;;;::::0;-1:-1:-1;;;13951:36:20;;9917:2:30;13951:36:20::1;::::0;::::1;9899:21:30::0;9956:2;9936:18;;;9929:30;-1:-1:-1;;;9975:18:30;;;9968:41;10026:18;;13951:36:20::1;9715:335:30::0;13951:36:20::1;14078:51;::::0;10302:3:30;10280:16;;;-1:-1:-1;;;;;;10276:43:30;14078:51:20::1;::::0;::::1;10264:56:30::0;10357:2;10353:15;;;-1:-1:-1;;10349:53:30;10336:11;;;10329:74;10419:12;;;10412:28;;;10496:3;10474:16;;;-1:-1:-1;;;;;;10470:51:30;10456:12;;;10449:73;-1:-1:-1;;14043:97:20::1;::::0;10538:12:30;14078:51:20::1;;;;;;;;;;;;14068:62;;;;;;610:58:19::0;;22261:66:30;610:58:19;;;22249:79:30;22344:12;;;22337:28;;;545:7:19;;22381:12:30;;610:58:19;;;;;;;;;;;;583:99;;;;;;564:118;;478:211;;;;14043:97:20::1;14169:5;::::0;14025:115;;-1:-1:-1;14159:30:20::1;::::0;-1:-1:-1;;;;;14169:5:20::1;14025:115:::0;14185:3;14159:9:::1;:30::i;:::-;14151:54;;;::::0;-1:-1:-1;;;14151:54:20;;10763:2:30;14151:54:20::1;::::0;::::1;10745:21:30::0;10802:2;10782:18;;;10775:30;-1:-1:-1;;;10821:18:30;;;10814:41;10872:18;;14151:54:20::1;10561:335:30::0;14151:54:20::1;-1:-1:-1::0;;;;;14216:17:20;::::1;;::::0;;;:10:::1;:17;::::0;;;;:21;;-1:-1:-1;;14216:21:20::1;14236:1;14216:21;::::0;;14272:16:::1;::::0;::::1;::::0;14345:15:::1;::::0;::::1;::::0;14272:16;;14216:17;14316:45:::1;::::0;14327:15:::1;::::0;14316:3:::1;:45::i;:::-;14299:62;;14474:142;14514:7;:13;;;14504:3;:7;;;:23;;;;;;:::i;:::-;14541:3;:13;;;14568:7;14589;:17;;;14474:16;:142::i;:::-;14457:159;::::0;;::::1;:::i;:::-;;;14701:13;14691:6;:23;;14683:44;;;::::0;-1:-1:-1;;;14683:44:20;;11103:2:30;14683:44:20::1;::::0;::::1;11085:21:30::0;11142:1;11122:18;;;11115:29;-1:-1:-1;;;11160:18:30;;;11153:38;11208:18;;14683:44:20::1;10901:331:30::0;14683:44:20::1;-1:-1:-1::0;;;;;14761:15:20::1;14738:39;:13;::::0;::::1;:39:::0;14806:22:::1;14822:6:::0;14806:13;:22:::1;:::i;:::-;14787:16;::::0;::::1;:41:::0;14838:18:::1;::::0;::::1;:28:::0;;14860:6;;14838:18;:28:::1;::::0;14860:6;;14838:28:::1;:::i;:::-;;;;;;::::0;::::1;14907:3;14877:7;:16;14885:7;-1:-1:-1::0;;;;;14877:16:20::1;-1:-1:-1::0;;;;;14877:16:20::1;;;;;;;;;;;;:27;14894:9;14877:27;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;14877:33:20::1;;;;;-1:-1:-1::0;;;;;14877:33:20::1;;;;;;;;;;;;;;;;;;;;;;;;;14959:40;14983:7;14992:6;14959:10;;;;;;;;;-1:-1:-1::0;;;;;14959:10:20::1;-1:-1:-1::0;;;;;14959:23:20::1;;;:40;;;;;:::i;:::-;15039:9;15015:42;;15030:7;-1:-1:-1::0;;;;;15015:42:20::1;;15050:6;15015:42;;;;4077:25:30::0;;4065:2;4050:18;;3931:177;15015:42:20::1;;;;;;;;15075:4;15068:11;;;;;;;;1637:1:1::0;2562:7;:22;13447:1639:20;;-1:-1:-1;;;;13447:1639:20:o;3754:360::-;3905:15;;3981:6;3956:21;3967:10;3956:8;:21;:::i;:::-;3955:32;;;;:::i;:::-;3932:56;-1:-1:-1;3998:16:20;4018:13;4028:3;4018:7;:13;:::i;:::-;3998:34;-1:-1:-1;4074:3:20;4053:17;;;;3998:34;4053:17;:::i;:::-;4052:25;;;;:::i;:::-;4042:35;-1:-1:-1;4094:13:20;4104:3;4042:35;4094:13;:::i;:::-;4087:20;3754:360;-1:-1:-1;;;;;;;3754:360:20:o;4120:1729::-;4208:6;;4183:4;;-1:-1:-1;;;4208:6:20;;;;4207:7;4199:26;;;;-1:-1:-1;;;4199:26:20;;;;;;;:::i;:::-;4249:1;4243:3;:7;;;4235:24;;;;-1:-1:-1;;;4235:24:20;;;;;;12219:2:30;12201:21;;;12258:1;12238:18;;;12231:29;-1:-1:-1;;;12291:2:30;12276:18;;12269:34;12335:2;12320:18;;12017:327;4235:24:20;4288:10;4270:15;4338:22;4350:9;4338:11;:22::i;:::-;4309:51;;4371:22;4385:7;4371:13;:22::i;:::-;4411:14;;;;-1:-1:-1;;;;;;4411:24:20;-1:-1:-1;;;4411:24:20;4403:44;;;;-1:-1:-1;;;4403:44:20;;;;;;;:::i;:::-;4486:15;4465:7;:17;;;-1:-1:-1;;;;;4465:36:20;;;4457:55;;;;-1:-1:-1;;;4457:55:20;;12886:2:30;4457:55:20;;;12868:21:30;12925:1;12905:18;;;12898:29;-1:-1:-1;;;12943:18:30;;;12936:36;12989:18;;4457:55:20;12684:329:30;4457:55:20;4548:15;4530:7;:15;;;-1:-1:-1;;;;;4530:33:20;;4522:52;;;;-1:-1:-1;;;4522:52:20;;13220:2:30;4522:52:20;;;13202:21:30;13259:1;13239:18;;;13232:29;-1:-1:-1;;;13277:18:30;;;13270:36;13323:18;;4522:52:20;13018:329:30;4522:52:20;4672:10;;4655:59;;-1:-1:-1;;;4655:59:20;;-1:-1:-1;;;;;13543:32:30;;;4655:59:20;;;13525:51:30;4655:66:20;13612:23:30;;;13592:18;;;13585:51;4655:66:20;;;4672:10;;4655:39;;13498:18:30;;4655:59:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:66;;4634:122;;;;-1:-1:-1;;;4634:122:20;;14038:2:30;4634:122:20;;;14020:21:30;14077:1;14057:18;;;14050:29;-1:-1:-1;;;14095:18:30;;;14088:39;14144:18;;4634:122:20;13836:332:30;4634:122:20;-1:-1:-1;;;;;4822:16:20;;4796:23;4822:16;;;:7;:16;;;;;;;;:27;;;;;;;;;;;;4796:53;;;;;;;;;;;;;;-1:-1:-1;;;4796:53:20;;;;;;;;-1:-1:-1;;;;;;;;4796:53:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4885:17;;;:8;:17;;;;;4903:10;;4885:29;;;;;;;;;;;4860:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4796:53;4860:54;4950:43;4830:7;4903;4860:54;4950:20;:43::i;:::-;4925:68;-1:-1:-1;5064:18:20;;5060:166;;5098:10;;:48;;-1:-1:-1;;;;;5098:10:20;5122:7;5131:14;5098:23;:48::i;:::-;5189:9;5165:50;;5180:7;-1:-1:-1;;;;;5165:50:20;;5200:14;5165:50;;;;4077:25:30;;4065:2;4050:18;;3931:177;5165:50:20;;;;;;;;5060:166;5236:14;5253:45;5264:15;5282:7;:15;;;5253:3;:45::i;:::-;5362:10;;5236:62;;-1:-1:-1;5362:14:20;;;;;;:44;;;5399:7;-1:-1:-1;;;;;5380:26:20;:6;:16;;;-1:-1:-1;;;;;5380:26:20;;5362:44;5358:266;;;5492:13;;;;5479:10;;5445:168;;5479:26;;;;;:::i;:::-;5523:6;:16;;;5557:7;5582;:17;;;5445:16;:168::i;:::-;5422:6;:19;;:191;;;;;;;:::i;:::-;;;-1:-1:-1;5358:266:20;5648:3;5634:6;:10;;:17;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;5687:15:20;5661:42;:16;;;:42;5714:14;;;;;;-1:-1:-1;5714:3:20;;:14;;;;;:::i;:::-;;;-1:-1:-1;;;;;;;;5739:16:20;;;;;;;;:7;:16;;;;;;;;:27;;;;;;;;;;;:36;;;;;;;;;;;;;;;-1:-1:-1;;5739:36:20;;;;-1:-1:-1;;;5739:36:20;;;;;;;;-1:-1:-1;;;;5739:36:20;-1:-1:-1;;;;;;;;5739:36:20;;;;;;;;;;;;-1:-1:-1;5739:36:20;;;;;;;;;;;;;;;;;5785:17;;;:8;:17;;;;;5803:10;;5785:29;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4120:1729:20;-1:-1:-1;4120:1729:20:o;1605:92:0:-;1045:6;;-1:-1:-1;;;;;1045:6:0;666:10:11;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;3355:96:20:-;1045:6:0;;-1:-1:-1;;;;;1045:6:0;666:10:11;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;3424:20:20::1;3434:9;3424;:20::i;:::-;3355:96:::0;:::o;15961:173::-;16065:18;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16065:18:20;-1:-1:-1;;;;;;16102:14:20;;;;;;:8;:14;;;;;;;;:25;;;;;;;;;;;16095:32;;;;;;;;;;;;;;;-1:-1:-1;;;;;16095:32:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;15961:173;;;;:::o;2895:296::-;2966:10;;-1:-1:-1;;;;;2966:10:20;:37;2958:56;;;;-1:-1:-1;;;2958:56:20;;14913:2:30;2958:56:20;;;14895:21:30;14952:1;14932:18;;;14925:29;-1:-1:-1;;;14970:18:30;;;14963:36;15016:18;;2958:56:20;14711:329:30;2958:56:20;1045:6:0;;-1:-1:-1;;;;;1045:6:0;3032:9:20;:20;3024:39;;;;-1:-1:-1;;;3024:39:20;;7781:2:30;3024:39:20;;;7763:21:30;7820:1;7800:18;;;7793:29;-1:-1:-1;;;7838:18:30;;;7831:36;7884:18;;3024:39:20;7579:329:30;3024:39:20;3073:10;:37;;-1:-1:-1;;;;;;3073:37:20;-1:-1:-1;;;;;3073:37:20;;;;;;;;;;3120:10;;:64;;:10;3073:37;-1:-1:-1;;3120:32:20;:64::i;15338:617::-;15439:18;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15439:18:20;-1:-1:-1;;;;;15499:14:20;;15469:27;15499:14;;;:8;:14;;;;;;;;:25;;;;;;;;;;15469:55;;;;;;;;;;;;;;;-1:-1:-1;;;;;15469:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;15563:22;15514:9;15563:11;:22::i;:::-;15534:51;;15595:14;15612:45;15623:15;15641:7;:15;;;15612:3;:45::i;:::-;15595:62;;15693:7;-1:-1:-1;;;;;15672:28:20;:8;:18;;;-1:-1:-1;;;;;15672:28:20;;15668:74;;;15723:8;15716:15;;;;;;;15668:74;15822:13;;;;15807:12;;15777:146;;15807:28;;;:::i;:::-;15849:8;:18;;;15881:7;15902;:11;;;15777:16;:146::i;:::-;15752:8;:21;;:171;;;;;;;:::i;6950:160::-;7006:4;7022:26;7051:15;7063:2;7051:11;:15::i;:::-;7022:44;;7083:20;7095:7;7083:11;:20::i;:::-;7076:27;6950:160;-1:-1:-1;;;6950:160:20:o;16883:327::-;1045:6:0;;-1:-1:-1;;;;;1045:6:0;666:10:11;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;16960:17:20::1;16974:2;16960:13;:17::i;:::-;17004:1;16995:6;:10;16987:30;;;::::0;-1:-1:-1;;;16987:30:20;;15247:2:30;16987:30:20::1;::::0;::::1;15229:21:30::0;15286:1;15266:18;;;15259:29;-1:-1:-1;;;15304:18:30;;;15297:37;15351:18;;16987:30:20::1;15045:330:30::0;16987:30:20::1;17036:10;::::0;;:35:::1;::::0;-1:-1:-1;;;17036:35:20;;17065:4:::1;17036:35:::0;;::::1;4648:51:30::0;;;;17075:6:20;;-1:-1:-1;;;;;17036:10:20;;::::1;::::0;:20:::1;::::0;4621:18:30;;17036:35:20::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:45;;17028:67;;;::::0;-1:-1:-1;;;17028:67:20;;14038:2:30;17028:67:20::1;::::0;::::1;14020:21:30::0;14077:1;14057:18;;;14050:29;-1:-1:-1;;;14095:18:30;;;14088:39;14144:18;;17028:67:20::1;13836:332:30::0;17028:67:20::1;17106:10;::::0;:54:::1;::::0;-1:-1:-1;;;;;17106:10:20::1;17142:4;17149:2:::0;17153:6;17106:27:::1;:54::i;:::-;17176:27;::::0;17196:6;;-1:-1:-1;;;;;17176:27:20;::::1;::::0;::::1;::::0;;;::::1;16883:327:::0;;:::o;16140:194::-;2844:10;;-1:-1:-1;;;;;2844:10:20;2822;:33;2814:57;;;;-1:-1:-1;;;2814:57:20;;15582:2:30;2814:57:20;;;15564:21:30;15621:2;15601:18;;;15594:30;-1:-1:-1;;;15640:18:30;;;15633:41;15691:18;;2814:57:20;15380:335:30;2814:57:20;-1:-1:-1;;;;;16292:14:20;;::::1;;::::0;;;:8:::1;:14;::::0;;;;;;;:25:::1;::::0;;::::1;::::0;;;;;;;;;:35;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;16292:35:20;;::::1;-1:-1:-1::0;;16292:35:20;;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;16140:194::o;7116:1354::-;7206:6;;7181:4;;-1:-1:-1;;;7206:6:20;;;;7205:7;7197:26;;;;-1:-1:-1;;;7197:26:20;;;;;;;:::i;:::-;7247:1;7241:3;:7;;;7233:24;;;;-1:-1:-1;;;7233:24:20;;;;;;12219:2:30;12201:21;;;12258:1;12238:18;;;12231:29;-1:-1:-1;;;12291:2:30;12276:18;;12269:34;12335:2;12320:18;;12017:327;7233:24:20;7286:10;7268:15;7336:22;7348:9;7336:11;:22::i;:::-;7376:14;;;;7307:51;;-1:-1:-1;;;;;;;7376:24:20;-1:-1:-1;;;7376:24:20;7368:44;;;;-1:-1:-1;;;7368:44:20;;;;;;;:::i;:::-;-1:-1:-1;;;;;7454:16:20;;7423:28;7454:16;;;:7;:16;;;;;;;;:27;;;;;;;;;;;;7423:58;;;;;;;;;;;;;;;-1:-1:-1;;;7423:58:20;;;;;;;;;;;;-1:-1:-1;;;7423:58:20;;;-1:-1:-1;;;;;7423:58:20;;;;;;;;;;;;;;;;;;;;;;;;;;;7500:20;7492:44;;;;-1:-1:-1;;;7492:44:20;;9917:2:30;7492:44:20;;;9899:21:30;9956:2;9936:18;;;9929:30;-1:-1:-1;;;9975:18:30;;;9968:41;10026:18;;7492:44:20;9715:335:30;7492:44:20;7616:15;;:22;;;;;;;;7608:40;;;;-1:-1:-1;;;7608:40:20;;15922:2:30;7608:40:20;;;15904:21:30;15961:1;15941:18;;;15934:29;-1:-1:-1;;;15979:18:30;;;15972:35;16024:18;;7608:40:20;15720:328:30;7608:40:20;7714:20;7726:7;7714:11;:20::i;:::-;7706:37;;;;-1:-1:-1;;;7706:37:20;;;;;;16255:2:30;16237:21;;;16294:1;16274:18;;;16267:29;-1:-1:-1;;;16327:2:30;16312:18;;16305:34;16371:2;16356:18;;16053:327;7706:37:20;7754:15;7772:45;7783:15;7801:7;:15;;;7772:3;:45::i;:::-;7754:63;;7856:8;-1:-1:-1;;;;;7832:32:20;:11;:21;;;-1:-1:-1;;;;;7832:32:20;;7828:306;;;7996:13;;;;7978:15;;7944:179;;7978:31;;;;;:::i;:::-;8027:11;:21;;;8066:8;8092:7;:17;;;7944:16;:179::i;:::-;7916:11;:24;;:207;;;;;;;:::i;:::-;;;-1:-1:-1;7828:306:20;8163:3;8144:11;:15;;:22;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;8207:15:20;8176:47;;:21;;;;:47;;;-1:-1:-1;;;;;8234:16:20;;;;;;:7;:16;;;;;;;:27;;;;;;;;;;:41;;;;;;;;;;;;-1:-1:-1;;;8234:41:20;-1:-1:-1;;;;8234:41:20;;;-1:-1:-1;;;8234:41:20;-1:-1:-1;;8234:41:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8343:17;;;:8;:17;;;;;8361:10;;8343:29;;;;;;;;;;8318:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8382:14:20;;;;8318:54;;8382:14;;;;;:::i;:::-;;;-1:-1:-1;;;;;;8406:17:20;;;;;;;;:8;:17;;;;;;;;8424:10;;8406:29;;;;;;;;;;;:35;;;;;;;;;;;;;;-1:-1:-1;;8406:35:20;-1:-1:-1;;;;;8406:35:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8406:35:20;7116:1354;-1:-1:-1;;;;7116:1354:20:o;1846:189:0:-;1045:6;;-1:-1:-1;;;;;1045:6:0;666:10:11;1185:23:0;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:0;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:0;;16767:2:30;1926:73:0::1;::::0;::::1;16749:21:30::0;16806:2;16786:18;;;16779:30;16845:34;16825:18;;;16818:62;-1:-1:-1;;;16896:18:30;;;16889:36;16942:19;;1926:73:0::1;16565:402:30::0;1926:73:0::1;2009:19;2019:8;2009:9;:19::i;9418:2139:20:-:0;9532:4;1680:1:1;2259:7;;:19;2251:63;;;;-1:-1:-1;;;2251:63:1;;8550:2:30;2251:63:1;;;8532:21:30;8589:2;8569:18;;;8562:30;8628:33;8608:18;;;8601:61;8679:18;;2251:63:1;8348:355:30;2251:63:1;1680:1;2389:7;:18;9557:6:20::1;::::0;-1:-1:-1;;;9557:6:20;::::1;;;9556:7;9548:26;;;;-1:-1:-1::0;;;9548:26:20::1;;;;;;;:::i;:::-;658:1;9606:32:::0;::::1;9605:39:::0;::::1;::::0;:98:::1;;-1:-1:-1::0;699:1:20::1;9665:32:::0;::::1;9664:39:::0;::::1;9605:98;9584:150;;;::::0;-1:-1:-1;;;9584:150:20;;17174:2:30;9584:150:20::1;::::0;::::1;17156:21:30::0;17213:1;17193:18;;;17186:29;-1:-1:-1;;;17231:18:30;;;17224:35;17276:18;;9584:150:20::1;16972:328:30::0;9584:150:20::1;9763:10;9745:15;9813:22;9825:9:::0;9813:11:::1;:22::i;:::-;9853:14;::::0;::::1;::::0;9784:51;;-1:-1:-1;;;;;;;9853:24:20::1;-1:-1:-1::0;;;9853:24:20::1;9845:44;;;;-1:-1:-1::0;;;9845:44:20::1;;;;;;;:::i;:::-;9928:15;9907:7;:17;;;-1:-1:-1::0;;;;;9907:36:20::1;;;9899:55;;;::::0;-1:-1:-1;;;9899:55:20;;12886:2:30;9899:55:20::1;::::0;::::1;12868:21:30::0;12925:1;12905:18;;;12898:29;-1:-1:-1;;;12943:18:30;;;12936:36;12989:18;;9899:55:20::1;12684:329:30::0;9899:55:20::1;-1:-1:-1::0;;;;;9988:16:20;::::1;9965:20;9988:16:::0;;;:7:::1;:16;::::0;;;;;;;:27:::1;::::0;;::::1;::::0;;;;;;;;9965:50;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;;-1:-1:-1;;;9965:50:20;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;-1:-1:-1;;;9965:50:20;;::::1;-1:-1:-1::0;;;;;9965:50:20::1;::::0;;;;;;;;;;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;;;:20;10069:32;::::1;10068:39:::0;10064:248:::1;;-1:-1:-1::0;;;;;10192:17:20;::::1;10162:27;10192:17:::0;;;:8:::1;:17;::::0;;;;;;;10210:10;;10192:29:::1;;::::0;;;;;;;;10162:59;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;10162:59:20::1;::::0;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;;;;;::::1;::::0;;::::1;::::0;;;;;10253:48:::1;10201:7:::0;10210;10162:59;10253:20:::1;:48::i;:::-;10235:66;;10109:203;10064:248;699:1;10327:32:::0;::::1;10326:39:::0;10322:906:::1;;10389:7:::0;;:11:::1;;10381:31;;;::::0;-1:-1:-1;;;10381:31:20;;17507:2:30;10381:31:20::1;::::0;::::1;17489:21:30::0;17546:1;17526:18;;;17519:29;-1:-1:-1;;;17564:18:30;;;17557:37;17611:18;;10381:31:20::1;17305:330:30::0;10381:31:20::1;10519:14;10536:45;10547:15;10565:7;:15;;;10536:3;:45::i;:::-;10519:62;;10616:7;-1:-1:-1::0;;;;;10600:23:20::1;:3;:13;;;-1:-1:-1::0;;;;;10600:23:20::1;;10596:74;;;10650:5;10643:12;;;;;;;;;10596:74;10708:16;::::0;::::1;::::0;10798:13:::1;::::0;::::1;::::0;10788:7;;10754:162:::1;::::0;10788:23:::1;::::0;::::1;;;:::i;:::-;10829:3;:13;;;10860:7;10885;:17;;;10754:16;:162::i;:::-;-1:-1:-1::0;;;;;10954:15:20::1;10931:39;:13;::::0;::::1;:39:::0;11003:1:::1;10984:16;::::0;::::1;:20:::0;11018:18:::1;::::0;::::1;:35:::0;;10738:178;;-1:-1:-1;10738:178:20;;11018:35:::1;::::0;10738:178;;11018:35:::1;:::i;:::-;::::0;;-1:-1:-1;;;;;;11068:16:20;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:27:::1;::::0;;::::1;::::0;;;;;;;;;:33;;;;;;::::1;::::0;;;::::1;::::0;;;::::1;-1:-1:-1::0;;11068:33:20;;;;-1:-1:-1;;;11068:33:20;;;::::1;;::::0;;;::::1;-1:-1:-1::0;;;;11068:33:20::1;-1:-1:-1::0;;;;;;;;11068:33:20;;::::1;::::0;;::::1;;::::0;;::::1;::::0;::::1;::::0;-1:-1:-1;11068:33:20;;::::1;::::0;;;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;;;11116:17;;;:8:::1;:17:::0;;;;;:28;;;;;;;;;:38;;::::1;:54:::0;;;;::::1;::::0;;::::1;::::0;;11185:32:::1;11204:13:::0;11185:32;::::1;:::i;:::-;;;10367:861;;10322:906;11278:19:::0;;11274:194:::1;;11313:10;::::0;:49:::1;::::0;-1:-1:-1;;;;;11313:10:20::1;11337:7:::0;11346:15;11313:23:::1;:49::i;:::-;11405:9;11381:51;;11396:7;-1:-1:-1::0;;;;;11381:51:20::1;;11416:15;11381:51;;;;4077:25:30::0;;4065:2;4050:18;;3931:177;11381:51:20::1;;;;;;;;11453:4;11446:11;;;;;;;;11274:194;11545:5;11538:12;;;;;;2418:1:1;1637::::0;2562:7;:22;9418:2139:20;;-1:-1:-1;;9418:2139:20:o;1955:310:9:-;2104:39;;-1:-1:-1;;;2104:39:9;;2128:4;2104:39;;;17852:34:30;-1:-1:-1;;;;;17922:15:30;;;17902:18;;;17895:43;2081:20:9;;2146:5;;2104:15;;;;;17787:18:30;;2104:39:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:47;;;;:::i;:::-;2188:69;;-1:-1:-1;;;;;18141:32:30;;2188:69:9;;;18123:51:30;18190:18;;;18183:34;;;2081:70:9;;-1:-1:-1;2161:97:9;;2181:5;;-1:-1:-1;;;2211:22:9;18096:18:30;;2188:69:9;;;;-1:-1:-1;;2188:69:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2188:69:9;-1:-1:-1;;;;;;2188:69:9;;;;;;;;;;2161:19;:97::i;:::-;2071:194;1955:310;;;:::o;3461:223:10:-;3594:12;3625:52;3647:6;3655:4;3661:1;3664:12;3625:21;:52::i;:::-;3618:59;3461:223;-1:-1:-1;;;;3461:223:10:o;3197:152:20:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3310:10:20;;:32;;-1:-1:-1;;;3310:32:20;;18402:10:30;18390:23;;3310:32:20;;;18372:42:30;-1:-1:-1;;;;;;;3310:10:20;;:21;;18345:18:30;;3310:32:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3310:32:20;;;;;;;;;;;;:::i;5963:102::-;6019:6;6049:1;-1:-1:-1;;;;;6044:6:20;:1;-1:-1:-1;;;;;6044:6:20;;;:14;;6057:1;6044:14;;;-1:-1:-1;6053:1:20;;6037:21;-1:-1:-1;5963:102:20:o;695:211:19:-;826:4;892:7;-1:-1:-1;;;;;849:50:19;:39;859:7;868:3;:5;;;875:3;:5;;;882:3;:5;;;849:39;;;;;;;;;;;;;;;;;22631:25:30;;;22704:4;22692:17;;;;22687:2;22672:18;;22665:45;22741:2;22726:18;;22719:34;22784:2;22769:18;;22762:34;22618:3;22603:19;;22404:398;849:39:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;849:50:19;;842:57;;695:211;;;;;:::o;634:205:9:-;773:58;;-1:-1:-1;;;;;18141:32:30;;773:58:9;;;18123:51:30;18190:18;;;18183:34;;;746:86:9;;766:5;;-1:-1:-1;;;796:23:9;18096:18:30;;773:58:9;17949:274:30;746:86:9;634:205;;;:::o;15144:117:20:-;15227:10;;:14;;15219:35;;;;-1:-1:-1;;;15219:35:20;;9581:2:30;15219:35:20;;;9563:21:30;9620:1;9600:18;;;9593:29;-1:-1:-1;;;9638:18:30;;;9631:38;9686:18;;15219:35:20;9379:331:30;12186:783:20;12355:7;;12332;;12355:12;;12351:51;;-1:-1:-1;12390:1:20;12383:8;;12351:51;12412:14;12429:45;12440:15;12458:7;:15;;;12429:3;:45::i;:::-;12412:62;;12505:7;-1:-1:-1;;;;;12489:23:20;:3;:13;;;-1:-1:-1;;;;;12489:23:20;;12485:62;;;12535:1;12528:8;;;;;12485:62;12581:16;;;;12665:13;;;;12655:7;;12625:136;;12655:23;;;:::i;:::-;12692:3;:13;;;12719:7;12740;:11;;;12625:16;:136::i;:::-;12608:153;;;;:::i;:::-;-1:-1:-1;;;;;12794:15:20;12771:39;:13;;;:39;12839:1;12820:16;;;:20;12850:18;;;:35;;12608:153;;-1:-1:-1;12608:153:20;;12850:35;;12608:153;;12850:35;:::i;:::-;;;-1:-1:-1;;;;;;12896:17:20;;;;;;;;:8;:17;;;;;;;;12914:10;;12896:29;;;;;;;;;;;:35;;;;;;;;;;;;;-1:-1:-1;;12896:35:20;-1:-1:-1;;;;;12896:35:20;;;;;;;;;;;;;;;;;-1:-1:-1;;12896:35:20;;;;;;;;12949:13;12186:783::o;2041:169:0:-;2115:6;;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;;2163:40;;2115:6;;;2131:17;2115:6;;2163:40;;2096:16;;2163:40;2086:124;2041:169;:::o;662:120:17:-;726:5;:15;;-1:-1:-1;;;;;;726:15:17;-1:-1:-1;;;;;726:15:17;;;;;;;;756:19;;;;-1:-1:-1;;756:19:17;662:120;:::o;6764:180:20:-;6850:4;6924:7;:12;;;6913:23;;6914:6;6913:23;;;;:::i;:::-;6892:45;;:7;:17;;;:45;;;;:::i;:::-;-1:-1:-1;;;;;6873:64:20;:15;:64;;;6764:180;-1:-1:-1;;6764:180:20:o;16556:104::-;-1:-1:-1;;;;;16624:18:20;;16616:37;;;;-1:-1:-1;;;16616:37:20;;23446:2:30;16616:37:20;;;23428:21:30;23485:1;23465:18;;;23458:29;-1:-1:-1;;;23503:18:30;;;23496:36;23549:18;;16616:37:20;23244:329:30;845:241:9;1010:68;;-1:-1:-1;;;;;23836:15:30;;;1010:68:9;;;23818:34:30;23888:15;;23868:18;;;23861:43;23920:18;;;23913:34;;;983:96:9;;1003:5;;-1:-1:-1;;;1033:27:9;23753:18:30;;1010:68:9;23578:375:30;3140:706:9;3559:23;3585:69;3613:4;3585:69;;;;;;;;;;;;;;;;;3593:5;-1:-1:-1;;;;;3585:27:9;;;:69;;;;;:::i;:::-;3668:17;;3559:95;;-1:-1:-1;3668:21:9;3664:176;;3763:10;3752:30;;;;;;;;;;;;:::i;:::-;3744:85;;;;-1:-1:-1;;;3744:85:9;;24410:2:30;3744:85:9;;;24392:21:30;24449:2;24429:18;;;24422:30;24488:34;24468:18;;;24461:62;-1:-1:-1;;;24539:18:30;;;24532:40;24589:19;;3744:85:9;24208:406:30;4548:499:10;4713:12;4770:5;4745:21;:30;;4737:81;;;;-1:-1:-1;;;4737:81:10;;24821:2:30;4737:81:10;;;24803:21:30;24860:2;24840:18;;;24833:30;24899:34;24879:18;;;24872:62;-1:-1:-1;;;24950:18:30;;;24943:36;24996:19;;4737:81:10;24619:402:30;4737:81:10;1034:20;;4828:60;;;;-1:-1:-1;;;4828:60:10;;25228:2:30;4828:60:10;;;25210:21:30;25267:2;25247:18;;;25240:30;25306:31;25286:18;;;25279:59;25355:18;;4828:60:10;25026:353:30;4828:60:10;4900:12;4914:23;4941:6;-1:-1:-1;;;;;4941:11:10;4960:5;4967:4;4941:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4899:73;;;;4989:51;5006:7;5015:10;5027:12;7307;7335:7;7331:516;;;-1:-1:-1;7365:10:10;7358:17;;7331:516;7476:17;;:21;7472:365;;7670:10;7664:17;7730:15;7717:10;7713:2;7709:19;7702:44;7472:365;7809:12;7802:20;;-1:-1:-1;;;7802:20:10;;;;;;;;:::i;14:118:30:-;100:5;93:13;86:21;79:5;76:32;66:60;;122:1;119;112:12;137:241;193:6;246:2;234:9;225:7;221:23;217:32;214:52;;;262:1;259;252:12;214:52;301:9;288:23;320:28;342:5;320:28;:::i;383:131::-;-1:-1:-1;;;;;458:31:30;;448:42;;438:70;;504:1;501;494:12;519:121;604:10;597:5;593:22;586:5;583:33;573:61;;630:1;627;620:12;645:386;712:6;720;773:2;761:9;752:7;748:23;744:32;741:52;;;789:1;786;779:12;741:52;828:9;815:23;847:31;872:5;847:31;:::i;:::-;897:5;-1:-1:-1;954:2:30;939:18;;926:32;967;926;967;:::i;:::-;1018:7;1008:17;;;645:386;;;;;:::o;1604:129::-;-1:-1:-1;;;;;1682:5:30;1678:30;1671:5;1668:41;1658:69;;1723:1;1720;1713:12;1738:127;1799:10;1794:3;1790:20;1787:1;1780:31;1830:4;1827:1;1820:15;1854:4;1851:1;1844:15;1870:250;1937:2;1931:9;1979:6;1967:19;;-1:-1:-1;;;;;2001:34:30;;2037:22;;;1998:62;1995:88;;;2063:18;;:::i;:::-;2099:2;2092:22;1870:250;:::o;2125:1083::-;2230:6;2238;2246;2254;2298:9;2289:7;2285:23;2328:3;2324:2;2320:12;2317:32;;;2345:1;2342;2335:12;2317:32;2384:9;2371:23;2403:30;2427:5;2403:30;:::i;:::-;2452:5;-1:-1:-1;2504:2:30;2489:18;;2476:32;;-1:-1:-1;2560:2:30;2545:18;;2532:32;2573;2532;2573;:::i;:::-;2624:7;-1:-1:-1;2665:2:30;-1:-1:-1;;2647:16:30;;2643:25;2640:45;;;2681:1;2678;2671:12;2640:45;;2714:2;2708:9;2756:2;2748:6;2744:15;2825:6;2813:10;2810:22;-1:-1:-1;;;;;2777:10:30;2774:34;2771:62;2768:88;;;2836:18;;:::i;:::-;2872:2;2865:22;2939:2;2924:18;;2911:32;2896:48;;3005:3;2990:19;;2977:33;2972:2;2960:15;;2953:58;3063:3;3048:19;;3035:33;3112:4;3099:18;;3087:31;;3077:59;;3132:1;3129;3122:12;3077:59;3164:2;3152:15;;3145:32;2125:1083;;;;-1:-1:-1;2125:1083:30;;-1:-1:-1;;2125:1083:30:o;3405:521::-;3489:6;3497;3505;3513;3566:3;3554:9;3545:7;3541:23;3537:33;3534:53;;;3583:1;3580;3573:12;3534:53;3619:9;3606:23;3596:33;;3679:2;3668:9;3664:18;3651:32;3692:30;3716:5;3692:30;:::i;:::-;3741:5;-1:-1:-1;3798:2:30;3783:18;;3770:32;3811;3770;3811;:::i;:::-;3405:521;;;;-1:-1:-1;3862:7:30;;3916:2;3901:18;3888:32;;-1:-1:-1;;3405:521:30:o;4113:384::-;4179:6;4187;4240:2;4228:9;4219:7;4215:23;4211:32;4208:52;;;4256:1;4253;4246:12;4208:52;4295:9;4282:23;4314:30;4338:5;4314:30;:::i;4710:247::-;4769:6;4822:2;4810:9;4801:7;4797:23;4793:32;4790:52;;;4838:1;4835;4828:12;4790:52;4877:9;4864:23;4896:31;4921:5;4896:31;:::i;5424:245::-;5482:6;5535:2;5523:9;5514:7;5510:23;5506:32;5503:52;;;5551:1;5548;5541:12;5503:52;5590:9;5577:23;5609:30;5633:5;5609:30;:::i;5674:315::-;5742:6;5750;5803:2;5791:9;5782:7;5778:23;5774:32;5771:52;;;5819:1;5816;5809:12;5771:52;5855:9;5842:23;5832:33;;5915:2;5904:9;5900:18;5887:32;5928:31;5953:5;5928:31;:::i;5994:1069::-;6099:6;6107;6115;6159:9;6150:7;6146:23;6189:3;6185:2;6181:12;6178:32;;;6206:1;6203;6196:12;6178:32;6245:9;6232:23;6264:31;6289:5;6264:31;:::i;:::-;6314:5;-1:-1:-1;6371:2:30;6356:18;;6343:32;6384;6343;6384;:::i;:::-;6435:7;-1:-1:-1;6476:4:30;-1:-1:-1;;6458:16:30;;6454:27;6451:47;;;6494:1;6491;6484:12;6451:47;;6527:2;6521:9;6569:4;6561:6;6557:17;6640:6;6628:10;6625:22;-1:-1:-1;;;;;6592:10:30;6589:34;6586:62;6583:88;;;6651:18;;:::i;:::-;6687:2;6680:22;;;6739:18;;6726:32;6711:48;;6811:2;6796:18;;6783:32;6824;6783;6824;:::i;:::-;6884:2;6872:15;;6865:32;6958:4;6943:20;;6930:34;6925:2;6913:15;;6906:59;7026:3;7011:19;;;6998:33;6993:2;6981:15;;6974:58;-1:-1:-1;5994:1069:30;;;;-1:-1:-1;5994:1069:30:o;7068:117::-;7153:6;7146:5;7142:18;7135:5;7132:29;7122:57;;7175:1;7172;7165:12;7190:384;7256:6;7264;7317:2;7305:9;7296:7;7292:23;7288:32;7285:52;;;7333:1;7330;7323:12;7285:52;7372:9;7359:23;7391:30;7415:5;7391:30;:::i;:::-;7440:5;-1:-1:-1;7497:2:30;7482:18;;7469:32;7510;7469;7510;:::i;7913:127::-;7974:10;7969:3;7965:20;7962:1;7955:31;8005:4;8002:1;7995:15;8029:4;8026:1;8019:15;8045:168;8118:9;;;8149;;8166:15;;;8160:22;;8146:37;8136:71;;8187:18;;:::i;8218:125::-;8283:9;;;8304:10;;;8301:36;;;8317:18;;:::i;8708:127::-;8769:10;8764:3;8760:20;8757:1;8750:31;8800:4;8797:1;8790:15;8824:4;8821:1;8814:15;8840:199;8879:1;-1:-1:-1;;;;;8950:2:30;8947:1;8943:10;8972:3;8962:37;;8979:18;;:::i;:::-;9017:10;;9013:20;;;;;8840:199;-1:-1:-1;;8840:199:30:o;11237:128::-;11304:9;;;11325:11;;;11322:37;;;11339:18;;:::i;11370:183::-;-1:-1:-1;;;;;11489:10:30;;;11477;;;11473:27;;11512:12;;;11509:38;;;11527:18;;:::i;:::-;11509:38;11370:183;;;;:::o;11558:120::-;11598:1;11624;11614:35;;11629:18;;:::i;:::-;-1:-1:-1;11663:9:30;;11558:120::o;11683:329::-;11885:2;11867:21;;;11924:1;11904:18;;;11897:29;-1:-1:-1;;;11957:2:30;11942:18;;11935:36;12003:2;11988:18;;11683:329::o;12349:330::-;12551:2;12533:21;;;12590:1;12570:18;;;12563:29;-1:-1:-1;;;12623:2:30;12608:18;;12601:37;12670:2;12655:18;;12349:330::o;13647:184::-;13717:6;13770:2;13758:9;13749:7;13745:23;13741:32;13738:52;;;13786:1;13783;13776:12;13738:52;-1:-1:-1;13809:16:30;;13647:184;-1:-1:-1;13647:184:30:o;14173:172::-;14240:10;14270;;;14282;;;14266:27;;14305:11;;;14302:37;;;14319:18;;:::i;14350:356::-;14552:2;14534:21;;;14571:18;;;14564:30;14630:34;14625:2;14610:18;;14603:62;14697:2;14682:18;;14350:356::o;16385:175::-;16453:10;16496;;;16484;;;16480:27;;16519:12;;;16516:38;;;16534:18;;:::i;18425:136::-;18503:13;;18525:30;18503:13;18525:30;:::i;:::-;18425:136;;;:::o;18566:250::-;18651:1;18661:113;18675:6;18672:1;18669:13;18661:113;;;18751:11;;;18745:18;18732:11;;;18725:39;18697:2;18690:10;18661:113;;;-1:-1:-1;;18808:1:30;18790:16;;18783:27;18566:250::o;18821:699::-;18875:5;18928:3;18921:4;18913:6;18909:17;18905:27;18895:55;;18946:1;18943;18936:12;18895:55;18975:6;18969:13;-1:-1:-1;;;;;19038:2:30;19034;19031:10;19028:36;;;19044:18;;:::i;:::-;19119:2;19113:9;19087:2;19173:13;;-1:-1:-1;;19169:22:30;;;19193:2;19165:31;19161:40;19149:53;;;19217:18;;;19237:22;;;19214:46;19211:72;;;19263:18;;:::i;:::-;19303:10;19299:2;19292:22;19338:2;19330:6;19323:18;19384:3;19377:4;19372:2;19364:6;19360:15;19356:26;19353:35;19350:55;;;19401:1;19398;19391:12;19350:55;19414:76;19487:2;19480:4;19472:6;19468:17;19461:4;19453:6;19449:17;19414:76;:::i;:::-;19508:6;18821:699;-1:-1:-1;;;;;;18821:699:30:o;19525:138::-;19604:13;;19626:31;19604:13;19626:31;:::i;19668:136::-;19746:13;;19768:30;19746:13;19768:30;:::i;19809:132::-;19885:13;;19907:28;19885:13;19907:28;:::i;19946:170::-;20024:13;;-1:-1:-1;;;;;;20066:25:30;;20056:36;;20046:64;;20106:1;20103;20096:12;20121:192;20200:13;;20253:34;20242:46;;20232:57;;20222:85;;20303:1;20300;20293:12;20318:136;20396:13;;20418:30;20396:13;20418:30;:::i;20459:1555::-;20558:6;20611:2;20599:9;20590:7;20586:23;20582:32;20579:52;;;20627:1;20624;20617:12;20579:52;20660:9;20654:16;-1:-1:-1;;;;;20730:2:30;20722:6;20719:14;20716:34;;;20746:1;20743;20736:12;20716:34;20769:22;;;;20825:6;20807:16;;;20803:29;20800:49;;;20845:1;20842;20835:12;20800:49;20871:17;;:::i;:::-;20911:32;20940:2;20911:32;:::i;:::-;20904:5;20897:47;20983:2;20979;20975:11;20969:18;21012:2;21002:8;20999:16;20996:36;;;21028:1;21025;21018:12;20996:36;21064:56;21112:7;21101:8;21097:2;21093:17;21064:56;:::i;:::-;21059:2;21052:5;21048:14;21041:80;;21153:42;21191:2;21187;21183:11;21153:42;:::i;:::-;21148:2;21141:5;21137:14;21130:66;21228:41;21265:2;21261;21257:11;21228:41;:::i;:::-;21223:2;21216:5;21212:14;21205:65;21317:3;21313:2;21309:12;21303:19;21297:3;21290:5;21286:15;21279:44;21356:40;21391:3;21387:2;21383:12;21356:40;:::i;:::-;21350:3;21343:5;21339:15;21332:65;21430:42;21467:3;21463:2;21459:12;21430:42;:::i;:::-;21424:3;21417:5;21413:15;21406:67;21506:42;21543:3;21539:2;21535:12;21506:42;:::i;:::-;21500:3;21493:5;21489:15;21482:67;21568:3;21558:13;;21603:42;21641:2;21637;21633:11;21603:42;:::i;:::-;21587:14;;;21580:66;;;;21665:3;21706:11;;;21700:18;21684:14;;;21677:42;21738:3;21779:11;;;21773:18;21757:14;;;21750:42;21811:3;;21846:41;21875:11;;;21846:41;:::i;:::-;21841:2;21834:5;21830:14;21823:65;21907:3;21897:13;;21942:41;21979:2;21975;21971:11;21942:41;:::i;:::-;21926:14;;;21919:65;;;;21930:5;20459:1555;-1:-1:-1;;;;20459:1555:30:o;22807:247::-;22878:8;22918:10;;;22930;;;22914:27;22961:20;;;;22878:8;23000:24;;;22990:58;;23028:18;;:::i;:::-;22990:58;;22807:247;;;;:::o;23059:180::-;-1:-1:-1;;;;;23164:10:30;;;23176;;;23160:27;;23199:11;;;23196:37;;;23213:18;;:::i;23958:245::-;24025:6;24078:2;24066:9;24057:7;24053:23;24049:32;24046:52;;;24094:1;24091;24084:12;24046:52;24126:9;24120:16;24145:28;24167:5;24145:28;:::i;25384:287::-;25513:3;25551:6;25545:13;25567:66;25626:6;25621:3;25614:4;25606:6;25602:17;25567:66;:::i;:::-;25649:16;;;;;25384:287;-1:-1:-1;;25384:287:30:o;25676:396::-;25825:2;25814:9;25807:21;25788:4;25857:6;25851:13;25900:6;25895:2;25884:9;25880:18;25873:34;25916:79;25988:6;25983:2;25972:9;25968:18;25963:2;25955:6;25951:15;25916:79;:::i;:::-;26056:2;26035:15;-1:-1:-1;;26031:29:30;26016:45;;;;26063:2;26012:54;;25676:396;-1:-1:-1;;25676:396:30:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "calculateRewards(uint256,uint64,uint64,uint256)": {
        "details": "function to calculate rewards,      rewards is progressive to 12% per year.",
        "params": {
          "_amount": "amount of stable coin.",
          "_endTime": "time when staking ended.",
          "_startTime": "time when staking started."
        },
        "returns": {
          "rewards": "amount of rewards"
        }
      },
      "collectRewards(uint32,uint16)": {
        "notice": "This function allows the user to collect rewards from staking and holding tokens in a given project. It takes in two parameters: 'projectId' and 'rewardType'. It first checks to make sure staking is not paused and that a valid type of reward is specified. Afterward, it checks that the project status is active and then collects rewards. If the reward type indicates staking rewards, it calculates the rewards earned, updates the stake information and starts a new stake period. Afterwards, it transfers the collected rewards to the user and emits the CollectRewards event.",
        "params": {
          "projectId": "The ID of the project to collect rewards from.",
          "rewardType": "{uint16} The type of reward to collect. Can be                   REWARD_TYPE_HOLDING, REWARD_TYPE_STAKING or both."
        },
        "returns": {
          "_0": "{bool} Boolean indicating success."
        }
      },
      "collectRewardsBy(uint32,uint256,uint64,(bytes32,bytes32,uint8))": {
        "details": "Function to collect specific amount of rewards from project manually,      rewards is calculated off-chain and need authorization signature to proceed.      This procedure can work in paused state (for emergency purpose).",
        "params": {
          "amount": "the amount of rewards to collect.",
          "nonce": "the nonce of the signature.",
          "projectId": "the ID of project.",
          "sig": "the signature to authorize the transaction."
        }
      },
      "getHoldingInfo(address,uint32)": {
        "details": "get holding information on project of user"
      },
      "getStakingInfo(address,uint32)": {
        "details": "get user stake info."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause(bool)": {
        "notice": "This function is used to pause or unpause contract. Only the owner of the contract or the project manager contract can call this function.",
        "params": {
          "_paused": "A boolean indicating whether should be paused or not."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawTo(uint256,address)": {
        "details": "Withdraw amount of deposit from this contract to `to` address.      Caller of this function must be owner.",
        "params": {
          "amount": "to withdraw.",
          "to": "address to withdraw to."
        }
      }
    },
    "version": 1
  },
  "offset": [
    1777,
    17666
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9DEA67E3 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xD7526FFA GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD7526FFA EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0xDDB93B1A EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0xFD93238A EQ PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9DEA67E3 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0xAEAED1B7 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0xB4BBF4AF EQ PUSH2 0x2D7 JUMPI DUP1 PUSH4 0xC86283C8 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0xCCFCD622 EQ PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6792A95B GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x6792A95B EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x947E89C8 EQ PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2329A29 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x8BC92D2 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x13F91252 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x45305AB8 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1FB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x2615 JUMP JUMPDEST PUSH2 0x413 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x159 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AE SWAP2 SWAP1 PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH4 0xFFFFFFFF DUP1 DUP5 MLOAD AND DUP4 MSTORE DUP1 PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x40 DUP5 ADD MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x26E6 JUMP JUMPDEST PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AE JUMP JUMPDEST PUSH2 0x1ED PUSH2 0x1E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x278E JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x1CA SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x27D6 JUMP JUMPDEST PUSH2 0xB86 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x1060 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1AE JUMP JUMPDEST PUSH2 0x144 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x27F4 JUMP JUMPDEST PUSH2 0x1096 JUMP JUMPDEST PUSH2 0x275 PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AE SWAP2 SWAP1 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x2BF CALLDATASIZE PUSH1 0x4 PUSH2 0x27F4 JUMP JUMPDEST PUSH2 0x1169 JUMP JUMPDEST PUSH2 0x275 PUSH2 0x2D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x121F JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2811 JUMP JUMPDEST PUSH2 0x1330 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x282E JUMP JUMPDEST PUSH2 0x134E JUMP JUMPDEST PUSH2 0x144 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x2853 JUMP JUMPDEST PUSH2 0x14B8 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x27D6 JUMP JUMPDEST PUSH2 0x1570 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x2659 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF SWAP5 DUP6 AND DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP7 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV SWAP1 SWAP6 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP4 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x3E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x27F4 JUMP JUMPDEST PUSH2 0x1952 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x237 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1CA PUSH2 0x40E CALLDATASIZE PUSH1 0x4 PUSH2 0x2905 JUMP JUMPDEST PUSH2 0x19EA JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x436 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x470 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x10B7BBB732B9 PUSH1 0xD1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP7 DUP2 AND DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP5 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV SWAP1 SWAP4 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x2 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE SWAP1 PUSH2 0x539 DUP5 PUSH2 0x1F65 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x54C TIMESTAMP DUP4 PUSH2 0x180 ADD MLOAD PUSH2 0x2040 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x577 JUMPI DUP3 SWAP4 POP POP POP POP PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD DUP4 MLOAD PUSH2 0x5A2 SWAP2 PUSH2 0x591 SWAP2 PUSH4 0xFFFFFFFF AND PUSH2 0x2949 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD DUP4 DUP6 PUSH2 0x140 ADD MLOAD PUSH2 0xB26 JUMP JUMPDEST DUP4 PUSH1 0x60 ADD DUP2 DUP2 MLOAD PUSH2 0x5B3 SWAP2 SWAP1 PUSH2 0x2960 JUMP JUMPDEST SWAP1 MSTORE POP SWAP2 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x626 PUSH1 0x3C TIMESTAMP PUSH2 0x2989 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x671 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x78206E6F6E6365 PUSH1 0xC8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x78206E6F6E6365 PUSH1 0xC8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6CF DUP7 PUSH2 0x1F65 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF AND PUSH1 0x0 SUB PUSH2 0x714 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x85C1C9BDA9958DD PUSH1 0xC2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP12 DUP2 AND DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP5 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP3 DIV SWAP1 SWAP5 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP5 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 SUB PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x217374616B65722E717479 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xE0 DUP10 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP4 DUP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x38 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xC0 DUP9 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH1 0x58 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 PUSH2 0x87D SWAP2 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH2 0x897 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP9 PUSH2 0x2069 JUMP JUMPDEST PUSH2 0x8D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x78207369676E6174757265 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x180 DUP7 ADD MLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x90D SWAP1 TIMESTAMP SWAP1 PUSH2 0x2040 JUMP JUMPDEST SWAP1 POP PUSH2 0x93D DUP7 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x92C SWAP2 SWAP1 PUSH2 0x2949 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD DUP4 DUP10 PUSH2 0x140 ADD MLOAD PUSH2 0xB26 JUMP JUMPDEST PUSH2 0x947 SWAP1 DUP4 PUSH2 0x2960 JUMP JUMPDEST SWAP2 POP DUP2 DUP11 GT ISZERO PUSH2 0x984 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x1E08185B5BDD5B9D PUSH1 0xC2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x99D DUP11 DUP4 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD DUP1 MLOAD DUP12 SWAP2 SWAP1 PUSH2 0x9B6 SWAP1 DUP4 SWAP1 PUSH2 0x2960 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 MSTORE POP POP DUP4 PUSH1 0x5 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP14 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE SWAP1 POP POP PUSH2 0xAC5 DUP6 DUP12 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x20FC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 PUSH4 0xFFFFFFFF AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x9BF028F26713DBFD10F1790F08EE2C2DF9A1D82C0F238230BB0B64AF2AAB4A9E DUP13 PUSH1 0x40 MLOAD PUSH2 0xB07 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH1 0x1 PUSH1 0x0 SSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x15180 PUSH2 0xB37 DUP7 DUP7 PUSH2 0x29C2 JUMP JUMPDEST PUSH2 0xB41 SWAP2 SWAP1 PUSH2 0x2989 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xB4F DUP5 DUP9 PUSH2 0x2949 JUMP JUMPDEST SWAP1 POP PUSH2 0x16D PUSH2 0xB64 PUSH4 0xFFFFFFFF DUP5 AND DUP4 PUSH2 0x2949 JUMP JUMPDEST PUSH2 0xB6E SWAP2 SWAP1 PUSH2 0x29E9 JUMP JUMPDEST SWAP3 POP PUSH2 0xB7B PUSH1 0x64 DUP5 PUSH2 0x29E9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xBB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x29FD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0xBF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH4 0x21717479 PUSH1 0xE0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0xBFE DUP6 PUSH2 0x1F65 JUMP JUMPDEST SWAP1 POP PUSH2 0xC09 DUP2 PUSH2 0x2131 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xF8 SHL EQ PUSH2 0xC3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x2A1D JUMP JUMPDEST TIMESTAMP DUP2 PUSH2 0x160 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0xC81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x85CDD185C9D PUSH1 0xD2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST TIMESTAMP DUP2 PUSH2 0x180 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x8595B991959 PUSH1 0xD2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH3 0x7EEAC7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP9 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE DUP8 AND SWAP3 AND SWAP1 PUSH3 0xFDD58E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD1D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD41 SWAP2 SWAP1 PUSH2 0x2A3E JUMP JUMPDEST LT ISZERO PUSH2 0xD7B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x18985B185B98D9480F PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP1 DUP12 AND DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP5 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV DUP5 AND DUP3 DUP8 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV DUP2 AND DUP3 DUP7 ADD MSTORE PUSH1 0x1 DUP1 DUP5 ADD SLOAD PUSH1 0x60 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP5 DUP6 ADD SLOAD PUSH1 0x80 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP10 DUP10 MSTORE PUSH1 0x7 DUP9 MSTORE DUP7 DUP10 KECCAK256 DUP12 MLOAD SWAP1 SWAP7 AND DUP10 MSTORE SWAP5 DUP8 MSTORE DUP6 DUP9 KECCAK256 DUP7 MLOAD SWAP10 DUP11 ADD DUP8 MSTORE DUP1 SLOAD DUP11 MSTORE SWAP1 DUP2 ADD SLOAD SWAP1 SWAP2 AND SWAP6 DUP9 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP1 DUP5 ADD SLOAD SWAP3 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 PUSH2 0xE4B DUP6 DUP6 DUP5 PUSH2 0x2170 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xEB5 JUMPI PUSH1 0x4 SLOAD PUSH2 0xE6A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP4 PUSH2 0x20FC JUMP JUMPDEST DUP8 PUSH4 0xFFFFFFFF AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x9BF028F26713DBFD10F1790F08EE2C2DF9A1D82C0F238230BB0B64AF2AAB4A9E DUP4 PUSH1 0x40 MLOAD PUSH2 0xEAC SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST PUSH1 0x0 PUSH2 0xEC6 TIMESTAMP DUP7 PUSH2 0x180 ADD MLOAD PUSH2 0x2040 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xEF4 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT JUMPDEST ISZERO PUSH2 0xF39 JUMPI PUSH1 0x80 DUP6 ADD MLOAD DUP5 MLOAD PUSH2 0xF24 SWAP2 PUSH2 0xF13 SWAP2 PUSH4 0xFFFFFFFF AND PUSH2 0x2949 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD DUP4 DUP9 PUSH2 0x140 ADD MLOAD PUSH2 0xB26 JUMP JUMPDEST DUP5 PUSH1 0x60 ADD DUP2 DUP2 MLOAD PUSH2 0xF35 SWAP2 SWAP1 PUSH2 0x2960 JUMP JUMPDEST SWAP1 MSTORE POP JUMPDEST DUP8 DUP5 PUSH1 0x0 ADD DUP2 DUP2 MLOAD PUSH2 0xF4B SWAP2 SWAP1 PUSH2 0x2A57 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0x40 DUP8 ADD MSTORE DUP5 MLOAD SWAP1 DUP11 AND SWAP2 POP DUP5 SWAP1 PUSH2 0xF79 SWAP1 DUP4 SWAP1 PUSH2 0x29AF JUMP JUMPDEST SWAP1 MSTORE POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF SWAP11 DUP12 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 MLOAD DUP2 SLOAD DUP8 DUP6 ADD MLOAD DUP9 DUP6 ADD MLOAD SWAP3 DUP15 AND PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP3 DUP4 AND OR PUSH1 0x1 PUSH1 0x20 SHL SWAP2 DUP16 AND SWAP2 SWAP1 SWAP2 MUL OR PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP4 DUP5 AND MUL OR DUP4 SSTORE PUSH1 0x60 DUP1 DUP10 ADD MLOAD PUSH1 0x1 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x80 SWAP1 SWAP10 ADD MLOAD PUSH1 0x2 SWAP5 DUP6 ADD SSTORE SWAP7 DUP7 MSTORE PUSH1 0x7 DUP6 MSTORE DUP4 DUP7 KECCAK256 SWAP9 MLOAD SWAP1 SWAP13 AND DUP6 MSTORE SWAP7 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP8 MLOAD DUP2 SSTORE SWAP2 DUP8 ADD MLOAD DUP3 DUP7 ADD DUP1 SLOAD SWAP1 SWAP12 AND SWAP7 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP9 SSTORE SWAP3 DUP5 ADD MLOAD SWAP3 DUP8 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 ADD MLOAD PUSH1 0x3 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x108A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x1094 PUSH1 0x0 PUSH2 0x2291 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x10C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x10C9 DUP2 PUSH2 0x22E3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1100 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP6 AND DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SWAP1 SWAP2 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x11AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x1C1B481CD95D PUSH1 0xD2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ORIGIN EQ PUSH2 0x11EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x10B7BBB732B9 PUSH1 0xD1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 SLOAD PUSH2 0x10C9 SWAP2 AND DUP3 PUSH1 0x0 NOT PUSH2 0x1E63 JUMP JUMPDEST PUSH2 0x1253 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP7 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP1 PUSH2 0x12BC DUP5 PUSH2 0x1F65 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x12CF TIMESTAMP DUP4 PUSH2 0x180 ADD MLOAD PUSH2 0x2040 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x12FA JUMPI DUP3 SWAP4 POP POP POP POP PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD DUP4 MLOAD PUSH2 0x131F SWAP2 PUSH2 0x130E SWAP2 PUSH2 0x2949 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD DUP4 DUP6 PUSH2 0x120 ADD MLOAD PUSH2 0xB26 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD DUP2 DUP2 MLOAD PUSH2 0x5B3 SWAP2 SWAP1 PUSH2 0x2960 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x133C DUP4 PUSH2 0x1F65 JUMP JUMPDEST SWAP1 POP PUSH2 0x1347 DUP2 PUSH2 0x232D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1378 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x1381 DUP2 PUSH2 0x236D JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x13BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x8585B5BDD5B9D PUSH1 0xCA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1408 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x142C SWAP2 SWAP1 PUSH2 0x2A3E JUMP JUMPDEST LT ISZERO PUSH2 0x1466 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x18985B185B98D9480F PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x147E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS DUP4 DUP6 PUSH2 0x23AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x8777844761EB456B028CF7F87FC8DCB146AD8EEAFBC6F80F2D006E5CD9E5A745 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1500 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x10B83937B532B1BA26B0B7 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x159D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x29FD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND GT PUSH2 0x15DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH4 0x21717479 PUSH1 0xE0 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x15E8 DUP6 PUSH2 0x1F65 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xF8 SHL EQ PUSH2 0x161C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x2A1D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP10 DUP2 AND DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP5 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP3 DIV SWAP1 SWAP5 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP5 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 SUB PUSH2 0x16D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x217374616B65722E717479 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF DUP1 DUP8 AND SWAP2 AND LT ISZERO PUSH2 0x1714 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x38BA3C901F PUSH1 0xD9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH2 0x171D DUP3 PUSH2 0x232D JUMP JUMPDEST PUSH2 0x1752 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP1 DUP3 ADD MSTORE PUSH4 0x8595B99 PUSH1 0xE2 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1763 TIMESTAMP DUP5 PUSH2 0x180 ADD MLOAD PUSH2 0x2040 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x17C3 JUMPI PUSH1 0x80 DUP4 ADD MLOAD DUP3 MLOAD PUSH2 0x17AE SWAP2 PUSH2 0x179D SWAP2 PUSH4 0xFFFFFFFF AND PUSH2 0x2949 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP4 DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0xB26 JUMP JUMPDEST DUP3 PUSH1 0x60 ADD DUP2 DUP2 MLOAD PUSH2 0x17BF SWAP2 SWAP1 PUSH2 0x2960 JUMP JUMPDEST SWAP1 MSTORE POP JUMPDEST DUP6 DUP3 PUSH1 0x0 ADD DUP2 DUP2 MLOAD PUSH2 0x17D5 SWAP2 SWAP1 PUSH2 0x2AA9 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP DUP2 AND PUSH1 0x40 DUP1 DUP8 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP3 KECCAK256 DUP16 DUP9 AND DUP4 MSTORE DUP2 MSTORE DUP4 DUP3 KECCAK256 DUP11 MLOAD DUP2 SLOAD DUP4 DUP14 ADD MLOAD SWAP8 MLOAD DUP10 AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT SWAP9 DUP12 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND SWAP3 DUP12 AND SWAP3 SWAP1 SWAP3 OR OR SWAP7 SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR DUP6 SSTORE PUSH1 0x60 DUP1 DUP12 ADD MLOAD PUSH1 0x1 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x80 DUP1 DUP14 ADD MLOAD PUSH1 0x2 SWAP9 DUP10 ADD SSTORE SWAP5 DUP5 MSTORE PUSH1 0x7 DUP4 MSTORE DUP6 DUP5 KECCAK256 DUP14 MLOAD DUP11 AND DUP6 MSTORE DUP4 MSTORE SWAP3 DUP6 SWAP1 KECCAK256 DUP6 MLOAD SWAP5 DUP6 ADD DUP7 MSTORE DUP1 SLOAD DUP1 DUP7 MSTORE SWAP4 DUP2 ADD SLOAD SWAP1 SWAP8 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 DUP6 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP SWAP1 DUP9 AND SWAP1 DUP3 SWAP1 PUSH2 0x18D4 SWAP1 DUP4 SWAP1 PUSH2 0x2960 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 MLOAD PUSH4 0xFFFFFFFF AND DUP4 MSTORE SWAP5 DUP2 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP1 DUP6 ADD MLOAD PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP4 DUP6 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 SWAP1 SWAP5 ADD MLOAD PUSH1 0x3 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x197C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x19E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x467 JUMP JUMPDEST PUSH2 0x10C9 DUP2 PUSH2 0x2291 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x1A3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1A6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x29FD JUMP JUMPDEST PUSH1 0x1 DUP3 AND ISZERO ISZERO DUP1 PUSH2 0x1A80 JUMPI POP PUSH1 0x2 DUP3 AND ISZERO ISZERO JUMPDEST PUSH2 0x1AB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x2174797065 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1AC0 DUP6 PUSH2 0x1F65 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xF8 SHL EQ PUSH2 0x1AF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP1 PUSH2 0x2A1D JUMP JUMPDEST TIMESTAMP DUP2 PUSH2 0x160 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x1B3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x85CDD185C9D PUSH1 0xD2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP10 DUP2 AND DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP5 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SHL DUP2 DIV SWAP1 SWAP4 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP1 DUP3 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP7 AND ISZERO PUSH2 0x1C30 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 MLOAD PUSH4 0xFFFFFFFF AND DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x80 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 SWAP1 SWAP2 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1C2C DUP6 DUP6 DUP4 PUSH2 0x2170 JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x2 DUP7 AND ISZERO PUSH2 0x1DDB JUMPI DUP2 MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1C77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x7 PUSH1 0x24 DUP3 ADD MSTORE PUSH7 0x85CDD185AD959 PUSH1 0xCA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C88 TIMESTAMP DUP6 PUSH2 0x180 ADD MLOAD PUSH2 0x2040 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x1CB6 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x1E58 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD DUP5 MLOAD PUSH2 0x1CE6 SWAP2 PUSH2 0x1CD5 SWAP2 PUSH4 0xFFFFFFFF AND PUSH2 0x2949 JUMP JUMPDEST DUP6 PUSH1 0x40 ADD MLOAD DUP5 DUP9 PUSH2 0x140 ADD MLOAD PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD DUP1 MLOAD SWAP2 SWAP3 POP DUP3 SWAP2 PUSH2 0x1D12 SWAP1 DUP4 SWAP1 PUSH2 0x2960 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH4 0xFFFFFFFF DUP15 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP11 MLOAD DUP2 SLOAD DUP13 DUP8 ADD MLOAD DUP14 DUP8 ADD MLOAD SWAP3 DUP6 AND PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP3 DUP4 AND OR PUSH1 0x1 PUSH1 0x20 SHL SWAP2 SWAP1 SWAP6 AND MUL SWAP4 SWAP1 SWAP4 OR PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP3 MUL OR DUP3 SSTORE PUSH1 0x60 DUP13 ADD MLOAD PUSH1 0x1 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x80 DUP14 ADD MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP7 DUP7 MSTORE PUSH1 0x7 DUP6 MSTORE DUP4 DUP7 KECCAK256 SWAP3 DUP7 MSTORE SWAP2 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1DD6 DUP2 DUP5 PUSH2 0x2960 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x1E4F JUMPI PUSH1 0x4 SLOAD PUSH2 0x1DF8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP4 PUSH2 0x20FC JUMP JUMPDEST DUP7 PUSH4 0xFFFFFFFF AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x9BF028F26713DBFD10F1790F08EE2C2DF9A1D82C0F238230BB0B64AF2AAB4A9E DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E3A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP5 POP POP POP POP POP PUSH2 0x1E58 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 DUP4 SWAP2 DUP7 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1ED8 SWAP2 SWAP1 PUSH2 0x2A3E JUMP JUMPDEST PUSH2 0x1EE2 SWAP2 SWAP1 PUSH2 0x2960 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH2 0x1F48 SWAP1 DUP6 SWAP1 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x23E4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1F5D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x24B6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 DUP5 ADD DUP3 SWAP1 MSTORE DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD MSTORE PUSH1 0x3 SLOAD SWAP2 MLOAD PUSH4 0x8206D49F PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x8206D49F SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2018 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5BC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2BE5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x2062 JUMPI DUP2 PUSH2 0x1347 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x20BD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x212C SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x1F11 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x10C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x85C1C9BDA9958DD PUSH1 0xC2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 SUB PUSH2 0x2183 JUMPI POP PUSH1 0x0 PUSH2 0x1347 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2194 TIMESTAMP DUP6 PUSH2 0x180 ADD MLOAD PUSH2 0x2040 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x21BE JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1347 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD DUP5 MLOAD PUSH2 0x21E8 SWAP2 PUSH2 0x21D7 SWAP2 PUSH2 0x2949 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD DUP5 DUP9 PUSH2 0x120 ADD MLOAD PUSH2 0xB26 JUMP JUMPDEST PUSH2 0x21F2 SWAP1 DUP3 PUSH2 0x2960 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD DUP1 MLOAD SWAP2 SWAP3 POP DUP3 SWAP2 PUSH2 0x221E SWAP1 DUP4 SWAP1 PUSH2 0x2960 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 MLOAD PUSH4 0xFFFFFFFF AND DUP4 MSTORE SWAP6 DUP2 MSTORE SWAP1 DUP6 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP1 DUP5 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP4 DUP4 ADD MLOAD PUSH1 0x2 DUP6 ADD SSTORE POP POP PUSH1 0x60 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x7CE7EC0B50378FB6C0186FFB5F48325F6593FCB4CA4386F21861AF3129188F5C SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xE0 ADD MLOAD PUSH2 0xFFFF AND PUSH3 0x15180 PUSH2 0x2346 SWAP2 SWAP1 PUSH2 0x2D18 JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP3 PUSH2 0x160 ADD MLOAD PUSH2 0x235B SWAP2 SWAP1 PUSH2 0x2D3F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND TIMESTAMP LT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x3C1030B23239 PUSH1 0xD1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1F48 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x1F11 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2439 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1F4E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x212C JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2457 SWAP2 SWAP1 PUSH2 0x2D5F JUMP JUMPDEST PUSH2 0x212C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2517 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x467 JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x2565 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x467 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2581 SWAP2 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x25BE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x25C3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xB7B DUP3 DUP3 DUP7 PUSH1 0x60 DUP4 ISZERO PUSH2 0x25DD JUMPI POP DUP2 PUSH2 0x1347 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x25ED JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x467 SWAP2 SWAP1 PUSH2 0x2D98 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x10C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1347 DUP2 PUSH2 0x2607 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x10C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x266C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2677 DUP2 PUSH2 0x2632 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2687 DUP2 PUSH2 0x2647 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x26E0 JUMPI PUSH2 0x26E0 PUSH2 0x26A7 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x26FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2708 DUP2 PUSH2 0x2647 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x271F DUP2 PUSH2 0x2692 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH1 0x5F NOT DUP3 ADD SLT ISZERO PUSH2 0x2733 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x2756 JUMPI PUSH2 0x2756 PUSH2 0x26A7 JUMP JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x60 DUP7 ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 DUP7 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x277E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x27B6 DUP2 PUSH2 0x2692 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x27C6 DUP2 PUSH2 0x2692 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2677 DUP2 PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1347 DUP2 PUSH2 0x2632 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1347 DUP2 PUSH2 0x2647 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2841 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2687 DUP2 PUSH2 0x2632 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x2869 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2874 DUP2 PUSH2 0x2632 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2884 DUP2 PUSH2 0x2647 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 PUSH1 0x3F NOT DUP3 ADD SLT ISZERO PUSH2 0x2898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x28BB JUMPI PUSH2 0x28BB PUSH2 0x26A7 JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MSTORE DUP6 ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x28D3 DUP2 PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP5 ADD CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE POP SWAP1 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x10C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2923 DUP2 PUSH2 0x2647 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2687 DUP2 PUSH2 0x28F5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x5BC JUMPI PUSH2 0x5BC PUSH2 0x2933 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5BC JUMPI PUSH2 0x5BC PUSH2 0x2933 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 AND DUP1 PUSH2 0x29A3 JUMPI PUSH2 0x29A3 PUSH2 0x2973 JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 DIV SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x5BC JUMPI PUSH2 0x5BC PUSH2 0x2933 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29E2 JUMPI PUSH2 0x29E2 PUSH2 0x2933 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x29F8 JUMPI PUSH2 0x29F8 PUSH2 0x2973 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x6 SWAP1 DUP3 ADD MSTORE PUSH6 0x1C185D5CD959 PUSH1 0xD2 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x7 SWAP1 DUP3 ADD MSTORE PUSH7 0x21616374697665 PUSH1 0xC8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29E2 JUMPI PUSH2 0x29E2 PUSH2 0x2933 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29E2 JUMPI PUSH2 0x29E2 PUSH2 0x2933 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2AD1 DUP2 PUSH2 0x2647 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2AF1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2AD9 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2B0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2B25 JUMPI PUSH2 0x2B25 PUSH2 0x26A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2B4D JUMPI PUSH2 0x2B4D PUSH2 0x26A7 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x2B66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B77 DUP5 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x2AD6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2AD1 DUP2 PUSH2 0x2632 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2AD1 DUP2 PUSH2 0x28F5 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2AD1 DUP2 PUSH2 0x2607 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2AD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2AD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x2AD1 DUP2 PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x1A0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x2C23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C2B PUSH2 0x26BD JUMP JUMPDEST PUSH2 0x2C34 DUP4 PUSH2 0x2AC6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x2C48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C54 DUP8 DUP3 DUP7 ADD PUSH2 0x2AFA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH2 0x2C66 PUSH1 0x40 DUP5 ADD PUSH2 0x2B81 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x2C77 PUSH1 0x60 DUP5 ADD PUSH2 0x2B8C JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x2C92 PUSH1 0xA0 DUP5 ADD PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x2CA3 PUSH1 0xC0 DUP5 ADD PUSH2 0x2BA2 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x2CB4 PUSH1 0xE0 DUP5 ADD PUSH2 0x2B8C JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x2CC9 DUP3 DUP5 ADD PUSH2 0x2BBA JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x120 DUP3 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x160 SWAP1 PUSH2 0x2CF5 DUP3 DUP5 ADD PUSH2 0x2BDA JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x2D09 DUP3 DUP5 ADD PUSH2 0x2BDA JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH3 0xFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND MUL DUP1 DUP3 AND SWAP2 SWAP1 DUP3 DUP2 EQ PUSH2 0x2D37 JUMPI PUSH2 0x2D37 PUSH2 0x2933 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29E2 JUMPI PUSH2 0x29E2 PUSH2 0x2933 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1347 DUP2 PUSH2 0x2607 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2D8E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2AD6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2DB7 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2AD6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xD5 EXTCODEHASH 0xF7 0x2E 0xB0 0xB1 PUSH29 0x2E880B1308E4E8001EA52CC8FDBBFB3DD314330EBB09309A64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "CALLVALUE",
      "path": "20"
    },
    "6": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "8": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "12": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "REVERT",
      "path": "20"
    },
    "16": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "17": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "POP",
      "path": "20"
    },
    "18": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "21": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "LT",
      "path": "20"
    },
    "22": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x12C"
    },
    "25": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "26": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "CALLDATALOAD",
      "path": "20"
    },
    "29": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "SHR",
      "path": "20"
    },
    "32": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "33": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x9DEA67E3"
    },
    "38": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "GT",
      "path": "20"
    },
    "39": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xAD"
    },
    "42": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "43": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "44": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xD7526FFA"
    },
    "49": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "GT",
      "path": "20"
    },
    "50": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "54": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "55": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xD7526FFA"
    },
    "60": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "61": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x310"
    },
    "64": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "65": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "66": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xDDB93B1A"
    },
    "71": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "72": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x323"
    },
    "75": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "76": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "77": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xF2FDE38B"
    },
    "82": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "83": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x3DA"
    },
    "86": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "87": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "88": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xF851A440"
    },
    "93": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "94": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x3ED"
    },
    "97": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "98": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "99": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFD93238A"
    },
    "104": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "105": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x400"
    },
    "108": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "109": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "112": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "REVERT",
      "path": "20"
    },
    "113": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "114": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "115": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x9DEA67E3"
    },
    "120": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "121": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2B1"
    },
    "124": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "125": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "126": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xAEAED1B7"
    },
    "131": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "132": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2C4"
    },
    "135": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "136": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "137": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xB4BBF4AF"
    },
    "142": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "143": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2D7"
    },
    "146": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "147": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "148": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xC86283C8"
    },
    "153": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "154": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2EA"
    },
    "157": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "158": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "159": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xCCFCD622"
    },
    "164": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "165": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2FD"
    },
    "168": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "169": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "171": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "172": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "REVERT",
      "path": "20"
    },
    "173": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "174": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "175": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x6792A95B"
    },
    "180": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "GT",
      "path": "20"
    },
    "181": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xF4"
    },
    "184": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "185": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "186": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x6792A95B"
    },
    "191": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "192": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x20F"
    },
    "195": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "196": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "197": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x715018A6"
    },
    "202": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "203": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x222"
    },
    "206": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "207": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "208": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x8DA5CB5B"
    },
    "213": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "214": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x22A"
    },
    "217": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "218": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "219": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x8F283970"
    },
    "224": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "225": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x24F"
    },
    "228": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "229": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "230": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x947E89C8"
    },
    "235": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "236": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x262"
    },
    "239": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "240": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "242": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "243": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "REVERT",
      "path": "20"
    },
    "244": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "245": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "246": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x2329A29"
    },
    "251": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "252": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x131"
    },
    "255": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "256": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "257": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x8BC92D2"
    },
    "262": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "263": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x146"
    },
    "266": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "267": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "268": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x13F91252"
    },
    "273": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "274": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1B7"
    },
    "277": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "278": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "279": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x45305AB8"
    },
    "284": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "285": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1DA"
    },
    "288": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "289": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "290": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x5C975ABB"
    },
    "295": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "EQ",
      "path": "20"
    },
    "296": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1FB"
    },
    "299": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "300": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "301": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "303": {
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "DUP1",
      "path": "20"
    },
    "304": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1777,
        17666
      ],
      "op": "REVERT",
      "path": "20"
    },
    "305": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "306": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x144"
    },
    "309": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x13F"
    },
    "312": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "313": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "315": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2615"
    },
    "318": {
      "fn": "Staker.pause",
      "jump": "i",
      "offset": [
        17468,
        17664
      ],
      "op": "JUMP",
      "path": "20"
    },
    "319": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "320": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x413"
    },
    "323": {
      "fn": "Staker.pause",
      "jump": "i",
      "offset": [
        17468,
        17664
      ],
      "op": "JUMP",
      "path": "20"
    },
    "324": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "325": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "STOP",
      "path": "20"
    },
    "326": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "327": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x159"
    },
    "330": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x154"
    },
    "333": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "334": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "336": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2659"
    },
    "339": {
      "fn": "Staker.getStakingInfo",
      "jump": "i",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMP",
      "path": "20"
    },
    "340": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "341": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x48E"
    },
    "344": {
      "fn": "Staker.getStakingInfo",
      "jump": "i",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMP",
      "path": "20"
    },
    "345": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "346": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "348": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "349": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1AE"
    },
    "352": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "353": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "354": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "356": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "358": {
      "op": "DUP3"
    },
    "359": {
      "op": "ADD"
    },
    "360": {
      "op": "SWAP1"
    },
    "361": {
      "op": "POP"
    },
    "362": {
      "op": "PUSH4",
      "value": "0xFFFFFFFF"
    },
    "367": {
      "op": "DUP1"
    },
    "368": {
      "op": "DUP5"
    },
    "369": {
      "op": "MLOAD"
    },
    "370": {
      "op": "AND"
    },
    "371": {
      "op": "DUP4"
    },
    "372": {
      "op": "MSTORE"
    },
    "373": {
      "op": "DUP1"
    },
    "374": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "376": {
      "op": "DUP6"
    },
    "377": {
      "op": "ADD"
    },
    "378": {
      "op": "MLOAD"
    },
    "379": {
      "op": "AND"
    },
    "380": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "382": {
      "op": "DUP5"
    },
    "383": {
      "op": "ADD"
    },
    "384": {
      "op": "MSTORE"
    },
    "385": {
      "op": "POP"
    },
    "386": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "388": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "390": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "392": {
      "op": "SHL"
    },
    "393": {
      "op": "SUB"
    },
    "394": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "396": {
      "op": "DUP5"
    },
    "397": {
      "op": "ADD"
    },
    "398": {
      "op": "MLOAD"
    },
    "399": {
      "op": "AND"
    },
    "400": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "402": {
      "op": "DUP4"
    },
    "403": {
      "op": "ADD"
    },
    "404": {
      "op": "MSTORE"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "407": {
      "op": "DUP4"
    },
    "408": {
      "op": "ADD"
    },
    "409": {
      "op": "MLOAD"
    },
    "410": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "412": {
      "op": "DUP4"
    },
    "413": {
      "op": "ADD"
    },
    "414": {
      "op": "MSTORE"
    },
    "415": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "417": {
      "op": "DUP4"
    },
    "418": {
      "op": "ADD"
    },
    "419": {
      "op": "MLOAD"
    },
    "420": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "422": {
      "op": "DUP4"
    },
    "423": {
      "op": "ADD"
    },
    "424": {
      "op": "MSTORE"
    },
    "425": {
      "op": "SWAP3"
    },
    "426": {
      "op": "SWAP2"
    },
    "427": {
      "op": "POP"
    },
    "428": {
      "op": "POP"
    },
    "429": {
      "op": "JUMP"
    },
    "430": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "431": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "433": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "434": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "DUP1",
      "path": "20"
    },
    "435": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "436": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "SUB",
      "path": "20"
    },
    "437": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "438": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "RETURN",
      "path": "20"
    },
    "439": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "440": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CA"
    },
    "443": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1C5"
    },
    "446": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "447": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "449": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x26E6"
    },
    "452": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        13447,
        15086
      ],
      "op": "JUMP",
      "path": "20"
    },
    "453": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "454": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5C2"
    },
    "457": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        13447,
        15086
      ],
      "op": "JUMP",
      "path": "20"
    },
    "458": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "459": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "461": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "462": {
      "op": "SWAP1"
    },
    "463": {
      "op": "ISZERO"
    },
    "464": {
      "op": "ISZERO"
    },
    "465": {
      "op": "DUP2"
    },
    "466": {
      "op": "MSTORE"
    },
    "467": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "469": {
      "op": "ADD"
    },
    "470": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1AE"
    },
    "473": {
      "op": "JUMP"
    },
    "474": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "475": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1ED"
    },
    "478": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1E8"
    },
    "481": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "482": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "484": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x278E"
    },
    "487": {
      "fn": "Staker.calculateRewards",
      "jump": "i",
      "offset": [
        3754,
        4114
      ],
      "op": "JUMP",
      "path": "20"
    },
    "488": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "489": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB26"
    },
    "492": {
      "fn": "Staker.calculateRewards",
      "jump": "i",
      "offset": [
        3754,
        4114
      ],
      "op": "JUMP",
      "path": "20"
    },
    "493": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "494": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "496": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "497": {
      "op": "SWAP1"
    },
    "498": {
      "op": "DUP2"
    },
    "499": {
      "op": "MSTORE"
    },
    "500": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "502": {
      "op": "ADD"
    },
    "503": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1AE"
    },
    "506": {
      "op": "JUMP"
    },
    "507": {
      "offset": [
        1951,
        1977
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "508": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "510": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "511": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CA"
    },
    "514": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "515": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "517": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "519": {
      "op": "SHL"
    },
    "520": {
      "offset": [
        1951,
        1977
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "521": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "DIV",
      "path": "20"
    },
    "522": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xFF"
    },
    "524": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "AND",
      "path": "20"
    },
    "525": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "DUP2",
      "path": "20"
    },
    "526": {
      "fn": "Staker.calculateRewards",
      "offset": [
        1951,
        1977
      ],
      "op": "JUMP",
      "path": "20"
    },
    "527": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "528": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CA"
    },
    "531": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x21D"
    },
    "534": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "535": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "537": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x27D6"
    },
    "540": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        4120,
        5849
      ],
      "op": "JUMP",
      "path": "20"
    },
    "541": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "542": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB86"
    },
    "545": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        4120,
        5849
      ],
      "op": "JUMP",
      "path": "20"
    },
    "546": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "547": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x144"
    },
    "550": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1060"
    },
    "553": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMP",
      "path": "0"
    },
    "554": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "555": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x1"
    },
    "557": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "558": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "560": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "562": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "564": {
      "op": "SHL"
    },
    "565": {
      "op": "SUB"
    },
    "566": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "567": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "568": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "570": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "575": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "577": {
      "op": "SHL"
    },
    "578": {
      "op": "SUB"
    },
    "579": {
      "op": "SWAP1"
    },
    "580": {
      "op": "SWAP2"
    },
    "581": {
      "op": "AND"
    },
    "582": {
      "op": "DUP2"
    },
    "583": {
      "op": "MSTORE"
    },
    "584": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "586": {
      "op": "ADD"
    },
    "587": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE"
    },
    "590": {
      "op": "JUMP"
    },
    "591": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "592": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x144"
    },
    "595": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x25D"
    },
    "598": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "599": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "601": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x27F4"
    },
    "604": {
      "fn": "Staker.changeAdmin",
      "jump": "i",
      "offset": [
        3355,
        3451
      ],
      "op": "JUMP",
      "path": "20"
    },
    "605": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "606": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1096"
    },
    "609": {
      "fn": "Staker.changeAdmin",
      "jump": "i",
      "offset": [
        3355,
        3451
      ],
      "op": "JUMP",
      "path": "20"
    },
    "610": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "611": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x275"
    },
    "614": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x270"
    },
    "617": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "618": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "620": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2659"
    },
    "623": {
      "fn": "Staker.getHoldingInfoRaw",
      "jump": "i",
      "offset": [
        15961,
        16134
      ],
      "op": "JUMP",
      "path": "20"
    },
    "624": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "625": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x10CC"
    },
    "628": {
      "fn": "Staker.getHoldingInfoRaw",
      "jump": "i",
      "offset": [
        15961,
        16134
      ],
      "op": "JUMP",
      "path": "20"
    },
    "629": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "630": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "632": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "633": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1AE"
    },
    "636": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "637": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "638": {
      "op": "DUP2"
    },
    "639": {
      "op": "MLOAD"
    },
    "640": {
      "op": "DUP2"
    },
    "641": {
      "op": "MSTORE"
    },
    "642": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "644": {
      "op": "DUP1"
    },
    "645": {
      "op": "DUP4"
    },
    "646": {
      "op": "ADD"
    },
    "647": {
      "op": "MLOAD"
    },
    "648": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "650": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "652": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "654": {
      "op": "SHL"
    },
    "655": {
      "op": "SUB"
    },
    "656": {
      "op": "AND"
    },
    "657": {
      "op": "SWAP1"
    },
    "658": {
      "op": "DUP3"
    },
    "659": {
      "op": "ADD"
    },
    "660": {
      "op": "MSTORE"
    },
    "661": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "663": {
      "op": "DUP1"
    },
    "664": {
      "op": "DUP4"
    },
    "665": {
      "op": "ADD"
    },
    "666": {
      "op": "MLOAD"
    },
    "667": {
      "op": "SWAP1"
    },
    "668": {
      "op": "DUP3"
    },
    "669": {
      "op": "ADD"
    },
    "670": {
      "op": "MSTORE"
    },
    "671": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "673": {
      "op": "SWAP2"
    },
    "674": {
      "op": "DUP3"
    },
    "675": {
      "op": "ADD"
    },
    "676": {
      "op": "MLOAD"
    },
    "677": {
      "op": "SWAP2"
    },
    "678": {
      "op": "DUP2"
    },
    "679": {
      "op": "ADD"
    },
    "680": {
      "op": "SWAP2"
    },
    "681": {
      "op": "SWAP1"
    },
    "682": {
      "op": "SWAP2"
    },
    "683": {
      "op": "MSTORE"
    },
    "684": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "686": {
      "op": "ADD"
    },
    "687": {
      "op": "SWAP1"
    },
    "688": {
      "op": "JUMP"
    },
    "689": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "690": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x144"
    },
    "693": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2BF"
    },
    "696": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "697": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "699": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x27F4"
    },
    "702": {
      "fn": "Staker.setProjectMan",
      "jump": "i",
      "offset": [
        2895,
        3191
      ],
      "op": "JUMP",
      "path": "20"
    },
    "703": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "704": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1169"
    },
    "707": {
      "fn": "Staker.setProjectMan",
      "jump": "i",
      "offset": [
        2895,
        3191
      ],
      "op": "JUMP",
      "path": "20"
    },
    "708": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "709": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x275"
    },
    "712": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2D2"
    },
    "715": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "716": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "718": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2659"
    },
    "721": {
      "fn": "Staker.getHoldingInfo",
      "jump": "i",
      "offset": [
        15338,
        15955
      ],
      "op": "JUMP",
      "path": "20"
    },
    "722": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "723": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x121F"
    },
    "726": {
      "fn": "Staker.getHoldingInfo",
      "jump": "i",
      "offset": [
        15338,
        15955
      ],
      "op": "JUMP",
      "path": "20"
    },
    "727": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "728": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CA"
    },
    "731": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2E5"
    },
    "734": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "735": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "737": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2811"
    },
    "740": {
      "fn": "Staker.isProjectEnd",
      "jump": "i",
      "offset": [
        6950,
        7110
      ],
      "op": "JUMP",
      "path": "20"
    },
    "741": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "742": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1330"
    },
    "745": {
      "fn": "Staker.isProjectEnd",
      "jump": "i",
      "offset": [
        6950,
        7110
      ],
      "op": "JUMP",
      "path": "20"
    },
    "746": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "747": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x144"
    },
    "750": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2F8"
    },
    "753": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "754": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "756": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x282E"
    },
    "759": {
      "fn": "Staker.withdrawTo",
      "jump": "i",
      "offset": [
        16883,
        17210
      ],
      "op": "JUMP",
      "path": "20"
    },
    "760": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "761": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x134E"
    },
    "764": {
      "fn": "Staker.withdrawTo",
      "jump": "i",
      "offset": [
        16883,
        17210
      ],
      "op": "JUMP",
      "path": "20"
    },
    "765": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "766": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x144"
    },
    "769": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x30B"
    },
    "772": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "773": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "775": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2853"
    },
    "778": {
      "fn": "Staker.setHoldingInfoData",
      "jump": "i",
      "offset": [
        16140,
        16334
      ],
      "op": "JUMP",
      "path": "20"
    },
    "779": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "780": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x14B8"
    },
    "783": {
      "fn": "Staker.setHoldingInfoData",
      "jump": "i",
      "offset": [
        16140,
        16334
      ],
      "op": "JUMP",
      "path": "20"
    },
    "784": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "785": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CA"
    },
    "788": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x31E"
    },
    "791": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "792": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "794": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x27D6"
    },
    "797": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7116,
        8470
      ],
      "op": "JUMP",
      "path": "20"
    },
    "798": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "799": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1570"
    },
    "802": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7116,
        8470
      ],
      "op": "JUMP",
      "path": "20"
    },
    "803": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16340,
        16550
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "804": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16340,
        16550
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x159"
    },
    "807": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16340,
        16550
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x331"
    },
    "810": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16340,
        16550
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "811": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16340,
        16550
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "813": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16340,
        16550
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2659"
    },
    "816": {
      "fn": "Staker.getStakingInfoRaw",
      "jump": "i",
      "offset": [
        16340,
        16550
      ],
      "op": "JUMP",
      "path": "20"
    },
    "817": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16340,
        16550
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "818": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "820": {
      "op": "DUP1"
    },
    "821": {
      "op": "MLOAD"
    },
    "822": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "824": {
      "op": "DUP2"
    },
    "825": {
      "op": "ADD"
    },
    "826": {
      "op": "DUP3"
    },
    "827": {
      "op": "MSTORE"
    },
    "828": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "830": {
      "op": "DUP1"
    },
    "831": {
      "op": "DUP3"
    },
    "832": {
      "op": "MSTORE"
    },
    "833": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "835": {
      "op": "DUP3"
    },
    "836": {
      "op": "ADD"
    },
    "837": {
      "op": "DUP2"
    },
    "838": {
      "op": "SWAP1"
    },
    "839": {
      "op": "MSTORE"
    },
    "840": {
      "op": "SWAP2"
    },
    "841": {
      "op": "DUP2"
    },
    "842": {
      "op": "ADD"
    },
    "843": {
      "op": "DUP3"
    },
    "844": {
      "op": "SWAP1"
    },
    "845": {
      "op": "MSTORE"
    },
    "846": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "848": {
      "op": "DUP2"
    },
    "849": {
      "op": "ADD"
    },
    "850": {
      "op": "DUP3"
    },
    "851": {
      "op": "SWAP1"
    },
    "852": {
      "op": "MSTORE"
    },
    "853": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "855": {
      "op": "DUP2"
    },
    "856": {
      "op": "ADD"
    },
    "857": {
      "op": "SWAP2"
    },
    "858": {
      "op": "SWAP1"
    },
    "859": {
      "op": "SWAP2"
    },
    "860": {
      "op": "MSTORE"
    },
    "861": {
      "op": "POP"
    },
    "862": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "864": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "866": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "868": {
      "op": "SHL"
    },
    "869": {
      "op": "SUB"
    },
    "870": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "871": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "872": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "873": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "AND",
      "path": "20"
    },
    "874": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16493
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "876": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "877": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "DUP2",
      "path": "20"
    },
    "878": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "879": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16503
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "881": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "883": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "884": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "DUP2",
      "path": "20"
    },
    "885": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "886": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "888": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "DUP1",
      "path": "20"
    },
    "889": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "DUP4",
      "path": "20"
    },
    "890": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16509
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "891": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "896": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "897": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "DUP6",
      "path": "20"
    },
    "898": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "AND",
      "path": "20"
    },
    "899": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "DUP5",
      "path": "20"
    },
    "900": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "901": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "DUP3",
      "path": "20"
    },
    "902": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "903": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "904": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "DUP3",
      "path": "20"
    },
    "905": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "906": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16496,
        16520
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "907": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP3",
      "path": "20"
    },
    "908": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "909": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA0"
    },
    "911": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP2",
      "path": "20"
    },
    "912": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "ADD",
      "path": "20"
    },
    "913": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP5",
      "path": "20"
    },
    "914": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "915": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP2",
      "path": "20"
    },
    "916": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "917": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP1",
      "path": "20"
    },
    "918": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP7",
      "path": "20"
    },
    "919": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "AND",
      "path": "20"
    },
    "920": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP3",
      "path": "20"
    },
    "921": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "922": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "924": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "926": {
      "op": "SHL"
    },
    "927": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP2",
      "path": "20"
    },
    "928": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DIV",
      "path": "20"
    },
    "929": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "930": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "931": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "AND",
      "path": "20"
    },
    "932": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "933": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP2",
      "path": "20"
    },
    "934": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "ADD",
      "path": "20"
    },
    "935": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "936": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "937": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "938": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "939": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "941": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "943": {
      "op": "SHL"
    },
    "944": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "945": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "946": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DIV",
      "path": "20"
    },
    "947": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "949": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "951": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "953": {
      "op": "SHL"
    },
    "954": {
      "op": "SUB"
    },
    "955": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "AND",
      "path": "20"
    },
    "956": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "957": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP2",
      "path": "20"
    },
    "958": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "ADD",
      "path": "20"
    },
    "959": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "960": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "961": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "962": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "963": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "965": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP3",
      "path": "20"
    },
    "966": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "ADD",
      "path": "20"
    },
    "967": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "968": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "970": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP3",
      "path": "20"
    },
    "971": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "ADD",
      "path": "20"
    },
    "972": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "973": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "975": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "976": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "977": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "ADD",
      "path": "20"
    },
    "978": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "979": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "981": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "DUP3",
      "path": "20"
    },
    "982": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "ADD",
      "path": "20"
    },
    "983": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "984": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16470,
        16520
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "985": {
      "fn": "Staker.getStakingInfoRaw",
      "offset": [
        16340,
        16550
      ],
      "op": "JUMP",
      "path": "20"
    },
    "986": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "987": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x144"
    },
    "990": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E8"
    },
    "993": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "994": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "996": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x27F4"
    },
    "999": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1000": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1001": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1952"
    },
    "1004": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1005": {
      "offset": [
        326,
        346
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1006": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        326,
        346
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "1008": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        326,
        346
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1009": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        326,
        346
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x237"
    },
    "1012": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        326,
        346
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1015": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1017": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1019": {
      "op": "SHL"
    },
    "1020": {
      "op": "SUB"
    },
    "1021": {
      "offset": [
        326,
        346
      ],
      "op": "AND",
      "path": "17"
    },
    "1022": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        326,
        346
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1023": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        326,
        346
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1024": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1025": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CA"
    },
    "1028": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x40E"
    },
    "1031": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "1032": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1034": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2905"
    },
    "1037": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        9418,
        11557
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1038": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1039": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x19EA"
    },
    "1042": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        9418,
        11557
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1043": {
      "fn": "Staker.pause",
      "offset": [
        17468,
        17664
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1044": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1046": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1049": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1051": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1053": {
      "op": "SHL"
    },
    "1054": {
      "op": "SUB"
    },
    "1055": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "1056": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "11",
      "statement": 1
    },
    "1057": {
      "fn": "Staker.pause",
      "offset": [
        17537,
        17560
      ],
      "op": "EQ",
      "path": "20",
      "statement": 2
    },
    "1058": {
      "branch": 116,
      "fn": "Staker.pause",
      "offset": [
        17537,
        17560
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1059": {
      "fn": "Staker.pause",
      "offset": [
        17537,
        17599
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x436"
    },
    "1062": {
      "branch": 116,
      "fn": "Staker.pause",
      "offset": [
        17537,
        17599
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1063": {
      "op": "POP"
    },
    "1064": {
      "fn": "Staker.pause",
      "offset": [
        17572,
        17582
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "1066": {
      "fn": "Staker.pause",
      "offset": [
        17572,
        17582
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1067": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1071": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1073": {
      "op": "SHL"
    },
    "1074": {
      "op": "SUB"
    },
    "1075": {
      "fn": "Staker.pause",
      "offset": [
        17572,
        17582
      ],
      "op": "AND",
      "path": "20"
    },
    "1076": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "11"
    },
    "1077": {
      "branch": 117,
      "fn": "Staker.pause",
      "offset": [
        17564,
        17599
      ],
      "op": "EQ",
      "path": "20"
    },
    "1078": {
      "fn": "Staker.pause",
      "offset": [
        17537,
        17599
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1079": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x470"
    },
    "1082": {
      "branch": 117,
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1083": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1085": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1086": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1090": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1092": {
      "op": "SHL"
    },
    "1093": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1094": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1095": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1097": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1099": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1100": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "ADD",
      "path": "20"
    },
    "1101": {
      "op": "MSTORE"
    },
    "1102": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "1104": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1106": {
      "op": "DUP3"
    },
    "1107": {
      "op": "ADD"
    },
    "1108": {
      "op": "MSTORE"
    },
    "1109": {
      "op": "PUSH6",
      "value": "0x10B7BBB732B9"
    },
    "1116": {
      "op": "PUSH1",
      "value": "0xD1"
    },
    "1118": {
      "op": "SHL"
    },
    "1119": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1121": {
      "op": "DUP3"
    },
    "1122": {
      "op": "ADD"
    },
    "1123": {
      "op": "MSTORE"
    },
    "1124": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1126": {
      "op": "ADD"
    },
    "1127": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1128": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1130": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1131": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1132": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1133": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "SUB",
      "path": "20"
    },
    "1134": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1135": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "20"
    },
    "1136": {
      "fn": "Staker.pause",
      "offset": [
        17516,
        17631
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1137": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17647
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 3,
      "value": "0x4"
    },
    "1139": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1140": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1141": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1142": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1143": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1144": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1146": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1148": {
      "op": "SHL"
    },
    "1149": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "MUL",
      "path": "20"
    },
    "1150": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1152": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1154": {
      "op": "SHL"
    },
    "1155": {
      "op": "NOT"
    },
    "1156": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1157": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "1158": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "AND",
      "path": "20"
    },
    "1159": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1160": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1161": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1162": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "OR",
      "path": "20"
    },
    "1163": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1164": {
      "fn": "Staker.pause",
      "offset": [
        17641,
        17657
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1165": {
      "fn": "Staker.pause",
      "jump": "o",
      "offset": [
        17468,
        17664
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1166": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1167": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1169": {
      "op": "DUP1"
    },
    "1170": {
      "op": "MLOAD"
    },
    "1171": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1173": {
      "op": "DUP2"
    },
    "1174": {
      "op": "ADD"
    },
    "1175": {
      "op": "DUP3"
    },
    "1176": {
      "op": "MSTORE"
    },
    "1177": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1179": {
      "op": "DUP1"
    },
    "1180": {
      "op": "DUP3"
    },
    "1181": {
      "op": "MSTORE"
    },
    "1182": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1184": {
      "op": "DUP3"
    },
    "1185": {
      "op": "ADD"
    },
    "1186": {
      "op": "DUP2"
    },
    "1187": {
      "op": "SWAP1"
    },
    "1188": {
      "op": "MSTORE"
    },
    "1189": {
      "op": "SWAP2"
    },
    "1190": {
      "op": "DUP2"
    },
    "1191": {
      "op": "ADD"
    },
    "1192": {
      "op": "DUP3"
    },
    "1193": {
      "op": "SWAP1"
    },
    "1194": {
      "op": "MSTORE"
    },
    "1195": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1197": {
      "op": "DUP2"
    },
    "1198": {
      "op": "ADD"
    },
    "1199": {
      "op": "DUP3"
    },
    "1200": {
      "op": "SWAP1"
    },
    "1201": {
      "op": "MSTORE"
    },
    "1202": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1204": {
      "op": "DUP2"
    },
    "1205": {
      "op": "ADD"
    },
    "1206": {
      "op": "SWAP2"
    },
    "1207": {
      "op": "SWAP1"
    },
    "1208": {
      "op": "SWAP2"
    },
    "1209": {
      "op": "MSTORE"
    },
    "1210": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1214": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1216": {
      "op": "SHL"
    },
    "1217": {
      "op": "SUB"
    },
    "1218": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1219": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "AND",
      "path": "20"
    },
    "1220": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6279
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1222": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1223": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1224": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1225": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6289
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "1227": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1229": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1230": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1231": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1232": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1234": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1235": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1236": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6298
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "1237": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "1242": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "DUP7",
      "path": "20"
    },
    "1243": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1244": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "AND",
      "path": "20"
    },
    "1245": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "DUP6",
      "path": "20"
    },
    "1246": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1247": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1248": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1249": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1250": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1251": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1252": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "1253": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1254": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1255": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA0"
    },
    "1257": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1258": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "ADD",
      "path": "20"
    },
    "1259": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1260": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1261": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1262": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1263": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1264": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1265": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "AND",
      "path": "20"
    },
    "1266": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1267": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1268": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1270": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1272": {
      "op": "SHL"
    },
    "1273": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1274": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DIV",
      "path": "20"
    },
    "1275": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1276": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "1277": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "AND",
      "path": "20"
    },
    "1278": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "1279": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1280": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "ADD",
      "path": "20"
    },
    "1281": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "1282": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1283": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "1284": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1285": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1287": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1289": {
      "op": "SHL"
    },
    "1290": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1291": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1292": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DIV",
      "path": "20"
    },
    "1293": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1295": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1297": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1299": {
      "op": "SHL"
    },
    "1300": {
      "op": "SUB"
    },
    "1301": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "AND",
      "path": "20"
    },
    "1302": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1303": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1304": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "ADD",
      "path": "20"
    },
    "1305": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1306": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1307": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1308": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1309": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "1311": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1312": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "ADD",
      "path": "20"
    },
    "1313": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1314": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "1316": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1317": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "ADD",
      "path": "20"
    },
    "1318": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1319": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "1321": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "ADD",
      "path": "20"
    },
    "1322": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1323": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "1325": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1326": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "ADD",
      "path": "20"
    },
    "1327": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1328": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6252,
        6309
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1329": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6348,
        6370
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x539"
    },
    "1332": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6282,
        6309
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1333": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6348,
        6359
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F65"
    },
    "1336": {
      "fn": "Staker.getStakingInfo",
      "jump": "i",
      "offset": [
        6348,
        6370
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1337": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6348,
        6370
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1338": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6319,
        6370
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1339": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6319,
        6370
      ],
      "op": "POP",
      "path": "20"
    },
    "1340": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6380,
        6394
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1342": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6397,
        6442
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x54C"
    },
    "1345": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6408,
        6423
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "1346": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6426,
        6433
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1347": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6426,
        6441
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x180"
    },
    "1350": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6426,
        6441
      ],
      "op": "ADD",
      "path": "20"
    },
    "1351": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6426,
        6441
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1352": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6397,
        6400
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2040"
    },
    "1355": {
      "fn": "Staker.getStakingInfo",
      "jump": "i",
      "offset": [
        6397,
        6442
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1356": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6397,
        6442
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1357": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6380,
        6442
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1358": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6380,
        6442
      ],
      "op": "POP",
      "path": "20"
    },
    "1359": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6480,
        6487
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1360": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1362": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1364": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1366": {
      "op": "SHL"
    },
    "1367": {
      "op": "SUB"
    },
    "1368": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6457,
        6487
      ],
      "op": "AND",
      "path": "20"
    },
    "1369": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6457,
        6467
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1370": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6457,
        6477
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1372": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6457,
        6477
      ],
      "op": "ADD",
      "path": "20"
    },
    "1373": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6457,
        6477
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1374": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1380": {
      "op": "SHL"
    },
    "1381": {
      "op": "SUB"
    },
    "1382": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6457,
        6487
      ],
      "op": "AND",
      "path": "20"
    },
    "1383": {
      "branch": 118,
      "fn": "Staker.getStakingInfo",
      "offset": [
        6457,
        6487
      ],
      "op": "GT",
      "path": "20"
    },
    "1384": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6453,
        6531
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1385": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6453,
        6531
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x577"
    },
    "1388": {
      "branch": 118,
      "fn": "Staker.getStakingInfo",
      "offset": [
        6453,
        6531
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1389": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6510,
        6520
      ],
      "op": "DUP3",
      "path": "20",
      "statement": 4
    },
    "1390": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6503,
        6520
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "1391": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6503,
        6520
      ],
      "op": "POP",
      "path": "20"
    },
    "1392": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6503,
        6520
      ],
      "op": "POP",
      "path": "20"
    },
    "1393": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6503,
        6520
      ],
      "op": "POP",
      "path": "20"
    },
    "1394": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6503,
        6520
      ],
      "op": "POP",
      "path": "20"
    },
    "1395": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6503,
        6520
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5BC"
    },
    "1398": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6503,
        6520
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1399": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6453,
        6531
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1400": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6615,
        6628
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 5,
      "value": "0x80"
    },
    "1402": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6615,
        6628
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1403": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6615,
        6628
      ],
      "op": "ADD",
      "path": "20"
    },
    "1404": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6615,
        6628
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1405": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6598,
        6612
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1406": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6598,
        6612
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1407": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6568,
        6724
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5A2"
    },
    "1410": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6568,
        6724
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1411": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6598,
        6628
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x591"
    },
    "1414": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6598,
        6628
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1415": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6598,
        6628
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "1420": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6598,
        6628
      ],
      "op": "AND",
      "path": "20"
    },
    "1421": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6598,
        6628
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "1424": {
      "fn": "Staker.getStakingInfo",
      "jump": "i",
      "offset": [
        6598,
        6628
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1425": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6598,
        6628
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1426": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6642,
        6652
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1427": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6642,
        6662
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1429": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6642,
        6662
      ],
      "op": "ADD",
      "path": "20"
    },
    "1430": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6642,
        6662
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1431": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6676,
        6683
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1432": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6697,
        6704
      ],
      "op": "DUP6",
      "path": "20"
    },
    "1433": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6697,
        6714
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x140"
    },
    "1436": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6697,
        6714
      ],
      "op": "ADD",
      "path": "20"
    },
    "1437": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6697,
        6714
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1438": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6568,
        6584
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB26"
    },
    "1441": {
      "fn": "Staker.getStakingInfo",
      "jump": "i",
      "offset": [
        6568,
        6724
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1442": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6568,
        6724
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1443": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6551
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1444": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6564
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "1446": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6564
      ],
      "op": "ADD",
      "path": "20"
    },
    "1447": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1448": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1449": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1450": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5B3"
    },
    "1453": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1454": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1455": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "1458": {
      "fn": "Staker.getStakingInfo",
      "jump": "i",
      "offset": [
        6541,
        6724
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1459": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1460": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1461": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6541,
        6724
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1462": {
      "op": "POP"
    },
    "1463": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6741,
        6751
      ],
      "op": "SWAP2",
      "path": "20",
      "statement": 6
    },
    "1464": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6741,
        6751
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "1465": {
      "op": "POP"
    },
    "1466": {
      "op": "POP"
    },
    "1467": {
      "op": "POP"
    },
    "1468": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1469": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "1470": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1471": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "POP",
      "path": "20"
    },
    "1472": {
      "fn": "Staker.getStakingInfo",
      "offset": [
        6120,
        6758
      ],
      "op": "POP",
      "path": "20"
    },
    "1473": {
      "fn": "Staker.getStakingInfo",
      "jump": "o",
      "offset": [
        6120,
        6758
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1474": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1475": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13606,
        13610
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1477": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1479": {
      "offset": [
        2259,
        2266
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1481": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        2259,
        2266
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1482": {
      "offset": [
        2259,
        2278
      ],
      "op": "SUB",
      "path": "1"
    },
    "1483": {
      "offset": [
        2251,
        2314
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x616"
    },
    "1486": {
      "offset": [
        2251,
        2314
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1487": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        2251,
        2314
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1489": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        2251,
        2314
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1490": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1494": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1496": {
      "op": "SHL"
    },
    "1497": {
      "offset": [
        2251,
        2314
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1498": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        2251,
        2314
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1499": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1501": {
      "offset": [
        2251,
        2314
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1503": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        2251,
        2314
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1504": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        2251,
        2314
      ],
      "op": "ADD",
      "path": "1"
    },
    "1505": {
      "op": "MSTORE"
    },
    "1506": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1508": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1510": {
      "op": "DUP3"
    },
    "1511": {
      "op": "ADD"
    },
    "1512": {
      "op": "MSTORE"
    },
    "1513": {
      "op": "PUSH32",
      "value": "0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
    },
    "1546": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1548": {
      "op": "DUP3"
    },
    "1549": {
      "op": "ADD"
    },
    "1550": {
      "op": "MSTORE"
    },
    "1551": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1553": {
      "op": "ADD"
    },
    "1554": {
      "offset": [
        2251,
        2314
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x467"
    },
    "1557": {
      "op": "JUMP"
    },
    "1558": {
      "offset": [
        2251,
        2314
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1559": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1561": {
      "offset": [
        2389,
        2396
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1563": {
      "offset": [
        2389,
        2407
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1564": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13639,
        13667
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 7,
      "value": "0x626"
    },
    "1567": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13665,
        13667
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3C"
    },
    "1569": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13646,
        13661
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "1570": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13639,
        13667
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2989"
    },
    "1573": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        13639,
        13667
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1574": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13639,
        13667
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1577": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1579": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1581": {
      "op": "SHL"
    },
    "1582": {
      "op": "SUB"
    },
    "1583": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13630,
        13667
      ],
      "op": "AND",
      "path": "20"
    },
    "1584": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13630,
        13635
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1587": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1589": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1591": {
      "op": "SHL"
    },
    "1592": {
      "op": "SUB"
    },
    "1593": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13630,
        13667
      ],
      "op": "AND",
      "path": "20"
    },
    "1594": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13630,
        13667
      ],
      "op": "LT",
      "path": "20"
    },
    "1595": {
      "branch": 119,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13630,
        13667
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1596": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x671"
    },
    "1599": {
      "branch": 119,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1600": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1602": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1603": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1607": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1609": {
      "op": "SHL"
    },
    "1610": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1611": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1612": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1614": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1616": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1617": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "ADD",
      "path": "20"
    },
    "1618": {
      "op": "MSTORE"
    },
    "1619": {
      "op": "PUSH1",
      "value": "0x7"
    },
    "1621": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1623": {
      "op": "DUP3"
    },
    "1624": {
      "op": "ADD"
    },
    "1625": {
      "op": "MSTORE"
    },
    "1626": {
      "op": "PUSH7",
      "value": "0x78206E6F6E6365"
    },
    "1634": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "1636": {
      "op": "SHL"
    },
    "1637": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1639": {
      "op": "DUP3"
    },
    "1640": {
      "op": "ADD"
    },
    "1641": {
      "op": "MSTORE"
    },
    "1642": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1644": {
      "op": "ADD"
    },
    "1645": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "1648": {
      "op": "JUMP"
    },
    "1649": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13622,
        13679
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1650": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1652": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1654": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1656": {
      "op": "SHL"
    },
    "1657": {
      "op": "SUB"
    },
    "1658": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "DUP4",
      "path": "20",
      "statement": 8
    },
    "1659": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "AND",
      "path": "20"
    },
    "1660": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1662": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1663": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1664": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1665": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13707
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x6"
    },
    "1667": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1669": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1670": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1672": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1673": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "1674": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1675": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xFF"
    },
    "1677": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13714
      ],
      "op": "AND",
      "path": "20"
    },
    "1678": {
      "branch": 120,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13697,
        13719
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1679": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x6C4"
    },
    "1682": {
      "branch": 120,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1683": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1685": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1686": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1690": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1692": {
      "op": "SHL"
    },
    "1693": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1694": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1695": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1697": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1699": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1700": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "ADD",
      "path": "20"
    },
    "1701": {
      "op": "MSTORE"
    },
    "1702": {
      "op": "PUSH1",
      "value": "0x7"
    },
    "1704": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1706": {
      "op": "DUP3"
    },
    "1707": {
      "op": "ADD"
    },
    "1708": {
      "op": "MSTORE"
    },
    "1709": {
      "op": "PUSH7",
      "value": "0x78206E6F6E6365"
    },
    "1717": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "1719": {
      "op": "SHL"
    },
    "1720": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1722": {
      "op": "DUP3"
    },
    "1723": {
      "op": "ADD"
    },
    "1724": {
      "op": "MSTORE"
    },
    "1725": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1727": {
      "op": "ADD"
    },
    "1728": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "1731": {
      "op": "JUMP"
    },
    "1732": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13689,
        13731
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1733": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13742,
        13768
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1735": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13771,
        13793
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x6CF"
    },
    "1738": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13783,
        13792
      ],
      "op": "DUP7",
      "path": "20"
    },
    "1739": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13771,
        13782
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F65"
    },
    "1742": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        13771,
        13793
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1743": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13771,
        13793
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1744": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13812,
        13822
      ],
      "op": "DUP1",
      "path": "20",
      "statement": 9
    },
    "1745": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13812,
        13822
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1746": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13742,
        13793
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1747": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13742,
        13793
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1748": {
      "op": "POP"
    },
    "1749": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13812,
        13827
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "1754": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13812,
        13827
      ],
      "op": "AND",
      "path": "20"
    },
    "1755": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13812,
        13822
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1757": {
      "branch": 121,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13812,
        13827
      ],
      "op": "SUB",
      "path": "20"
    },
    "1758": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x714"
    },
    "1761": {
      "branch": 121,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1762": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1764": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1765": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1769": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1771": {
      "op": "SHL"
    },
    "1772": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1773": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1774": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1776": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1778": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1779": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "ADD",
      "path": "20"
    },
    "1780": {
      "op": "MSTORE"
    },
    "1781": {
      "op": "PUSH1",
      "value": "0x8"
    },
    "1783": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1785": {
      "op": "DUP3"
    },
    "1786": {
      "op": "ADD"
    },
    "1787": {
      "op": "MSTORE"
    },
    "1788": {
      "op": "PUSH8",
      "value": "0x85C1C9BDA9958DD"
    },
    "1797": {
      "op": "PUSH1",
      "value": "0xC2"
    },
    "1799": {
      "op": "SHL"
    },
    "1800": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1802": {
      "op": "DUP3"
    },
    "1803": {
      "op": "ADD"
    },
    "1804": {
      "op": "MSTORE"
    },
    "1805": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1807": {
      "op": "ADD"
    },
    "1808": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "1811": {
      "op": "JUMP"
    },
    "1812": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13804,
        13840
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1813": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13869,
        13879
      ],
      "op": "CALLER",
      "path": "20"
    },
    "1814": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13851,
        13866
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1816": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1817": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1818": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1819": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13920
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "1821": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1823": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1824": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1825": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1826": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1828": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1829": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1830": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13929
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "1831": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "1836": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "DUP12",
      "path": "20"
    },
    "1837": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1838": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "AND",
      "path": "20"
    },
    "1839": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "DUP6",
      "path": "20"
    },
    "1840": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1841": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1842": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1843": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1844": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1845": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1846": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13913,
        13940
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "1847": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1848": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1849": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA0"
    },
    "1851": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1852": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "ADD",
      "path": "20"
    },
    "1853": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1854": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1855": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1856": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1857": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1858": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1859": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "AND",
      "path": "20"
    },
    "1860": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1861": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1862": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1863": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1865": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1867": {
      "op": "SHL"
    },
    "1868": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1869": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DIV",
      "path": "20"
    },
    "1870": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1871": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "1872": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "AND",
      "path": "20"
    },
    "1873": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "1874": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1875": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "ADD",
      "path": "20"
    },
    "1876": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "1877": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1878": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "1879": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1880": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1882": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1884": {
      "op": "SHL"
    },
    "1885": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1886": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "1887": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DIV",
      "path": "20"
    },
    "1888": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1892": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1894": {
      "op": "SHL"
    },
    "1895": {
      "op": "SUB"
    },
    "1896": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "AND",
      "path": "20"
    },
    "1897": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "1898": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1899": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "ADD",
      "path": "20"
    },
    "1900": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "1901": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1902": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "1903": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1904": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "1906": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1907": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "ADD",
      "path": "20"
    },
    "1908": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1909": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "1911": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP5",
      "path": "20"
    },
    "1912": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "ADD",
      "path": "20"
    },
    "1913": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1914": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "1916": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1917": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1918": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "ADD",
      "path": "20"
    },
    "1919": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1920": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "1922": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1923": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "ADD",
      "path": "20"
    },
    "1924": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1925": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1926": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13890,
        13940
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1927": {
      "branch": 122,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13959,
        13971
      ],
      "op": "SUB",
      "path": "20",
      "statement": 10
    },
    "1928": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x7C1"
    },
    "1931": {
      "branch": 122,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1932": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1934": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1935": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1941": {
      "op": "SHL"
    },
    "1942": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1943": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1944": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1946": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1948": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1949": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "ADD",
      "path": "20"
    },
    "1950": {
      "op": "MSTORE"
    },
    "1951": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "1953": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1955": {
      "op": "DUP3"
    },
    "1956": {
      "op": "ADD"
    },
    "1957": {
      "op": "MSTORE"
    },
    "1958": {
      "op": "PUSH11",
      "value": "0x217374616B65722E717479"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "1972": {
      "op": "SHL"
    },
    "1973": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1975": {
      "op": "DUP3"
    },
    "1976": {
      "op": "ADD"
    },
    "1977": {
      "op": "MSTORE"
    },
    "1978": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1980": {
      "op": "ADD"
    },
    "1981": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "1984": {
      "op": "JUMP"
    },
    "1985": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13951,
        13987
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1986": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1988": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1989": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1991": {
      "op": "DUP10"
    },
    "1992": {
      "op": "SWAP1"
    },
    "1993": {
      "op": "SHL"
    },
    "1994": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1996": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1998": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2000": {
      "op": "SHL"
    },
    "2001": {
      "op": "SUB"
    },
    "2002": {
      "op": "NOT"
    },
    "2003": {
      "op": "AND"
    },
    "2004": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2006": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2007": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "ADD",
      "path": "20"
    },
    "2008": {
      "op": "MSTORE"
    },
    "2009": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2011": {
      "op": "DUP4"
    },
    "2012": {
      "op": "DUP2"
    },
    "2013": {
      "op": "SHL"
    },
    "2014": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "2027": {
      "op": "NOT"
    },
    "2028": {
      "op": "AND"
    },
    "2029": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2031": {
      "op": "DUP4"
    },
    "2032": {
      "op": "ADD"
    },
    "2033": {
      "op": "MSTORE"
    },
    "2034": {
      "op": "PUSH1",
      "value": "0x38"
    },
    "2036": {
      "op": "DUP3"
    },
    "2037": {
      "op": "ADD"
    },
    "2038": {
      "op": "DUP10"
    },
    "2039": {
      "op": "SWAP1"
    },
    "2040": {
      "op": "MSTORE"
    },
    "2041": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2043": {
      "op": "DUP9"
    },
    "2044": {
      "op": "SWAP1"
    },
    "2045": {
      "op": "SHL"
    },
    "2046": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2048": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2050": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2052": {
      "op": "SHL"
    },
    "2053": {
      "op": "SUB"
    },
    "2054": {
      "op": "NOT"
    },
    "2055": {
      "op": "AND"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0x58"
    },
    "2058": {
      "op": "DUP4"
    },
    "2059": {
      "op": "ADD"
    },
    "2060": {
      "op": "MSTORE"
    },
    "2061": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2063": {
      "op": "SWAP2"
    },
    "2064": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14043,
        14140
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x87D"
    },
    "2067": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14043,
        14140
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2068": {
      "op": "ADD"
    },
    "2069": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2071": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2072": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2074": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2075": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2076": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "SUB",
      "path": "20"
    },
    "2077": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "SUB",
      "path": "20"
    },
    "2078": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2079": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2080": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2081": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2083": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14078,
        14129
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2084": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14068,
        14130
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2085": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14068,
        14130
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2086": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14068,
        14130
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2087": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14068,
        14130
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2089": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14068,
        14130
      ],
      "op": "ADD",
      "path": "20"
    },
    "2090": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14068,
        14130
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "2091": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "PUSH1",
      "path": "19",
      "statement": 11,
      "value": "0x40"
    },
    "2093": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "2094": {
      "op": "PUSH32",
      "value": "0x19457468657265756D205369676E6564204D6573736167653A0A333200000000"
    },
    "2127": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x20"
    },
    "2129": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "DUP3",
      "path": "19"
    },
    "2130": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "ADD",
      "path": "19"
    },
    "2131": {
      "op": "MSTORE"
    },
    "2132": {
      "op": "PUSH1",
      "value": "0x3C"
    },
    "2134": {
      "op": "DUP2"
    },
    "2135": {
      "op": "ADD"
    },
    "2136": {
      "op": "DUP3"
    },
    "2137": {
      "op": "SWAP1"
    },
    "2138": {
      "op": "MSTORE"
    },
    "2139": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        545,
        552
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x0"
    },
    "2141": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        545,
        552
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "2142": {
      "op": "PUSH1",
      "value": "0x5C"
    },
    "2144": {
      "op": "ADD"
    },
    "2145": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x40"
    },
    "2147": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "2148": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x20"
    },
    "2150": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "DUP2",
      "path": "19"
    },
    "2151": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "DUP4",
      "path": "19"
    },
    "2152": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "SUB",
      "path": "19"
    },
    "2153": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "SUB",
      "path": "19"
    },
    "2154": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "DUP2",
      "path": "19"
    },
    "2155": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "MSTORE",
      "path": "19"
    },
    "2156": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "2157": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x40"
    },
    "2159": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        610,
        668
      ],
      "op": "MSTORE",
      "path": "19"
    },
    "2160": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        583,
        682
      ],
      "op": "DUP1",
      "path": "19"
    },
    "2161": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        583,
        682
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "2162": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        583,
        682
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "2163": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        583,
        682
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x20"
    },
    "2165": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        583,
        682
      ],
      "op": "ADD",
      "path": "19"
    },
    "2166": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        583,
        682
      ],
      "op": "KECCAK256",
      "path": "19"
    },
    "2167": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        564,
        682
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "2168": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        564,
        682
      ],
      "op": "POP",
      "path": "19"
    },
    "2169": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        478,
        689
      ],
      "op": "SWAP2",
      "path": "19"
    },
    "2170": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        478,
        689
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "2171": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        478,
        689
      ],
      "op": "POP",
      "path": "19"
    },
    "2172": {
      "fn": "SigVerifier.sigPrefixed",
      "offset": [
        478,
        689
      ],
      "op": "JUMP",
      "path": "19"
    },
    "2173": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14043,
        14140
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2174": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14169,
        14174
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 12,
      "value": "0x2"
    },
    "2176": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14169,
        14174
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2177": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14025,
        14140
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2178": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14025,
        14140
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2179": {
      "op": "POP"
    },
    "2180": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14159,
        14189
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x897"
    },
    "2183": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14159,
        14189
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2184": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2186": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2188": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2190": {
      "op": "SHL"
    },
    "2191": {
      "op": "SUB"
    },
    "2192": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14169,
        14174
      ],
      "op": "AND",
      "path": "20"
    },
    "2193": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14025,
        14140
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2194": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14185,
        14188
      ],
      "op": "DUP9",
      "path": "20"
    },
    "2195": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14159,
        14168
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2069"
    },
    "2198": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        14159,
        14189
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2199": {
      "branch": 123,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14159,
        14189
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2200": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x8D1"
    },
    "2203": {
      "branch": 123,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2204": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2206": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2207": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2211": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2213": {
      "op": "SHL"
    },
    "2214": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2215": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2216": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2218": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2220": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2221": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "ADD",
      "path": "20"
    },
    "2222": {
      "op": "MSTORE"
    },
    "2223": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "2225": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2227": {
      "op": "DUP3"
    },
    "2228": {
      "op": "ADD"
    },
    "2229": {
      "op": "MSTORE"
    },
    "2230": {
      "op": "PUSH11",
      "value": "0x78207369676E6174757265"
    },
    "2242": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "2244": {
      "op": "SHL"
    },
    "2245": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2247": {
      "op": "DUP3"
    },
    "2248": {
      "op": "ADD"
    },
    "2249": {
      "op": "MSTORE"
    },
    "2250": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2252": {
      "op": "ADD"
    },
    "2253": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "2256": {
      "op": "JUMP"
    },
    "2257": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14151,
        14205
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2258": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2262": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2264": {
      "op": "SHL"
    },
    "2265": {
      "op": "SUB"
    },
    "2266": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "DUP8",
      "path": "20",
      "statement": 13
    },
    "2267": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "AND",
      "path": "20"
    },
    "2268": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2270": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2271": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2272": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2273": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14226
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x6"
    },
    "2275": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2277": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2278": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2280": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2281": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "2282": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14237
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2283": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14237
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2284": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2286": {
      "op": "NOT"
    },
    "2287": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14237
      ],
      "op": "AND",
      "path": "20"
    },
    "2288": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14236,
        14237
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "2290": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14237
      ],
      "op": "OR",
      "path": "20"
    },
    "2291": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14237
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2292": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14237
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2293": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14272,
        14288
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "2295": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14272,
        14288
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2296": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14272,
        14288
      ],
      "op": "ADD",
      "path": "20"
    },
    "2297": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14272,
        14288
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2298": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14345,
        14360
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x180"
    },
    "2301": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14345,
        14360
      ],
      "op": "DUP7",
      "path": "20"
    },
    "2302": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14345,
        14360
      ],
      "op": "ADD",
      "path": "20"
    },
    "2303": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14345,
        14360
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2304": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14272,
        14288
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2305": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14272,
        14288
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2306": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14216,
        14233
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2307": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14316,
        14361
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x90D"
    },
    "2310": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14316,
        14361
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2311": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14327,
        14342
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "2312": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14327,
        14342
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2313": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14316,
        14319
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2040"
    },
    "2316": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        14316,
        14361
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2317": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14316,
        14361
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2318": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14299,
        14361
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2319": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14299,
        14361
      ],
      "op": "POP",
      "path": "20"
    },
    "2320": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14474,
        14616
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 14,
      "value": "0x93D"
    },
    "2323": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14514,
        14521
      ],
      "op": "DUP7",
      "path": "20"
    },
    "2324": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14514,
        14527
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "2326": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14514,
        14527
      ],
      "op": "ADD",
      "path": "20"
    },
    "2327": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14514,
        14527
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2328": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14507
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2329": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14511
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2331": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14511
      ],
      "op": "ADD",
      "path": "20"
    },
    "2332": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14511
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2333": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14527
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2338": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14527
      ],
      "op": "AND",
      "path": "20"
    },
    "2339": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14527
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x92C"
    },
    "2342": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14527
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2343": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14527
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2344": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14527
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "2347": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        14504,
        14527
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2348": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14504,
        14527
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2349": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14541,
        14544
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2350": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14541,
        14554
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2352": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14541,
        14554
      ],
      "op": "ADD",
      "path": "20"
    },
    "2353": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14541,
        14554
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2354": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14568,
        14575
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2355": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14589,
        14596
      ],
      "op": "DUP10",
      "path": "20"
    },
    "2356": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14589,
        14606
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x140"
    },
    "2359": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14589,
        14606
      ],
      "op": "ADD",
      "path": "20"
    },
    "2360": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14589,
        14606
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2361": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14474,
        14490
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB26"
    },
    "2364": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        14474,
        14616
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2365": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14474,
        14616
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2366": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14457,
        14616
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x947"
    },
    "2369": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14457,
        14616
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2370": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14457,
        14616
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2371": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14457,
        14616
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "2374": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        14457,
        14616
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2375": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14457,
        14616
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2376": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14457,
        14616
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2377": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14457,
        14616
      ],
      "op": "POP",
      "path": "20"
    },
    "2378": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14701,
        14714
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 15
    },
    "2379": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14691,
        14697
      ],
      "op": "DUP11",
      "path": "20"
    },
    "2380": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14691,
        14714
      ],
      "op": "GT",
      "path": "20"
    },
    "2381": {
      "branch": 124,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14691,
        14714
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2382": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x984"
    },
    "2385": {
      "branch": 124,
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2386": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2388": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2389": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2393": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2395": {
      "op": "SHL"
    },
    "2396": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2397": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2398": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2400": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2402": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2403": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "ADD",
      "path": "20"
    },
    "2404": {
      "op": "MSTORE"
    },
    "2405": {
      "op": "PUSH1",
      "value": "0x8"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2409": {
      "op": "DUP3"
    },
    "2410": {
      "op": "ADD"
    },
    "2411": {
      "op": "MSTORE"
    },
    "2412": {
      "op": "PUSH8",
      "value": "0x1E08185B5BDD5B9D"
    },
    "2421": {
      "op": "PUSH1",
      "value": "0xC2"
    },
    "2423": {
      "op": "SHL"
    },
    "2424": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2426": {
      "op": "DUP3"
    },
    "2427": {
      "op": "ADD"
    },
    "2428": {
      "op": "MSTORE"
    },
    "2429": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2431": {
      "op": "ADD"
    },
    "2432": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "2435": {
      "op": "JUMP"
    },
    "2436": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14683,
        14727
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2439": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2441": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2443": {
      "op": "SHL"
    },
    "2444": {
      "op": "SUB"
    },
    "2445": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14761,
        14776
      ],
      "op": "TIMESTAMP",
      "path": "20",
      "statement": 16
    },
    "2446": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14738,
        14777
      ],
      "op": "AND",
      "path": "20"
    },
    "2447": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14738,
        14751
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2449": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14738,
        14751
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2450": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14738,
        14751
      ],
      "op": "ADD",
      "path": "20"
    },
    "2451": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14738,
        14777
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2452": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14806,
        14828
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 17,
      "value": "0x99D"
    },
    "2455": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14822,
        14828
      ],
      "op": "DUP11",
      "path": "20"
    },
    "2456": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14806,
        14819
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2457": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14806,
        14828
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x29AF"
    },
    "2460": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        14806,
        14828
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2461": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14806,
        14828
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2462": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14787,
        14803
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "2464": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14787,
        14803
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2465": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14787,
        14803
      ],
      "op": "ADD",
      "path": "20"
    },
    "2466": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14787,
        14828
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2467": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14856
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 18,
      "value": "0x80"
    },
    "2469": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14856
      ],
      "op": "DUP5",
      "path": "20"
    },
    "2470": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14856
      ],
      "op": "ADD",
      "path": "20"
    },
    "2471": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2472": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2473": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14860,
        14866
      ],
      "op": "DUP12",
      "path": "20"
    },
    "2474": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14860,
        14866
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2475": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14856
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2476": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x9B6"
    },
    "2479": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2480": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14860,
        14866
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2481": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14860,
        14866
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2482": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "2485": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        14838,
        14866
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2486": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2487": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2488": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "POP",
      "path": "20"
    },
    "2489": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2490": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2491": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2492": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "POP",
      "path": "20"
    },
    "2493": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14838,
        14866
      ],
      "op": "POP",
      "path": "20"
    },
    "2494": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14907,
        14910
      ],
      "op": "DUP4",
      "path": "20",
      "statement": 19
    },
    "2495": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14884
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "2497": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2499": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14885,
        14892
      ],
      "op": "DUP8",
      "path": "20"
    },
    "2500": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2502": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2504": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2506": {
      "op": "SHL"
    },
    "2507": {
      "op": "SUB"
    },
    "2508": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "AND",
      "path": "20"
    },
    "2509": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2511": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2513": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2515": {
      "op": "SHL"
    },
    "2516": {
      "op": "SUB"
    },
    "2517": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "AND",
      "path": "20"
    },
    "2518": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2519": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2520": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2522": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "ADD",
      "path": "20"
    },
    "2523": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2524": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2525": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2526": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2528": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "ADD",
      "path": "20"
    },
    "2529": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2531": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14893
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "2532": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2534": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14894,
        14903
      ],
      "op": "DUP14",
      "path": "20"
    },
    "2535": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2540": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "AND",
      "path": "20"
    },
    "2541": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2546": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "AND",
      "path": "20"
    },
    "2547": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2548": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2549": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2551": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "ADD",
      "path": "20"
    },
    "2552": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2553": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2554": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2555": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2557": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "ADD",
      "path": "20"
    },
    "2558": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2560": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14904
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "2561": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2563": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2564": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2565": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2566": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2567": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2569": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2570": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2572": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "2575": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "EXP",
      "path": "20"
    },
    "2576": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2577": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2578": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2579": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2584": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MUL",
      "path": "20"
    },
    "2585": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "NOT",
      "path": "20"
    },
    "2586": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "AND",
      "path": "20"
    },
    "2587": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2588": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2589": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2594": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "AND",
      "path": "20"
    },
    "2595": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MUL",
      "path": "20"
    },
    "2596": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "OR",
      "path": "20"
    },
    "2597": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2598": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2599": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "POP",
      "path": "20"
    },
    "2600": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2602": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2603": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2604": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2605": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2606": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2608": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2609": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2611": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "2614": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "EXP",
      "path": "20"
    },
    "2615": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2616": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2617": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2618": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2623": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MUL",
      "path": "20"
    },
    "2624": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "NOT",
      "path": "20"
    },
    "2625": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "AND",
      "path": "20"
    },
    "2626": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2627": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2628": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2633": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "AND",
      "path": "20"
    },
    "2634": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MUL",
      "path": "20"
    },
    "2635": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "OR",
      "path": "20"
    },
    "2636": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2637": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2638": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "POP",
      "path": "20"
    },
    "2639": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2641": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2642": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2643": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2644": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2645": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2647": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2648": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x8"
    },
    "2650": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "2653": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "EXP",
      "path": "20"
    },
    "2654": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2655": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2656": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2657": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2659": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2661": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2663": {
      "op": "SHL"
    },
    "2664": {
      "op": "SUB"
    },
    "2665": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MUL",
      "path": "20"
    },
    "2666": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "NOT",
      "path": "20"
    },
    "2667": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "AND",
      "path": "20"
    },
    "2668": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2669": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2670": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2672": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2674": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2676": {
      "op": "SHL"
    },
    "2677": {
      "op": "SUB"
    },
    "2678": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "AND",
      "path": "20"
    },
    "2679": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MUL",
      "path": "20"
    },
    "2680": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "OR",
      "path": "20"
    },
    "2681": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2682": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2683": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "POP",
      "path": "20"
    },
    "2684": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "2686": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2687": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2688": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2689": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2690": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "2692": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2693": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2694": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "2696": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2697": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2698": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2699": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2700": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "2702": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "ADD",
      "path": "20"
    },
    "2703": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2704": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2705": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "POP",
      "path": "20"
    },
    "2706": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14877,
        14910
      ],
      "op": "POP",
      "path": "20"
    },
    "2707": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14999
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 20,
      "value": "0xAC5"
    },
    "2710": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14983,
        14990
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2711": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14992,
        14998
      ],
      "op": "DUP12",
      "path": "20"
    },
    "2712": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2714": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2716": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2717": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2718": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2719": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "2722": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "EXP",
      "path": "20"
    },
    "2723": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2724": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "DIV",
      "path": "20"
    },
    "2725": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2727": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2729": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2731": {
      "op": "SHL"
    },
    "2732": {
      "op": "SUB"
    },
    "2733": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14969
      ],
      "op": "AND",
      "path": "20"
    },
    "2734": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2736": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2738": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2740": {
      "op": "SHL"
    },
    "2741": {
      "op": "SUB"
    },
    "2742": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14982
      ],
      "op": "AND",
      "path": "20"
    },
    "2743": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14982
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x20FC"
    },
    "2746": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14982
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2747": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14999
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2748": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14999
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2749": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14999
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2750": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14999
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2755": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14999
      ],
      "op": "AND",
      "path": "20"
    },
    "2756": {
      "fn": "Staker.collectRewardsBy",
      "jump": "i",
      "offset": [
        14959,
        14999
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2757": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        14959,
        14999
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2758": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15039,
        15048
      ],
      "op": "DUP11",
      "path": "20",
      "statement": 21
    },
    "2759": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2764": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "AND",
      "path": "20"
    },
    "2765": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15030,
        15037
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2766": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2768": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2770": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2772": {
      "op": "SHL"
    },
    "2773": {
      "op": "SUB"
    },
    "2774": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "AND",
      "path": "20"
    },
    "2775": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "PUSH32",
      "path": "20",
      "value": "0x9BF028F26713DBFD10F1790F08EE2C2DF9A1D82C0F238230BB0B64AF2AAB4A9E"
    },
    "2808": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15050,
        15056
      ],
      "op": "DUP13",
      "path": "20"
    },
    "2809": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2811": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2812": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB07"
    },
    "2815": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2816": {
      "op": "DUP2"
    },
    "2817": {
      "op": "MSTORE"
    },
    "2818": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2820": {
      "op": "ADD"
    },
    "2821": {
      "op": "SWAP1"
    },
    "2822": {
      "op": "JUMP"
    },
    "2823": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2824": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2826": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2827": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2828": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2829": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "SUB",
      "path": "20"
    },
    "2830": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2831": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15015,
        15057
      ],
      "op": "LOG3",
      "path": "20"
    },
    "2832": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15075,
        15079
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 22,
      "value": "0x1"
    },
    "2834": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15068,
        15079
      ],
      "op": "SWAP7",
      "path": "20"
    },
    "2835": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15068,
        15079
      ],
      "op": "POP",
      "path": "20"
    },
    "2836": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15068,
        15079
      ],
      "op": "POP",
      "path": "20"
    },
    "2837": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15068,
        15079
      ],
      "op": "POP",
      "path": "20"
    },
    "2838": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15068,
        15079
      ],
      "op": "POP",
      "path": "20"
    },
    "2839": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15068,
        15079
      ],
      "op": "POP",
      "path": "20"
    },
    "2840": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15068,
        15079
      ],
      "op": "POP",
      "path": "20"
    },
    "2841": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        15068,
        15079
      ],
      "op": "POP",
      "path": "20"
    },
    "2842": {
      "offset": [
        1637,
        1638
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2844": {
      "offset": [
        2562,
        2569
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2846": {
      "offset": [
        2562,
        2584
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2847": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "2848": {
      "fn": "Staker.collectRewardsBy",
      "offset": [
        13447,
        15086
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "2849": {
      "op": "POP"
    },
    "2850": {
      "op": "POP"
    },
    "2851": {
      "op": "POP"
    },
    "2852": {
      "op": "POP"
    },
    "2853": {
      "fn": "Staker.collectRewardsBy",
      "jump": "o",
      "offset": [
        13447,
        15086
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2854": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2855": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3905,
        3920
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2857": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3905,
        3920
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2858": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3981,
        3987
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x15180"
    },
    "2862": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3956,
        3977
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB37"
    },
    "2865": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3967,
        3977
      ],
      "op": "DUP7",
      "path": "20"
    },
    "2866": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3956,
        3964
      ],
      "op": "DUP7",
      "path": "20"
    },
    "2867": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3956,
        3977
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x29C2"
    },
    "2870": {
      "fn": "Staker.calculateRewards",
      "jump": "i",
      "offset": [
        3956,
        3977
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2871": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3956,
        3977
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2872": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3955,
        3987
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB41"
    },
    "2875": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3955,
        3987
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2876": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3955,
        3987
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2877": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3955,
        3987
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2989"
    },
    "2880": {
      "fn": "Staker.calculateRewards",
      "jump": "i",
      "offset": [
        3955,
        3987
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2881": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3955,
        3987
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2882": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3932,
        3988
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2883": {
      "op": "POP"
    },
    "2884": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3998,
        4014
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2886": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4018,
        4031
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB4F"
    },
    "2889": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4028,
        4031
      ],
      "op": "DUP5",
      "path": "20"
    },
    "2890": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4018,
        4025
      ],
      "op": "DUP9",
      "path": "20"
    },
    "2891": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4018,
        4031
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "2894": {
      "fn": "Staker.calculateRewards",
      "jump": "i",
      "offset": [
        4018,
        4031
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2895": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4018,
        4031
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2896": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3998,
        4032
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2897": {
      "op": "POP"
    },
    "2898": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4074,
        4077
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 23,
      "value": "0x16D"
    },
    "2901": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4053,
        4070
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB64"
    },
    "2904": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4053,
        4070
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "2909": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4053,
        4070
      ],
      "op": "DUP5",
      "path": "20"
    },
    "2910": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4053,
        4070
      ],
      "op": "AND",
      "path": "20"
    },
    "2911": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3998,
        4032
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2912": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4053,
        4070
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "2915": {
      "fn": "Staker.calculateRewards",
      "jump": "i",
      "offset": [
        4053,
        4070
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2916": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4053,
        4070
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2917": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4052,
        4077
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB6E"
    },
    "2920": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4052,
        4077
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2921": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4052,
        4077
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2922": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4052,
        4077
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x29E9"
    },
    "2925": {
      "fn": "Staker.calculateRewards",
      "jump": "i",
      "offset": [
        4052,
        4077
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2926": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4052,
        4077
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2927": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4042,
        4077
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2928": {
      "op": "POP"
    },
    "2929": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4094,
        4107
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 24,
      "value": "0xB7B"
    },
    "2932": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4104,
        4107
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x64"
    },
    "2934": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4042,
        4077
      ],
      "op": "DUP5",
      "path": "20"
    },
    "2935": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4094,
        4107
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x29E9"
    },
    "2938": {
      "fn": "Staker.calculateRewards",
      "jump": "i",
      "offset": [
        4094,
        4107
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2939": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4094,
        4107
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2940": {
      "fn": "Staker.calculateRewards",
      "offset": [
        4087,
        4107
      ],
      "op": "SWAP8",
      "path": "20"
    },
    "2941": {
      "fn": "Staker.calculateRewards",
      "offset": [
        3754,
        4114
      ],
      "op": "SWAP7",
      "path": "20"
    },
    "2942": {
      "op": "POP"
    },
    "2943": {
      "op": "POP"
    },
    "2944": {
      "op": "POP"
    },
    "2945": {
      "op": "POP"
    },
    "2946": {
      "op": "POP"
    },
    "2947": {
      "op": "POP"
    },
    "2948": {
      "op": "POP"
    },
    "2949": {
      "fn": "Staker.calculateRewards",
      "jump": "o",
      "offset": [
        3754,
        4114
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2950": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2951": {
      "fn": "Staker.stake",
      "offset": [
        4208,
        4214
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 25,
      "value": "0x4"
    },
    "2953": {
      "fn": "Staker.stake",
      "offset": [
        4208,
        4214
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2954": {
      "fn": "Staker.stake",
      "offset": [
        4183,
        4187
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2956": {
      "fn": "Staker.stake",
      "offset": [
        4183,
        4187
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2957": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2959": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2961": {
      "op": "SHL"
    },
    "2962": {
      "fn": "Staker.stake",
      "offset": [
        4208,
        4214
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2963": {
      "fn": "Staker.stake",
      "offset": [
        4208,
        4214
      ],
      "op": "DIV",
      "path": "20"
    },
    "2964": {
      "fn": "Staker.stake",
      "offset": [
        4208,
        4214
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xFF"
    },
    "2966": {
      "fn": "Staker.stake",
      "offset": [
        4208,
        4214
      ],
      "op": "AND",
      "path": "20"
    },
    "2967": {
      "branch": 125,
      "fn": "Staker.stake",
      "offset": [
        4207,
        4214
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2968": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xBB3"
    },
    "2971": {
      "branch": 125,
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2972": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2974": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2975": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2979": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2981": {
      "op": "SHL"
    },
    "2982": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2983": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2984": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2986": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "ADD",
      "path": "20"
    },
    "2987": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "2990": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2991": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x29FD"
    },
    "2994": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        4199,
        4225
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2995": {
      "fn": "Staker.stake",
      "offset": [
        4199,
        4225
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2996": {
      "fn": "Staker.stake",
      "offset": [
        4249,
        4250
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 26,
      "value": "0x0"
    },
    "2998": {
      "fn": "Staker.stake",
      "offset": [
        4243,
        4246
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2999": {
      "fn": "Staker.stake",
      "offset": [
        4243,
        4250
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "3004": {
      "fn": "Staker.stake",
      "offset": [
        4243,
        4250
      ],
      "op": "AND",
      "path": "20"
    },
    "3005": {
      "branch": 126,
      "fn": "Staker.stake",
      "offset": [
        4243,
        4250
      ],
      "op": "GT",
      "path": "20"
    },
    "3006": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xBF2"
    },
    "3009": {
      "branch": 126,
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3010": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3012": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3013": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3017": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3019": {
      "op": "SHL"
    },
    "3020": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3021": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3022": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3024": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "ADD",
      "path": "20"
    },
    "3025": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "3028": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3029": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3031": {
      "op": "DUP1"
    },
    "3032": {
      "op": "DUP3"
    },
    "3033": {
      "op": "MSTORE"
    },
    "3034": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3036": {
      "op": "SWAP1"
    },
    "3037": {
      "op": "DUP3"
    },
    "3038": {
      "op": "ADD"
    },
    "3039": {
      "op": "MSTORE"
    },
    "3040": {
      "op": "PUSH4",
      "value": "0x21717479"
    },
    "3045": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3047": {
      "op": "SHL"
    },
    "3048": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3050": {
      "op": "DUP3"
    },
    "3051": {
      "op": "ADD"
    },
    "3052": {
      "op": "MSTORE"
    },
    "3053": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3055": {
      "op": "ADD"
    },
    "3056": {
      "op": "SWAP1"
    },
    "3057": {
      "op": "JUMP"
    },
    "3058": {
      "fn": "Staker.stake",
      "offset": [
        4235,
        4259
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3059": {
      "fn": "Staker.stake",
      "offset": [
        4288,
        4298
      ],
      "op": "CALLER",
      "path": "20"
    },
    "3060": {
      "fn": "Staker.stake",
      "offset": [
        4270,
        4285
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "3062": {
      "fn": "Staker.stake",
      "offset": [
        4338,
        4360
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xBFE"
    },
    "3065": {
      "fn": "Staker.stake",
      "offset": [
        4350,
        4359
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3066": {
      "fn": "Staker.stake",
      "offset": [
        4338,
        4349
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F65"
    },
    "3069": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        4338,
        4360
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3070": {
      "fn": "Staker.stake",
      "offset": [
        4338,
        4360
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3071": {
      "fn": "Staker.stake",
      "offset": [
        4309,
        4360
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3072": {
      "fn": "Staker.stake",
      "offset": [
        4309,
        4360
      ],
      "op": "POP",
      "path": "20"
    },
    "3073": {
      "fn": "Staker.stake",
      "offset": [
        4371,
        4393
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 27,
      "value": "0xC09"
    },
    "3076": {
      "fn": "Staker.stake",
      "offset": [
        4385,
        4392
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3077": {
      "fn": "Staker.stake",
      "offset": [
        4371,
        4384
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2131"
    },
    "3080": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        4371,
        4393
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3081": {
      "fn": "Staker.stake",
      "offset": [
        4371,
        4393
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3082": {
      "fn": "Staker.stake",
      "offset": [
        4411,
        4425
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 28,
      "value": "0xC0"
    },
    "3084": {
      "fn": "Staker.stake",
      "offset": [
        4411,
        4425
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3085": {
      "fn": "Staker.stake",
      "offset": [
        4411,
        4425
      ],
      "op": "ADD",
      "path": "20"
    },
    "3086": {
      "fn": "Staker.stake",
      "offset": [
        4411,
        4425
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3087": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3089": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3091": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3093": {
      "op": "SHL"
    },
    "3094": {
      "op": "SUB"
    },
    "3095": {
      "op": "NOT"
    },
    "3096": {
      "fn": "Staker.stake",
      "offset": [
        4411,
        4435
      ],
      "op": "AND",
      "path": "20"
    },
    "3097": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3099": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3101": {
      "op": "SHL"
    },
    "3102": {
      "branch": 127,
      "fn": "Staker.stake",
      "offset": [
        4411,
        4435
      ],
      "op": "EQ",
      "path": "20"
    },
    "3103": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xC3A"
    },
    "3106": {
      "branch": 127,
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3107": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3109": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3110": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3114": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3116": {
      "op": "SHL"
    },
    "3117": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3118": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3119": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3121": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "ADD",
      "path": "20"
    },
    "3122": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "3125": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3126": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2A1D"
    },
    "3129": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        4403,
        4447
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3130": {
      "fn": "Staker.stake",
      "offset": [
        4403,
        4447
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3131": {
      "fn": "Staker.stake",
      "offset": [
        4486,
        4501
      ],
      "op": "TIMESTAMP",
      "path": "20",
      "statement": 29
    },
    "3132": {
      "fn": "Staker.stake",
      "offset": [
        4465,
        4472
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3133": {
      "fn": "Staker.stake",
      "offset": [
        4465,
        4482
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x160"
    },
    "3136": {
      "fn": "Staker.stake",
      "offset": [
        4465,
        4482
      ],
      "op": "ADD",
      "path": "20"
    },
    "3137": {
      "fn": "Staker.stake",
      "offset": [
        4465,
        4482
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3138": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3142": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3144": {
      "op": "SHL"
    },
    "3145": {
      "op": "SUB"
    },
    "3146": {
      "fn": "Staker.stake",
      "offset": [
        4465,
        4501
      ],
      "op": "AND",
      "path": "20"
    },
    "3147": {
      "fn": "Staker.stake",
      "offset": [
        4465,
        4501
      ],
      "op": "GT",
      "path": "20"
    },
    "3148": {
      "branch": 128,
      "fn": "Staker.stake",
      "offset": [
        4465,
        4501
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "3149": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xC81"
    },
    "3152": {
      "branch": 128,
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3153": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3155": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3156": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3160": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3162": {
      "op": "SHL"
    },
    "3163": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3164": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3165": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3167": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3169": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3170": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "ADD",
      "path": "20"
    },
    "3171": {
      "op": "MSTORE"
    },
    "3172": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "3174": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3176": {
      "op": "DUP3"
    },
    "3177": {
      "op": "ADD"
    },
    "3178": {
      "op": "MSTORE"
    },
    "3179": {
      "op": "PUSH6",
      "value": "0x85CDD185C9D"
    },
    "3186": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "3188": {
      "op": "SHL"
    },
    "3189": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3191": {
      "op": "DUP3"
    },
    "3192": {
      "op": "ADD"
    },
    "3193": {
      "op": "MSTORE"
    },
    "3194": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3196": {
      "op": "ADD"
    },
    "3197": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "3200": {
      "op": "JUMP"
    },
    "3201": {
      "fn": "Staker.stake",
      "offset": [
        4457,
        4512
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3202": {
      "fn": "Staker.stake",
      "offset": [
        4548,
        4563
      ],
      "op": "TIMESTAMP",
      "path": "20",
      "statement": 30
    },
    "3203": {
      "fn": "Staker.stake",
      "offset": [
        4530,
        4537
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3204": {
      "fn": "Staker.stake",
      "offset": [
        4530,
        4545
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x180"
    },
    "3207": {
      "fn": "Staker.stake",
      "offset": [
        4530,
        4545
      ],
      "op": "ADD",
      "path": "20"
    },
    "3208": {
      "fn": "Staker.stake",
      "offset": [
        4530,
        4545
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3209": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3211": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3213": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3215": {
      "op": "SHL"
    },
    "3216": {
      "op": "SUB"
    },
    "3217": {
      "fn": "Staker.stake",
      "offset": [
        4530,
        4563
      ],
      "op": "AND",
      "path": "20"
    },
    "3218": {
      "branch": 129,
      "fn": "Staker.stake",
      "offset": [
        4530,
        4563
      ],
      "op": "GT",
      "path": "20"
    },
    "3219": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xCC7"
    },
    "3222": {
      "branch": 129,
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3223": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3225": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3226": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3230": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3232": {
      "op": "SHL"
    },
    "3233": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3234": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3235": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3237": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3239": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3240": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "ADD",
      "path": "20"
    },
    "3241": {
      "op": "MSTORE"
    },
    "3242": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "3244": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3246": {
      "op": "DUP3"
    },
    "3247": {
      "op": "ADD"
    },
    "3248": {
      "op": "MSTORE"
    },
    "3249": {
      "op": "PUSH6",
      "value": "0x8595B991959"
    },
    "3256": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "3258": {
      "op": "SHL"
    },
    "3259": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3261": {
      "op": "DUP3"
    },
    "3262": {
      "op": "ADD"
    },
    "3263": {
      "op": "MSTORE"
    },
    "3264": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3266": {
      "op": "ADD"
    },
    "3267": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "3270": {
      "op": "JUMP"
    },
    "3271": {
      "fn": "Staker.stake",
      "offset": [
        4522,
        4574
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3272": {
      "fn": "Staker.stake",
      "offset": [
        4672,
        4682
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 31,
      "value": "0x3"
    },
    "3274": {
      "fn": "Staker.stake",
      "offset": [
        4672,
        4682
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3275": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3277": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3278": {
      "op": "PUSH3",
      "value": "0x7EEAC7"
    },
    "3282": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "3284": {
      "op": "SHL"
    },
    "3285": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3286": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3287": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3289": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3291": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3293": {
      "op": "SHL"
    },
    "3294": {
      "op": "SUB"
    },
    "3295": {
      "op": "DUP5"
    },
    "3296": {
      "op": "DUP2"
    },
    "3297": {
      "op": "AND"
    },
    "3298": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3300": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3301": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "ADD",
      "path": "20"
    },
    "3302": {
      "op": "MSTORE"
    },
    "3303": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4721
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "3308": {
      "op": "DUP9"
    },
    "3309": {
      "op": "DUP2"
    },
    "3310": {
      "op": "AND"
    },
    "3311": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3313": {
      "op": "DUP5"
    },
    "3314": {
      "op": "ADD"
    },
    "3315": {
      "op": "MSTORE"
    },
    "3316": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4721
      ],
      "op": "DUP8",
      "path": "20"
    },
    "3317": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4721
      ],
      "op": "AND",
      "path": "20"
    },
    "3318": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4721
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "3319": {
      "fn": "Staker.stake",
      "offset": [
        4672,
        4682
      ],
      "op": "AND",
      "path": "20"
    },
    "3320": {
      "fn": "Staker.stake",
      "offset": [
        4672,
        4682
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3321": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4694
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xFDD58E"
    },
    "3325": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4694
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3326": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3328": {
      "op": "ADD"
    },
    "3329": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "3331": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3333": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3334": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3335": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3336": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "SUB",
      "path": "20"
    },
    "3337": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3338": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP7",
      "path": "20"
    },
    "3339": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "GAS",
      "path": "20"
    },
    "3340": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "STATICCALL",
      "path": "20"
    },
    "3341": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "3342": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3343": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "3344": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xD1D"
    },
    "3347": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3348": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "3349": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "3351": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3352": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "3353": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "3354": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "3356": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "REVERT",
      "path": "20"
    },
    "3357": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3358": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "POP",
      "path": "20"
    },
    "3359": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "POP",
      "path": "20"
    },
    "3360": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "POP",
      "path": "20"
    },
    "3361": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "POP",
      "path": "20"
    },
    "3362": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3364": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3365": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "3366": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "3368": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "NOT",
      "path": "20"
    },
    "3369": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "3371": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3372": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "ADD",
      "path": "20"
    },
    "3373": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "AND",
      "path": "20"
    },
    "3374": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3375": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "ADD",
      "path": "20"
    },
    "3376": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3377": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3379": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3380": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "POP",
      "path": "20"
    },
    "3381": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3382": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "ADD",
      "path": "20"
    },
    "3383": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3384": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xD41"
    },
    "3387": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3388": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3389": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2A3E"
    },
    "3392": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        4655,
        4714
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3393": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4714
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3394": {
      "fn": "Staker.stake",
      "offset": [
        4655,
        4721
      ],
      "op": "LT",
      "path": "20"
    },
    "3395": {
      "branch": 130,
      "fn": "Staker.stake",
      "offset": [
        4655,
        4721
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "3396": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xD7B"
    },
    "3399": {
      "branch": 130,
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3400": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3402": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3403": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3407": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3409": {
      "op": "SHL"
    },
    "3410": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3411": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3412": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3414": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3416": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3417": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "ADD",
      "path": "20"
    },
    "3418": {
      "op": "MSTORE"
    },
    "3419": {
      "op": "PUSH1",
      "value": "0x9"
    },
    "3421": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3423": {
      "op": "DUP3"
    },
    "3424": {
      "op": "ADD"
    },
    "3425": {
      "op": "MSTORE"
    },
    "3426": {
      "op": "PUSH9",
      "value": "0x18985B185B98D9480F"
    },
    "3436": {
      "op": "PUSH1",
      "value": "0xBA"
    },
    "3438": {
      "op": "SHL"
    },
    "3439": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3441": {
      "op": "DUP3"
    },
    "3442": {
      "op": "ADD"
    },
    "3443": {
      "op": "MSTORE"
    },
    "3444": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3446": {
      "op": "ADD"
    },
    "3447": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "3450": {
      "op": "JUMP"
    },
    "3451": {
      "fn": "Staker.stake",
      "offset": [
        4634,
        4756
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3452": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3456": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3458": {
      "op": "SHL"
    },
    "3459": {
      "op": "SUB"
    },
    "3460": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3461": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "AND",
      "path": "20"
    },
    "3462": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4819
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "3464": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3465": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3466": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3467": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4829
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "3469": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "3471": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3472": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3473": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3474": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3476": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3477": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3478": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4838
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "3479": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "3484": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3485": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "DUP12",
      "path": "20"
    },
    "3486": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "AND",
      "path": "20"
    },
    "3487": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3488": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3489": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3490": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3491": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3492": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3493": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3494": {
      "fn": "Staker.stake",
      "offset": [
        4822,
        4849
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "3495": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3496": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3497": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA0"
    },
    "3499": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3500": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "ADD",
      "path": "20"
    },
    "3501": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3502": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3503": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3504": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3505": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3506": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3507": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "AND",
      "path": "20"
    },
    "3508": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3509": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3510": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3512": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3514": {
      "op": "SHL"
    },
    "3515": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3516": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DIV",
      "path": "20"
    },
    "3517": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3518": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "AND",
      "path": "20"
    },
    "3519": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3520": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP8",
      "path": "20"
    },
    "3521": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "ADD",
      "path": "20"
    },
    "3522": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3523": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3525": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3527": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3529": {
      "op": "SHL"
    },
    "3530": {
      "op": "SUB"
    },
    "3531": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3533": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3535": {
      "op": "SHL"
    },
    "3536": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3537": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3538": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DIV",
      "path": "20"
    },
    "3539": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3540": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "AND",
      "path": "20"
    },
    "3541": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3542": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP7",
      "path": "20"
    },
    "3543": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "ADD",
      "path": "20"
    },
    "3544": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3545": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "3547": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3548": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3549": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "ADD",
      "path": "20"
    },
    "3550": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3551": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "3553": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3554": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3555": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "ADD",
      "path": "20"
    },
    "3556": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3557": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3558": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3559": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3560": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "3562": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "3563": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3564": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "ADD",
      "path": "20"
    },
    "3565": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3566": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "3568": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3569": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "DUP7",
      "path": "20"
    },
    "3570": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "ADD",
      "path": "20"
    },
    "3571": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3572": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3573": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3574": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3575": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4902
      ],
      "op": "SWAP10",
      "path": "20"
    },
    "3576": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4902
      ],
      "op": "DUP10",
      "path": "20"
    },
    "3577": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4902
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3578": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4893
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "3580": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4902
      ],
      "op": "DUP9",
      "path": "20"
    },
    "3581": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4902
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3582": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4902
      ],
      "op": "DUP7",
      "path": "20"
    },
    "3583": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4902
      ],
      "op": "DUP10",
      "path": "20"
    },
    "3584": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4902
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "3585": {
      "fn": "Staker.stake",
      "offset": [
        4903,
        4913
      ],
      "op": "DUP12",
      "path": "20"
    },
    "3586": {
      "fn": "Staker.stake",
      "offset": [
        4903,
        4913
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3587": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3588": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "SWAP7",
      "path": "20"
    },
    "3589": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "AND",
      "path": "20"
    },
    "3590": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "DUP10",
      "path": "20"
    },
    "3591": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3592": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "3593": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "DUP8",
      "path": "20"
    },
    "3594": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3595": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3596": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "DUP9",
      "path": "20"
    },
    "3597": {
      "fn": "Staker.stake",
      "offset": [
        4885,
        4914
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "3598": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP7",
      "path": "20"
    },
    "3599": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3600": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP10",
      "path": "20"
    },
    "3601": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP11",
      "path": "20"
    },
    "3602": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "ADD",
      "path": "20"
    },
    "3603": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP8",
      "path": "20"
    },
    "3604": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3605": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3606": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3607": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP11",
      "path": "20"
    },
    "3608": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3609": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3610": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3611": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "ADD",
      "path": "20"
    },
    "3612": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3613": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3614": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3615": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "AND",
      "path": "20"
    },
    "3616": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "3617": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP9",
      "path": "20"
    },
    "3618": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "ADD",
      "path": "20"
    },
    "3619": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "3620": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3621": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "3622": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3623": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3624": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3625": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "ADD",
      "path": "20"
    },
    "3626": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3627": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "3628": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP7",
      "path": "20"
    },
    "3629": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "ADD",
      "path": "20"
    },
    "3630": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "3631": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3632": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "3633": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3634": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "3636": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3637": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "3638": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "ADD",
      "path": "20"
    },
    "3639": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3640": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3641": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3642": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "ADD",
      "path": "20"
    },
    "3643": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3644": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3645": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3646": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3647": {
      "fn": "Staker.stake",
      "offset": [
        4796,
        4849
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3648": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3649": {
      "fn": "Staker.stake",
      "offset": [
        4950,
        4993
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xE4B"
    },
    "3652": {
      "fn": "Staker.stake",
      "offset": [
        4830,
        4837
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3653": {
      "fn": "Staker.stake",
      "offset": [
        4903,
        4910
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3654": {
      "fn": "Staker.stake",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3655": {
      "fn": "Staker.stake",
      "offset": [
        4950,
        4970
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2170"
    },
    "3658": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        4950,
        4993
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3659": {
      "fn": "Staker.stake",
      "offset": [
        4950,
        4993
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3660": {
      "fn": "Staker.stake",
      "offset": [
        4925,
        4993
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3661": {
      "op": "POP"
    },
    "3662": {
      "fn": "Staker.stake",
      "offset": [
        5064,
        5082
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3663": {
      "branch": 131,
      "fn": "Staker.stake",
      "offset": [
        5064,
        5082
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "3664": {
      "fn": "Staker.stake",
      "offset": [
        5060,
        5226
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xEB5"
    },
    "3667": {
      "branch": 131,
      "fn": "Staker.stake",
      "offset": [
        5060,
        5226
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3668": {
      "fn": "Staker.stake",
      "offset": [
        5098,
        5108
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 32,
      "value": "0x4"
    },
    "3670": {
      "fn": "Staker.stake",
      "offset": [
        5098,
        5108
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3671": {
      "fn": "Staker.stake",
      "offset": [
        5098,
        5146
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xE6A"
    },
    "3674": {
      "fn": "Staker.stake",
      "offset": [
        5098,
        5146
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3675": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3677": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3679": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3681": {
      "op": "SHL"
    },
    "3682": {
      "op": "SUB"
    },
    "3683": {
      "fn": "Staker.stake",
      "offset": [
        5098,
        5108
      ],
      "op": "AND",
      "path": "20"
    },
    "3684": {
      "fn": "Staker.stake",
      "offset": [
        5122,
        5129
      ],
      "op": "DUP7",
      "path": "20"
    },
    "3685": {
      "fn": "Staker.stake",
      "offset": [
        5131,
        5145
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3686": {
      "fn": "Staker.stake",
      "offset": [
        5098,
        5121
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x20FC"
    },
    "3689": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        5098,
        5146
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3690": {
      "fn": "Staker.stake",
      "offset": [
        5098,
        5146
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3691": {
      "fn": "Staker.stake",
      "offset": [
        5189,
        5198
      ],
      "op": "DUP8",
      "path": "20",
      "statement": 33
    },
    "3692": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "3697": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "AND",
      "path": "20"
    },
    "3698": {
      "fn": "Staker.stake",
      "offset": [
        5180,
        5187
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3699": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3701": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3703": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3705": {
      "op": "SHL"
    },
    "3706": {
      "op": "SUB"
    },
    "3707": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "AND",
      "path": "20"
    },
    "3708": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "PUSH32",
      "path": "20",
      "value": "0x9BF028F26713DBFD10F1790F08EE2C2DF9A1D82C0F238230BB0B64AF2AAB4A9E"
    },
    "3741": {
      "fn": "Staker.stake",
      "offset": [
        5200,
        5214
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3742": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3744": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3745": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xEAC"
    },
    "3748": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3749": {
      "op": "DUP2"
    },
    "3750": {
      "op": "MSTORE"
    },
    "3751": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3753": {
      "op": "ADD"
    },
    "3754": {
      "op": "SWAP1"
    },
    "3755": {
      "op": "JUMP"
    },
    "3756": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3757": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3759": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3760": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3761": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3762": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "SUB",
      "path": "20"
    },
    "3763": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3764": {
      "fn": "Staker.stake",
      "offset": [
        5165,
        5215
      ],
      "op": "LOG3",
      "path": "20"
    },
    "3765": {
      "fn": "Staker.stake",
      "offset": [
        5060,
        5226
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3766": {
      "fn": "Staker.stake",
      "offset": [
        5236,
        5250
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "3768": {
      "fn": "Staker.stake",
      "offset": [
        5253,
        5298
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xEC6"
    },
    "3771": {
      "fn": "Staker.stake",
      "offset": [
        5264,
        5279
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "3772": {
      "fn": "Staker.stake",
      "offset": [
        5282,
        5289
      ],
      "op": "DUP7",
      "path": "20"
    },
    "3773": {
      "fn": "Staker.stake",
      "offset": [
        5282,
        5297
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x180"
    },
    "3776": {
      "fn": "Staker.stake",
      "offset": [
        5282,
        5297
      ],
      "op": "ADD",
      "path": "20"
    },
    "3777": {
      "fn": "Staker.stake",
      "offset": [
        5282,
        5297
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3778": {
      "fn": "Staker.stake",
      "offset": [
        5253,
        5256
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2040"
    },
    "3781": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        5253,
        5298
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3782": {
      "fn": "Staker.stake",
      "offset": [
        5253,
        5298
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3783": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5372
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3784": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5372
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3785": {
      "fn": "Staker.stake",
      "offset": [
        5236,
        5298
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3786": {
      "fn": "Staker.stake",
      "offset": [
        5236,
        5298
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3787": {
      "op": "POP"
    },
    "3788": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5376
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "3793": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5376
      ],
      "op": "AND",
      "path": "20"
    },
    "3794": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5376
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "3795": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5376
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3796": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5376
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "3797": {
      "branch": 132,
      "fn": "Staker.stake",
      "offset": [
        5362,
        5376
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3798": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5406
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xEF4"
    },
    "3801": {
      "branch": 132,
      "fn": "Staker.stake",
      "offset": [
        5362,
        5406
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3802": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5406
      ],
      "op": "POP",
      "path": "20"
    },
    "3803": {
      "fn": "Staker.stake",
      "offset": [
        5399,
        5406
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3804": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3806": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3808": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3810": {
      "op": "SHL"
    },
    "3811": {
      "op": "SUB"
    },
    "3812": {
      "fn": "Staker.stake",
      "offset": [
        5380,
        5406
      ],
      "op": "AND",
      "path": "20"
    },
    "3813": {
      "fn": "Staker.stake",
      "offset": [
        5380,
        5386
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3814": {
      "fn": "Staker.stake",
      "offset": [
        5380,
        5396
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3816": {
      "fn": "Staker.stake",
      "offset": [
        5380,
        5396
      ],
      "op": "ADD",
      "path": "20"
    },
    "3817": {
      "fn": "Staker.stake",
      "offset": [
        5380,
        5396
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3818": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3820": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3822": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3824": {
      "op": "SHL"
    },
    "3825": {
      "op": "SUB"
    },
    "3826": {
      "fn": "Staker.stake",
      "offset": [
        5380,
        5406
      ],
      "op": "AND",
      "path": "20"
    },
    "3827": {
      "branch": 133,
      "fn": "Staker.stake",
      "offset": [
        5380,
        5406
      ],
      "op": "LT",
      "path": "20"
    },
    "3828": {
      "fn": "Staker.stake",
      "offset": [
        5362,
        5406
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3829": {
      "fn": "Staker.stake",
      "offset": [
        5358,
        5624
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "3830": {
      "fn": "Staker.stake",
      "offset": [
        5358,
        5624
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xF39"
    },
    "3833": {
      "branch": 133,
      "fn": "Staker.stake",
      "offset": [
        5358,
        5624
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3834": {
      "fn": "Staker.stake",
      "offset": [
        5492,
        5505
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 34,
      "value": "0x80"
    },
    "3836": {
      "fn": "Staker.stake",
      "offset": [
        5492,
        5505
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3837": {
      "fn": "Staker.stake",
      "offset": [
        5492,
        5505
      ],
      "op": "ADD",
      "path": "20"
    },
    "3838": {
      "fn": "Staker.stake",
      "offset": [
        5492,
        5505
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3839": {
      "fn": "Staker.stake",
      "offset": [
        5479,
        5489
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3840": {
      "fn": "Staker.stake",
      "offset": [
        5479,
        5489
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3841": {
      "fn": "Staker.stake",
      "offset": [
        5445,
        5613
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xF24"
    },
    "3844": {
      "fn": "Staker.stake",
      "offset": [
        5445,
        5613
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3845": {
      "fn": "Staker.stake",
      "offset": [
        5479,
        5505
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xF13"
    },
    "3848": {
      "fn": "Staker.stake",
      "offset": [
        5479,
        5505
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3849": {
      "fn": "Staker.stake",
      "offset": [
        5479,
        5505
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "3854": {
      "fn": "Staker.stake",
      "offset": [
        5479,
        5505
      ],
      "op": "AND",
      "path": "20"
    },
    "3855": {
      "fn": "Staker.stake",
      "offset": [
        5479,
        5505
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "3858": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        5479,
        5505
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3859": {
      "fn": "Staker.stake",
      "offset": [
        5479,
        5505
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3860": {
      "fn": "Staker.stake",
      "offset": [
        5523,
        5529
      ],
      "op": "DUP6",
      "path": "20"
    },
    "3861": {
      "fn": "Staker.stake",
      "offset": [
        5523,
        5539
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3863": {
      "fn": "Staker.stake",
      "offset": [
        5523,
        5539
      ],
      "op": "ADD",
      "path": "20"
    },
    "3864": {
      "fn": "Staker.stake",
      "offset": [
        5523,
        5539
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3865": {
      "fn": "Staker.stake",
      "offset": [
        5557,
        5564
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3866": {
      "fn": "Staker.stake",
      "offset": [
        5582,
        5589
      ],
      "op": "DUP9",
      "path": "20"
    },
    "3867": {
      "fn": "Staker.stake",
      "offset": [
        5582,
        5599
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x140"
    },
    "3870": {
      "fn": "Staker.stake",
      "offset": [
        5582,
        5599
      ],
      "op": "ADD",
      "path": "20"
    },
    "3871": {
      "fn": "Staker.stake",
      "offset": [
        5582,
        5599
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3872": {
      "fn": "Staker.stake",
      "offset": [
        5445,
        5461
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB26"
    },
    "3875": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        5445,
        5613
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3876": {
      "fn": "Staker.stake",
      "offset": [
        5445,
        5613
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3877": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5428
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3878": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5441
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "3880": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5441
      ],
      "op": "ADD",
      "path": "20"
    },
    "3881": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3882": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3883": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3884": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xF35"
    },
    "3887": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3888": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3889": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "3892": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        5422,
        5613
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3893": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3894": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3895": {
      "fn": "Staker.stake",
      "offset": [
        5422,
        5613
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3896": {
      "op": "POP"
    },
    "3897": {
      "fn": "Staker.stake",
      "offset": [
        5358,
        5624
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3898": {
      "fn": "Staker.stake",
      "offset": [
        5648,
        5651
      ],
      "op": "DUP8",
      "path": "20",
      "statement": 35
    },
    "3899": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5640
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3900": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5644
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "3902": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5644
      ],
      "op": "ADD",
      "path": "20"
    },
    "3903": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3904": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3905": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3906": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xF4B"
    },
    "3909": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3910": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3911": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2A57"
    },
    "3914": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        5634,
        5651
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3915": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3916": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "3921": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3922": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3923": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "AND",
      "path": "20"
    },
    "3924": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3925": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3926": {
      "fn": "Staker.stake",
      "offset": [
        5634,
        5651
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3927": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3929": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3931": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3933": {
      "op": "SHL"
    },
    "3934": {
      "op": "SUB"
    },
    "3935": {
      "fn": "Staker.stake",
      "offset": [
        5687,
        5702
      ],
      "op": "TIMESTAMP",
      "path": "20",
      "statement": 36
    },
    "3936": {
      "fn": "Staker.stake",
      "offset": [
        5661,
        5703
      ],
      "op": "AND",
      "path": "20"
    },
    "3937": {
      "fn": "Staker.stake",
      "offset": [
        5661,
        5677
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3939": {
      "fn": "Staker.stake",
      "offset": [
        5661,
        5677
      ],
      "op": "DUP8",
      "path": "20"
    },
    "3940": {
      "fn": "Staker.stake",
      "offset": [
        5661,
        5677
      ],
      "op": "ADD",
      "path": "20"
    },
    "3941": {
      "fn": "Staker.stake",
      "offset": [
        5661,
        5703
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3942": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "DUP5",
      "path": "20",
      "statement": 37
    },
    "3943": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3944": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3945": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "DUP11",
      "path": "20"
    },
    "3946": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "AND",
      "path": "20"
    },
    "3947": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3948": {
      "op": "POP"
    },
    "3949": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5717
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3950": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5717
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3951": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xF79"
    },
    "3954": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3955": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3956": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3957": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x29AF"
    },
    "3960": {
      "fn": "Staker.stake",
      "jump": "i",
      "offset": [
        5714,
        5728
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3961": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3962": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3963": {
      "fn": "Staker.stake",
      "offset": [
        5714,
        5728
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3964": {
      "op": "POP"
    },
    "3965": {
      "op": "POP"
    },
    "3966": {
      "op": "POP"
    },
    "3967": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3969": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3971": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3973": {
      "op": "SHL"
    },
    "3974": {
      "op": "SUB"
    },
    "3975": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "SWAP4",
      "path": "20",
      "statement": 38
    },
    "3976": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3977": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "3978": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "AND",
      "path": "20"
    },
    "3979": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "3981": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3982": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3983": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3984": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "3986": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "3988": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3989": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3990": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3991": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3993": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3994": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "DUP4",
      "path": "20"
    },
    "3995": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5755
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "3996": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "4001": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "SWAP11",
      "path": "20"
    },
    "4002": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "DUP12",
      "path": "20"
    },
    "4003": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "AND",
      "path": "20"
    },
    "4004": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "DUP5",
      "path": "20"
    },
    "4005": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4006": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4007": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4008": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4009": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4010": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5766
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "4011": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP6",
      "path": "20"
    },
    "4012": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4013": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4014": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4015": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP8",
      "path": "20"
    },
    "4016": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP6",
      "path": "20"
    },
    "4017": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "ADD",
      "path": "20"
    },
    "4018": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4019": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP9",
      "path": "20"
    },
    "4020": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP6",
      "path": "20"
    },
    "4021": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "ADD",
      "path": "20"
    },
    "4022": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4023": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4024": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP15",
      "path": "20"
    },
    "4025": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "AND",
      "path": "20"
    },
    "4026": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4035": {
      "op": "NOT"
    },
    "4036": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4037": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4038": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "AND",
      "path": "20"
    },
    "4039": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "OR",
      "path": "20"
    },
    "4040": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4042": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4044": {
      "op": "SHL"
    },
    "4045": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4046": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP16",
      "path": "20"
    },
    "4047": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "AND",
      "path": "20"
    },
    "4048": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4049": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4050": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4051": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "MUL",
      "path": "20"
    },
    "4052": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "OR",
      "path": "20"
    },
    "4053": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4062": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4064": {
      "op": "SHL"
    },
    "4065": {
      "op": "NOT"
    },
    "4066": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "AND",
      "path": "20"
    },
    "4067": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4069": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4071": {
      "op": "SHL"
    },
    "4072": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4074": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4076": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4078": {
      "op": "SHL"
    },
    "4079": {
      "op": "SUB"
    },
    "4080": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "4081": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP5",
      "path": "20"
    },
    "4082": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "AND",
      "path": "20"
    },
    "4083": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "MUL",
      "path": "20"
    },
    "4084": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "OR",
      "path": "20"
    },
    "4085": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4086": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "4087": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "4089": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4090": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP10",
      "path": "20"
    },
    "4091": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "ADD",
      "path": "20"
    },
    "4092": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4093": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4095": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4096": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP7",
      "path": "20"
    },
    "4097": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "ADD",
      "path": "20"
    },
    "4098": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4099": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4100": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4101": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "4102": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "4104": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4105": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP10",
      "path": "20"
    },
    "4106": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "ADD",
      "path": "20"
    },
    "4107": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4108": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "4110": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "4111": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "DUP6",
      "path": "20"
    },
    "4112": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "ADD",
      "path": "20"
    },
    "4113": {
      "fn": "Staker.stake",
      "offset": [
        5739,
        5775
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "4114": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5802
      ],
      "op": "SWAP7",
      "path": "20",
      "statement": 39
    },
    "4115": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5802
      ],
      "op": "DUP7",
      "path": "20"
    },
    "4116": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5802
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4117": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5793
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "4119": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5802
      ],
      "op": "DUP6",
      "path": "20"
    },
    "4120": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5802
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4121": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5802
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4122": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5802
      ],
      "op": "DUP7",
      "path": "20"
    },
    "4123": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5802
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "4124": {
      "fn": "Staker.stake",
      "offset": [
        5803,
        5813
      ],
      "op": "SWAP9",
      "path": "20"
    },
    "4125": {
      "fn": "Staker.stake",
      "offset": [
        5803,
        5813
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4126": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4127": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "SWAP13",
      "path": "20"
    },
    "4128": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "AND",
      "path": "20"
    },
    "4129": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "DUP6",
      "path": "20"
    },
    "4130": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4131": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "SWAP7",
      "path": "20"
    },
    "4132": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4133": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4134": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4135": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4136": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4137": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5814
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "4138": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "DUP8",
      "path": "20"
    },
    "4139": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4140": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4141": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "4142": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4143": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "DUP8",
      "path": "20"
    },
    "4144": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "ADD",
      "path": "20"
    },
    "4145": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4146": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4147": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "DUP7",
      "path": "20"
    },
    "4148": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "ADD",
      "path": "20"
    },
    "4149": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4150": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4151": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4152": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP12",
      "path": "20"
    },
    "4153": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "AND",
      "path": "20"
    },
    "4154": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP7",
      "path": "20"
    },
    "4155": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "AND",
      "path": "20"
    },
    "4156": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "4157": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4158": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "4159": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "OR",
      "path": "20"
    },
    "4160": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4161": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP9",
      "path": "20"
    },
    "4162": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "4163": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4164": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "DUP5",
      "path": "20"
    },
    "4165": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "ADD",
      "path": "20"
    },
    "4166": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4167": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4168": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "DUP8",
      "path": "20"
    },
    "4169": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "ADD",
      "path": "20"
    },
    "4170": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4171": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4172": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4173": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "4174": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4175": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "ADD",
      "path": "20"
    },
    "4176": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4177": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "4179": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4180": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "4181": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "ADD",
      "path": "20"
    },
    "4182": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "4183": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4184": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "4185": {
      "fn": "Staker.stake",
      "offset": [
        5785,
        5820
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "4186": {
      "op": "POP"
    },
    "4187": {
      "op": "SWAP1"
    },
    "4188": {
      "op": "SWAP2"
    },
    "4189": {
      "fn": "Staker.stake",
      "offset": [
        4120,
        5849
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4190": {
      "op": "POP"
    },
    "4191": {
      "fn": "Staker.stake",
      "jump": "o",
      "offset": [
        4120,
        5849
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4192": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4193": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4195": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4196": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4198": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4200": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4202": {
      "op": "SHL"
    },
    "4203": {
      "op": "SUB"
    },
    "4204": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "4205": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "11"
    },
    "4206": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "0"
    },
    "4207": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x108A"
    },
    "4210": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4211": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4213": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4214": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4218": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4220": {
      "op": "SHL"
    },
    "4221": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4222": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4223": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4225": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "0"
    },
    "4226": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x467"
    },
    "4229": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4230": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A74"
    },
    "4233": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4234": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4235": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1690
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 40,
      "value": "0x1094"
    },
    "4238": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1687,
        1688
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4240": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1678
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2291"
    },
    "4243": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1669,
        1690
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4244": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1690
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4245": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4246": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4247": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4249": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4252": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4254": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4256": {
      "op": "SHL"
    },
    "4257": {
      "op": "SUB"
    },
    "4258": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "4259": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "11"
    },
    "4260": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "0"
    },
    "4261": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10C0"
    },
    "4264": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4265": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4267": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4268": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4272": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4274": {
      "op": "SHL"
    },
    "4275": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4276": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4277": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4279": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "0"
    },
    "4280": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x467"
    },
    "4283": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4284": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A74"
    },
    "4287": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4288": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4289": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3424,
        3444
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 41,
      "value": "0x10C9"
    },
    "4292": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3434,
        3443
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4293": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3424,
        3433
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x22E3"
    },
    "4296": {
      "fn": "Staker.changeAdmin",
      "jump": "i",
      "offset": [
        3424,
        3444
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4297": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3424,
        3444
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4298": {
      "fn": "Staker.changeAdmin",
      "offset": [
        3355,
        3451
      ],
      "op": "POP",
      "path": "20"
    },
    "4299": {
      "fn": "Staker.changeAdmin",
      "jump": "o",
      "offset": [
        3355,
        3451
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4300": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4301": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16065,
        16083
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1100"
    },
    "4304": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4306": {
      "op": "MLOAD"
    },
    "4307": {
      "op": "DUP1"
    },
    "4308": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4310": {
      "op": "ADD"
    },
    "4311": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4313": {
      "op": "MSTORE"
    },
    "4314": {
      "op": "DUP1"
    },
    "4315": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4317": {
      "op": "DUP2"
    },
    "4318": {
      "op": "MSTORE"
    },
    "4319": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4321": {
      "op": "ADD"
    },
    "4322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4324": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4326": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4328": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4330": {
      "op": "SHL"
    },
    "4331": {
      "op": "SUB"
    },
    "4332": {
      "op": "AND"
    },
    "4333": {
      "op": "DUP2"
    },
    "4334": {
      "op": "MSTORE"
    },
    "4335": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4337": {
      "op": "ADD"
    },
    "4338": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4340": {
      "op": "DUP2"
    },
    "4341": {
      "op": "MSTORE"
    },
    "4342": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4344": {
      "op": "ADD"
    },
    "4345": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4347": {
      "op": "DUP2"
    },
    "4348": {
      "op": "MSTORE"
    },
    "4349": {
      "op": "POP"
    },
    "4350": {
      "op": "SWAP1"
    },
    "4351": {
      "op": "JUMP"
    },
    "4352": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16065,
        16083
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4353": {
      "op": "POP"
    },
    "4354": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4356": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4358": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4360": {
      "op": "SHL"
    },
    "4361": {
      "op": "SUB"
    },
    "4362": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "DUP3",
      "path": "20",
      "statement": 42
    },
    "4363": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "AND",
      "path": "20"
    },
    "4364": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "4366": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4367": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4368": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4369": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16110
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "4371": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "4373": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4374": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4375": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4376": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "4378": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4379": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4380": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16116
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "4381": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "4386": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "DUP6",
      "path": "20"
    },
    "4387": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "AND",
      "path": "20"
    },
    "4388": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "DUP5",
      "path": "20"
    },
    "4389": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4390": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4391": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4392": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4393": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4394": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4395": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16102,
        16127
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "4396": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4397": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4398": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "4400": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4401": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "ADD",
      "path": "20"
    },
    "4402": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP5",
      "path": "20"
    },
    "4403": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4404": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4405": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4406": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4407": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4408": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "4410": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4411": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "ADD",
      "path": "20"
    },
    "4412": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4413": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4415": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4417": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4419": {
      "op": "SHL"
    },
    "4420": {
      "op": "SUB"
    },
    "4421": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "AND",
      "path": "20"
    },
    "4422": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4423": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4424": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "ADD",
      "path": "20"
    },
    "4425": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4426": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4427": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4428": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4429": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "4431": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4432": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "ADD",
      "path": "20"
    },
    "4433": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4434": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4435": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4436": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "ADD",
      "path": "20"
    },
    "4437": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4438": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4439": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4440": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4441": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "4443": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4444": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4445": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "ADD",
      "path": "20"
    },
    "4446": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4447": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "4449": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4450": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "ADD",
      "path": "20"
    },
    "4451": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        16095,
        16127
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4452": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4453": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4454": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "POP",
      "path": "20"
    },
    "4455": {
      "fn": "Staker.getHoldingInfoRaw",
      "offset": [
        15961,
        16134
      ],
      "op": "POP",
      "path": "20"
    },
    "4456": {
      "fn": "Staker.getHoldingInfoRaw",
      "jump": "o",
      "offset": [
        15961,
        16134
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4457": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2895,
        3191
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4458": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2966,
        2976
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 43,
      "value": "0x3"
    },
    "4460": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2966,
        2976
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4461": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4463": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4465": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4467": {
      "op": "SHL"
    },
    "4468": {
      "op": "SUB"
    },
    "4469": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2966,
        2976
      ],
      "op": "AND",
      "path": "20"
    },
    "4470": {
      "branch": 134,
      "fn": "Staker.setProjectMan",
      "offset": [
        2966,
        3003
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "4471": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x11AB"
    },
    "4474": {
      "branch": 134,
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "4475": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "4477": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4478": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4482": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4484": {
      "op": "SHL"
    },
    "4485": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4486": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4487": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4489": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "4491": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4492": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "ADD",
      "path": "20"
    },
    "4493": {
      "op": "MSTORE"
    },
    "4494": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "4496": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4498": {
      "op": "DUP3"
    },
    "4499": {
      "op": "ADD"
    },
    "4500": {
      "op": "MSTORE"
    },
    "4501": {
      "op": "PUSH6",
      "value": "0x1C1B481CD95D"
    },
    "4508": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "4510": {
      "op": "SHL"
    },
    "4511": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4513": {
      "op": "DUP3"
    },
    "4514": {
      "op": "ADD"
    },
    "4515": {
      "op": "MSTORE"
    },
    "4516": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4518": {
      "op": "ADD"
    },
    "4519": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "4522": {
      "op": "JUMP"
    },
    "4523": {
      "fn": "Staker.setProjectMan",
      "offset": [
        2958,
        3014
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4524": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4526": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4527": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4529": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4531": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4533": {
      "op": "SHL"
    },
    "4534": {
      "op": "SUB"
    },
    "4535": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "4536": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3032,
        3041
      ],
      "op": "ORIGIN",
      "path": "20",
      "statement": 44
    },
    "4537": {
      "branch": 135,
      "fn": "Staker.setProjectMan",
      "offset": [
        3032,
        3052
      ],
      "op": "EQ",
      "path": "20"
    },
    "4538": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x11EE"
    },
    "4541": {
      "branch": 135,
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "4542": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "4544": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4545": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4549": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4551": {
      "op": "SHL"
    },
    "4552": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4553": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4554": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4556": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "4558": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4559": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "ADD",
      "path": "20"
    },
    "4560": {
      "op": "MSTORE"
    },
    "4561": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "4563": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4565": {
      "op": "DUP3"
    },
    "4566": {
      "op": "ADD"
    },
    "4567": {
      "op": "MSTORE"
    },
    "4568": {
      "op": "PUSH6",
      "value": "0x10B7BBB732B9"
    },
    "4575": {
      "op": "PUSH1",
      "value": "0xD1"
    },
    "4577": {
      "op": "SHL"
    },
    "4578": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4580": {
      "op": "DUP3"
    },
    "4581": {
      "op": "ADD"
    },
    "4582": {
      "op": "MSTORE"
    },
    "4583": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4585": {
      "op": "ADD"
    },
    "4586": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "4589": {
      "op": "JUMP"
    },
    "4590": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3024,
        3063
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4591": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3083
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 45,
      "value": "0x3"
    },
    "4593": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4594": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4595": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4599": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4601": {
      "op": "SHL"
    },
    "4602": {
      "op": "SUB"
    },
    "4603": {
      "op": "NOT"
    },
    "4604": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "AND",
      "path": "20"
    },
    "4605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4607": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4609": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4611": {
      "op": "SHL"
    },
    "4612": {
      "op": "SUB"
    },
    "4613": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4614": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4615": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "AND",
      "path": "20"
    },
    "4616": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4617": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4618": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4619": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "OR",
      "path": "20"
    },
    "4620": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4621": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4622": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "4623": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3120,
        3130
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 46,
      "value": "0x4"
    },
    "4625": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3120,
        3130
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4626": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3120,
        3184
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x10C9"
    },
    "4629": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3120,
        3184
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4630": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3120,
        3130
      ],
      "op": "AND",
      "path": "20"
    },
    "4631": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3073,
        3110
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4632": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4634": {
      "op": "NOT"
    },
    "4635": {
      "fn": "Staker.setProjectMan",
      "offset": [
        3120,
        3152
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1E63"
    },
    "4638": {
      "fn": "Staker.setProjectMan",
      "jump": "i",
      "offset": [
        3120,
        3184
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4639": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15338,
        15955
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4640": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15439,
        15457
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1253"
    },
    "4643": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4645": {
      "op": "MLOAD"
    },
    "4646": {
      "op": "DUP1"
    },
    "4647": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4649": {
      "op": "ADD"
    },
    "4650": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4652": {
      "op": "MSTORE"
    },
    "4653": {
      "op": "DUP1"
    },
    "4654": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4656": {
      "op": "DUP2"
    },
    "4657": {
      "op": "MSTORE"
    },
    "4658": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4660": {
      "op": "ADD"
    },
    "4661": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4663": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4665": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4667": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4669": {
      "op": "SHL"
    },
    "4670": {
      "op": "SUB"
    },
    "4671": {
      "op": "AND"
    },
    "4672": {
      "op": "DUP2"
    },
    "4673": {
      "op": "MSTORE"
    },
    "4674": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4676": {
      "op": "ADD"
    },
    "4677": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4679": {
      "op": "DUP2"
    },
    "4680": {
      "op": "MSTORE"
    },
    "4681": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4683": {
      "op": "ADD"
    },
    "4684": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4686": {
      "op": "DUP2"
    },
    "4687": {
      "op": "MSTORE"
    },
    "4688": {
      "op": "POP"
    },
    "4689": {
      "op": "SWAP1"
    },
    "4690": {
      "op": "JUMP"
    },
    "4691": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15439,
        15457
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4692": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4694": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4696": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4698": {
      "op": "SHL"
    },
    "4699": {
      "op": "SUB"
    },
    "4700": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4701": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "AND",
      "path": "20"
    },
    "4702": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15496
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "4704": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4705": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4706": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4707": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15507
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "4709": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "4711": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4712": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4713": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4714": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "4716": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4717": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4718": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15513
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "4719": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "4724": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "DUP7",
      "path": "20"
    },
    "4725": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "AND",
      "path": "20"
    },
    "4726": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "DUP5",
      "path": "20"
    },
    "4727": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4728": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4729": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4730": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4731": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4732": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15499,
        15524
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "4733": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4734": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4735": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "4737": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4738": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "ADD",
      "path": "20"
    },
    "4739": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4740": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4741": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4742": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4743": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4744": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4745": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "4747": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4748": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "ADD",
      "path": "20"
    },
    "4749": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4750": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4752": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4754": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4756": {
      "op": "SHL"
    },
    "4757": {
      "op": "SUB"
    },
    "4758": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "AND",
      "path": "20"
    },
    "4759": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "4760": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4761": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "ADD",
      "path": "20"
    },
    "4762": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "4763": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4764": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "4765": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4766": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "4768": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4769": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "ADD",
      "path": "20"
    },
    "4770": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4771": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4772": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4773": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "ADD",
      "path": "20"
    },
    "4774": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4775": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4776": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4777": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4778": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "4780": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "ADD",
      "path": "20"
    },
    "4781": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "4782": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "4784": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4785": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "ADD",
      "path": "20"
    },
    "4786": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "4787": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15469,
        15524
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4788": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15563,
        15585
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x12BC"
    },
    "4791": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15514,
        15523
      ],
      "op": "DUP5",
      "path": "20"
    },
    "4792": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15563,
        15574
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F65"
    },
    "4795": {
      "fn": "Staker.getHoldingInfo",
      "jump": "i",
      "offset": [
        15563,
        15585
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4796": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15563,
        15585
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4797": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15534,
        15585
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4798": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15534,
        15585
      ],
      "op": "POP",
      "path": "20"
    },
    "4799": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15595,
        15609
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "4801": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15612,
        15657
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x12CF"
    },
    "4804": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15623,
        15638
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "4805": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15641,
        15648
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4806": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15641,
        15656
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x180"
    },
    "4809": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15641,
        15656
      ],
      "op": "ADD",
      "path": "20"
    },
    "4810": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15641,
        15656
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4811": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15612,
        15615
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2040"
    },
    "4814": {
      "fn": "Staker.getHoldingInfo",
      "jump": "i",
      "offset": [
        15612,
        15657
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4815": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15612,
        15657
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4816": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15595,
        15657
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4817": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15595,
        15657
      ],
      "op": "POP",
      "path": "20"
    },
    "4818": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15693,
        15700
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4819": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4821": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4823": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4825": {
      "op": "SHL"
    },
    "4826": {
      "op": "SUB"
    },
    "4827": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15672,
        15700
      ],
      "op": "AND",
      "path": "20"
    },
    "4828": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15672,
        15680
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4829": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15672,
        15690
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "4831": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15672,
        15690
      ],
      "op": "ADD",
      "path": "20"
    },
    "4832": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15672,
        15690
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4833": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4835": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4837": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4839": {
      "op": "SHL"
    },
    "4840": {
      "op": "SUB"
    },
    "4841": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15672,
        15700
      ],
      "op": "AND",
      "path": "20"
    },
    "4842": {
      "branch": 136,
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15672,
        15700
      ],
      "op": "GT",
      "path": "20"
    },
    "4843": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15668,
        15742
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "4844": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15668,
        15742
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x12FA"
    },
    "4847": {
      "branch": 136,
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15668,
        15742
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "4848": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15723,
        15731
      ],
      "op": "DUP3",
      "path": "20",
      "statement": 47
    },
    "4849": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15716,
        15731
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "4850": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15716,
        15731
      ],
      "op": "POP",
      "path": "20"
    },
    "4851": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15716,
        15731
      ],
      "op": "POP",
      "path": "20"
    },
    "4852": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15716,
        15731
      ],
      "op": "POP",
      "path": "20"
    },
    "4853": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15716,
        15731
      ],
      "op": "POP",
      "path": "20"
    },
    "4854": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15716,
        15731
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5BC"
    },
    "4857": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15716,
        15731
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4858": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15668,
        15742
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4859": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15822,
        15835
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 48,
      "value": "0x80"
    },
    "4861": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15822,
        15835
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4862": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15822,
        15835
      ],
      "op": "ADD",
      "path": "20"
    },
    "4863": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15822,
        15835
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4864": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15807,
        15819
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4865": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15807,
        15819
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4866": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15777,
        15923
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x131F"
    },
    "4869": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15777,
        15923
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4870": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15807,
        15835
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x130E"
    },
    "4873": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15807,
        15835
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4874": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15807,
        15835
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "4877": {
      "fn": "Staker.getHoldingInfo",
      "jump": "i",
      "offset": [
        15807,
        15835
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4878": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15807,
        15835
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4879": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15849,
        15857
      ],
      "op": "DUP5",
      "path": "20"
    },
    "4880": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15849,
        15867
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "4882": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15849,
        15867
      ],
      "op": "ADD",
      "path": "20"
    },
    "4883": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15849,
        15867
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4884": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15881,
        15888
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4885": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15902,
        15909
      ],
      "op": "DUP6",
      "path": "20"
    },
    "4886": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15902,
        15913
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x120"
    },
    "4889": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15902,
        15913
      ],
      "op": "ADD",
      "path": "20"
    },
    "4890": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15902,
        15913
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4891": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15777,
        15793
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB26"
    },
    "4894": {
      "fn": "Staker.getHoldingInfo",
      "jump": "i",
      "offset": [
        15777,
        15923
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4895": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15777,
        15923
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4896": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15760
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4897": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15773
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "4899": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15773
      ],
      "op": "ADD",
      "path": "20"
    },
    "4900": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15923
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4901": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15923
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4902": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15923
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "4903": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15923
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5B3"
    },
    "4906": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15923
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "4907": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15923
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4908": {
      "fn": "Staker.getHoldingInfo",
      "offset": [
        15752,
        15923
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "4911": {
      "fn": "Staker.getHoldingInfo",
      "jump": "i",
      "offset": [
        15752,
        15923
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4912": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4913": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7006,
        7010
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "4915": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7022,
        7048
      ],
      "op": "DUP1",
      "path": "20"
    },
    "4916": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7051,
        7066
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x133C"
    },
    "4919": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7063,
        7065
      ],
      "op": "DUP4",
      "path": "20"
    },
    "4920": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7051,
        7062
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F65"
    },
    "4923": {
      "fn": "Staker.isProjectEnd",
      "jump": "i",
      "offset": [
        7051,
        7066
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4924": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7051,
        7066
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4925": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7022,
        7066
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "4926": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7022,
        7066
      ],
      "op": "POP",
      "path": "20"
    },
    "4927": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7083,
        7103
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 49,
      "value": "0x1347"
    },
    "4930": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7095,
        7102
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4931": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7083,
        7094
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x232D"
    },
    "4934": {
      "fn": "Staker.isProjectEnd",
      "jump": "i",
      "offset": [
        7083,
        7103
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4935": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7083,
        7103
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4936": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        7076,
        7103
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "4937": {
      "fn": "Staker.isProjectEnd",
      "offset": [
        6950,
        7110
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "4938": {
      "op": "POP"
    },
    "4939": {
      "op": "POP"
    },
    "4940": {
      "op": "POP"
    },
    "4941": {
      "fn": "Staker.isProjectEnd",
      "jump": "o",
      "offset": [
        6950,
        7110
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4942": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4943": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4945": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4946": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4948": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4950": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4952": {
      "op": "SHL"
    },
    "4953": {
      "op": "SUB"
    },
    "4954": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "4955": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "11"
    },
    "4956": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "0"
    },
    "4957": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1378"
    },
    "4960": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4961": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4963": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4964": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4968": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4970": {
      "op": "SHL"
    },
    "4971": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4972": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4973": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4975": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "0"
    },
    "4976": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x467"
    },
    "4979": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4980": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A74"
    },
    "4983": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4984": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4985": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16960,
        16977
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 50,
      "value": "0x1381"
    },
    "4988": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16974,
        16976
      ],
      "op": "DUP2",
      "path": "20"
    },
    "4989": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16960,
        16973
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x236D"
    },
    "4992": {
      "fn": "Staker.withdrawTo",
      "jump": "i",
      "offset": [
        16960,
        16977
      ],
      "op": "JUMP",
      "path": "20"
    },
    "4993": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16960,
        16977
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "4994": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17004,
        17005
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 51,
      "value": "0x0"
    },
    "4996": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16995,
        17001
      ],
      "op": "DUP3",
      "path": "20"
    },
    "4997": {
      "branch": 137,
      "fn": "Staker.withdrawTo",
      "offset": [
        16995,
        17005
      ],
      "op": "GT",
      "path": "20"
    },
    "4998": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x13BB"
    },
    "5001": {
      "branch": 137,
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5002": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5004": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5005": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5009": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5011": {
      "op": "SHL"
    },
    "5012": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5013": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5014": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5016": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5018": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5019": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "ADD",
      "path": "20"
    },
    "5020": {
      "op": "MSTORE"
    },
    "5021": {
      "op": "PUSH1",
      "value": "0x7"
    },
    "5023": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5025": {
      "op": "DUP3"
    },
    "5026": {
      "op": "ADD"
    },
    "5027": {
      "op": "MSTORE"
    },
    "5028": {
      "op": "PUSH7",
      "value": "0x8585B5BDD5B9D"
    },
    "5036": {
      "op": "PUSH1",
      "value": "0xCA"
    },
    "5038": {
      "op": "SHL"
    },
    "5039": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5041": {
      "op": "DUP3"
    },
    "5042": {
      "op": "ADD"
    },
    "5043": {
      "op": "MSTORE"
    },
    "5044": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5046": {
      "op": "ADD"
    },
    "5047": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5050": {
      "op": "JUMP"
    },
    "5051": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16987,
        17017
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5052": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17046
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 52,
      "value": "0x4"
    },
    "5054": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17046
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5055": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17046
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "5056": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5058": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5059": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "5064": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5066": {
      "op": "SHL"
    },
    "5067": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5068": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5069": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17065,
        17069
      ],
      "op": "ADDRESS",
      "path": "20"
    },
    "5070": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "5071": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5072": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "ADD",
      "path": "20"
    },
    "5073": {
      "op": "SWAP3"
    },
    "5074": {
      "op": "SWAP1"
    },
    "5075": {
      "op": "SWAP3"
    },
    "5076": {
      "op": "MSTORE"
    },
    "5077": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17075,
        17081
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5078": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17075,
        17081
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5079": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5081": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5083": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5085": {
      "op": "SHL"
    },
    "5086": {
      "op": "SUB"
    },
    "5087": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17046
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5088": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17046
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5089": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17046
      ],
      "op": "AND",
      "path": "20"
    },
    "5090": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17046
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5091": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17056
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x70A08231"
    },
    "5096": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17056
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5097": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5099": {
      "op": "ADD"
    },
    "5100": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "5102": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5104": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5105": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5106": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5107": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "SUB",
      "path": "20"
    },
    "5108": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5109": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP7",
      "path": "20"
    },
    "5110": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "GAS",
      "path": "20"
    },
    "5111": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "STATICCALL",
      "path": "20"
    },
    "5112": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "5113": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5114": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "5115": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1408"
    },
    "5118": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5119": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "5120": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "5122": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5123": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "5124": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "5125": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "5127": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "REVERT",
      "path": "20"
    },
    "5128": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5129": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "POP",
      "path": "20"
    },
    "5130": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "POP",
      "path": "20"
    },
    "5131": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "POP",
      "path": "20"
    },
    "5132": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "POP",
      "path": "20"
    },
    "5133": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5135": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5136": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "5137": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "5139": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "NOT",
      "path": "20"
    },
    "5140": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "5142": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5143": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "ADD",
      "path": "20"
    },
    "5144": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "AND",
      "path": "20"
    },
    "5145": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5146": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "ADD",
      "path": "20"
    },
    "5147": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5148": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5150": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5151": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "POP",
      "path": "20"
    },
    "5152": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5153": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "ADD",
      "path": "20"
    },
    "5154": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5155": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x142C"
    },
    "5158": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5159": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5160": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2A3E"
    },
    "5163": {
      "fn": "Staker.withdrawTo",
      "jump": "i",
      "offset": [
        17036,
        17071
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5164": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17071
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5165": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17081
      ],
      "op": "LT",
      "path": "20"
    },
    "5166": {
      "branch": 138,
      "fn": "Staker.withdrawTo",
      "offset": [
        17036,
        17081
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "5167": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1466"
    },
    "5170": {
      "branch": 138,
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5171": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5173": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5174": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5178": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5180": {
      "op": "SHL"
    },
    "5181": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5182": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5183": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5185": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5187": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5188": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "ADD",
      "path": "20"
    },
    "5189": {
      "op": "MSTORE"
    },
    "5190": {
      "op": "PUSH1",
      "value": "0x9"
    },
    "5192": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5194": {
      "op": "DUP3"
    },
    "5195": {
      "op": "ADD"
    },
    "5196": {
      "op": "MSTORE"
    },
    "5197": {
      "op": "PUSH9",
      "value": "0x18985B185B98D9480F"
    },
    "5207": {
      "op": "PUSH1",
      "value": "0xBA"
    },
    "5209": {
      "op": "SHL"
    },
    "5210": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5212": {
      "op": "DUP3"
    },
    "5213": {
      "op": "ADD"
    },
    "5214": {
      "op": "MSTORE"
    },
    "5215": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5217": {
      "op": "ADD"
    },
    "5218": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5221": {
      "op": "JUMP"
    },
    "5222": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17028,
        17095
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5223": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17106,
        17116
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 53,
      "value": "0x4"
    },
    "5225": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17106,
        17116
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "5226": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17106,
        17160
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x147E"
    },
    "5229": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17106,
        17160
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5230": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5232": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5234": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5236": {
      "op": "SHL"
    },
    "5237": {
      "op": "SUB"
    },
    "5238": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17106,
        17116
      ],
      "op": "AND",
      "path": "20"
    },
    "5239": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17142,
        17146
      ],
      "op": "ADDRESS",
      "path": "20"
    },
    "5240": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17149,
        17151
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5241": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17153,
        17159
      ],
      "op": "DUP6",
      "path": "20"
    },
    "5242": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17106,
        17133
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x23AC"
    },
    "5245": {
      "fn": "Staker.withdrawTo",
      "jump": "i",
      "offset": [
        17106,
        17160
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5246": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17106,
        17160
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5247": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 54,
      "value": "0x40"
    },
    "5249": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5250": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17196,
        17202
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5251": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17196,
        17202
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5252": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5254": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5256": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5258": {
      "op": "SHL"
    },
    "5259": {
      "op": "SUB"
    },
    "5260": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5261": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "AND",
      "path": "20"
    },
    "5262": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5263": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "PUSH32",
      "path": "20",
      "value": "0x8777844761EB456B028CF7F87FC8DCB146AD8EEAFBC6F80F2D006E5CD9E5A745"
    },
    "5296": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5297": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "5299": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5300": {
      "fn": "Staker.withdrawTo",
      "offset": [
        17176,
        17203
      ],
      "op": "LOG3",
      "path": "20"
    },
    "5301": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "POP",
      "path": "20"
    },
    "5302": {
      "fn": "Staker.withdrawTo",
      "offset": [
        16883,
        17210
      ],
      "op": "POP",
      "path": "20"
    },
    "5303": {
      "fn": "Staker.withdrawTo",
      "jump": "o",
      "offset": [
        16883,
        17210
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5304": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16140,
        16334
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5305": {
      "offset": [
        2844,
        2854
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "5307": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        2844,
        2854
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "5308": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5310": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5312": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5314": {
      "op": "SHL"
    },
    "5315": {
      "op": "SUB"
    },
    "5316": {
      "offset": [
        2844,
        2854
      ],
      "op": "AND",
      "path": "20"
    },
    "5317": {
      "offset": [
        2822,
        2832
      ],
      "op": "CALLER",
      "path": "20"
    },
    "5318": {
      "offset": [
        2822,
        2855
      ],
      "op": "EQ",
      "path": "20"
    },
    "5319": {
      "offset": [
        2814,
        2871
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1500"
    },
    "5322": {
      "offset": [
        2814,
        2871
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5323": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        2814,
        2871
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5325": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        2814,
        2871
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5326": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5330": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5332": {
      "op": "SHL"
    },
    "5333": {
      "offset": [
        2814,
        2871
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5334": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        2814,
        2871
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5335": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5337": {
      "offset": [
        2814,
        2871
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5339": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        2814,
        2871
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5340": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        2814,
        2871
      ],
      "op": "ADD",
      "path": "20"
    },
    "5341": {
      "op": "MSTORE"
    },
    "5342": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "5344": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5346": {
      "op": "DUP3"
    },
    "5347": {
      "op": "ADD"
    },
    "5348": {
      "op": "MSTORE"
    },
    "5349": {
      "op": "PUSH11",
      "value": "0x10B83937B532B1BA26B0B7"
    },
    "5361": {
      "op": "PUSH1",
      "value": "0xA9"
    },
    "5363": {
      "op": "SHL"
    },
    "5364": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5366": {
      "op": "DUP3"
    },
    "5367": {
      "op": "ADD"
    },
    "5368": {
      "op": "MSTORE"
    },
    "5369": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5371": {
      "op": "ADD"
    },
    "5372": {
      "offset": [
        2814,
        2871
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5375": {
      "op": "JUMP"
    },
    "5376": {
      "offset": [
        2814,
        2871
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5377": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5379": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5381": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5383": {
      "op": "SHL"
    },
    "5384": {
      "op": "SUB"
    },
    "5385": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "SWAP1",
      "path": "20",
      "statement": 55
    },
    "5386": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "5387": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "AND",
      "path": "20"
    },
    "5388": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "5390": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5391": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5392": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5393": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16300
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "5395": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "5397": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5398": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5399": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5400": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5402": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5403": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5404": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16306
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "5405": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "5410": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5411": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "5412": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "AND",
      "path": "20"
    },
    "5413": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5414": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5415": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "5416": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5417": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5418": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5419": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5420": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5421": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16317
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "5422": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5423": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5424": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5425": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "5426": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5427": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5428": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "ADD",
      "path": "20"
    },
    "5429": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5430": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "5432": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5433": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "ADD",
      "path": "20"
    },
    "5434": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5435": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "5436": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5438": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5440": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5442": {
      "op": "SHL"
    },
    "5443": {
      "op": "SUB"
    },
    "5444": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5445": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "5446": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "AND",
      "path": "20"
    },
    "5447": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5456": {
      "op": "NOT"
    },
    "5457": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5458": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "5459": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "AND",
      "path": "20"
    },
    "5460": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5461": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5462": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5463": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "OR",
      "path": "20"
    },
    "5464": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5465": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "5466": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5467": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5468": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "ADD",
      "path": "20"
    },
    "5469": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5470": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "5472": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5473": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "ADD",
      "path": "20"
    },
    "5474": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "5475": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "5477": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5478": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5479": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "ADD",
      "path": "20"
    },
    "5480": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5481": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "5483": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5484": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5485": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "ADD",
      "path": "20"
    },
    "5486": {
      "fn": "Staker.setHoldingInfoData",
      "offset": [
        16292,
        16327
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "5487": {
      "fn": "Staker.setHoldingInfoData",
      "jump": "o",
      "offset": [
        16140,
        16334
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5488": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5489": {
      "fn": "Staker.unstake",
      "offset": [
        7206,
        7212
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 56,
      "value": "0x4"
    },
    "5491": {
      "fn": "Staker.unstake",
      "offset": [
        7206,
        7212
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "5492": {
      "fn": "Staker.unstake",
      "offset": [
        7181,
        7185
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "5494": {
      "fn": "Staker.unstake",
      "offset": [
        7181,
        7185
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5495": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5497": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5499": {
      "op": "SHL"
    },
    "5500": {
      "fn": "Staker.unstake",
      "offset": [
        7206,
        7212
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5501": {
      "fn": "Staker.unstake",
      "offset": [
        7206,
        7212
      ],
      "op": "DIV",
      "path": "20"
    },
    "5502": {
      "fn": "Staker.unstake",
      "offset": [
        7206,
        7212
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xFF"
    },
    "5504": {
      "fn": "Staker.unstake",
      "offset": [
        7206,
        7212
      ],
      "op": "AND",
      "path": "20"
    },
    "5505": {
      "branch": 139,
      "fn": "Staker.unstake",
      "offset": [
        7205,
        7212
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "5506": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x159D"
    },
    "5509": {
      "branch": 139,
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5510": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5512": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5513": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5517": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5519": {
      "op": "SHL"
    },
    "5520": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5521": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5522": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5524": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "ADD",
      "path": "20"
    },
    "5525": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5528": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5529": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x29FD"
    },
    "5532": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7197,
        7223
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5533": {
      "fn": "Staker.unstake",
      "offset": [
        7197,
        7223
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5534": {
      "fn": "Staker.unstake",
      "offset": [
        7247,
        7248
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 57,
      "value": "0x0"
    },
    "5536": {
      "fn": "Staker.unstake",
      "offset": [
        7241,
        7244
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5537": {
      "fn": "Staker.unstake",
      "offset": [
        7241,
        7248
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "5542": {
      "fn": "Staker.unstake",
      "offset": [
        7241,
        7248
      ],
      "op": "AND",
      "path": "20"
    },
    "5543": {
      "branch": 140,
      "fn": "Staker.unstake",
      "offset": [
        7241,
        7248
      ],
      "op": "GT",
      "path": "20"
    },
    "5544": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x15DC"
    },
    "5547": {
      "branch": 140,
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5548": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5550": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5551": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5555": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5557": {
      "op": "SHL"
    },
    "5558": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5559": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5560": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5562": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "ADD",
      "path": "20"
    },
    "5563": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5566": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5569": {
      "op": "DUP1"
    },
    "5570": {
      "op": "DUP3"
    },
    "5571": {
      "op": "MSTORE"
    },
    "5572": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5574": {
      "op": "SWAP1"
    },
    "5575": {
      "op": "DUP3"
    },
    "5576": {
      "op": "ADD"
    },
    "5577": {
      "op": "MSTORE"
    },
    "5578": {
      "op": "PUSH4",
      "value": "0x21717479"
    },
    "5583": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5585": {
      "op": "SHL"
    },
    "5586": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5588": {
      "op": "DUP3"
    },
    "5589": {
      "op": "ADD"
    },
    "5590": {
      "op": "MSTORE"
    },
    "5591": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5593": {
      "op": "ADD"
    },
    "5594": {
      "op": "SWAP1"
    },
    "5595": {
      "op": "JUMP"
    },
    "5596": {
      "fn": "Staker.unstake",
      "offset": [
        7233,
        7257
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5597": {
      "fn": "Staker.unstake",
      "offset": [
        7286,
        7296
      ],
      "op": "CALLER",
      "path": "20"
    },
    "5598": {
      "fn": "Staker.unstake",
      "offset": [
        7268,
        7283
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "5600": {
      "fn": "Staker.unstake",
      "offset": [
        7336,
        7358
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x15E8"
    },
    "5603": {
      "fn": "Staker.unstake",
      "offset": [
        7348,
        7357
      ],
      "op": "DUP6",
      "path": "20"
    },
    "5604": {
      "fn": "Staker.unstake",
      "offset": [
        7336,
        7347
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F65"
    },
    "5607": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7336,
        7358
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5608": {
      "fn": "Staker.unstake",
      "offset": [
        7336,
        7358
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5609": {
      "fn": "Staker.unstake",
      "offset": [
        7376,
        7390
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 58,
      "value": "0xC0"
    },
    "5611": {
      "fn": "Staker.unstake",
      "offset": [
        7376,
        7390
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5612": {
      "fn": "Staker.unstake",
      "offset": [
        7376,
        7390
      ],
      "op": "ADD",
      "path": "20"
    },
    "5613": {
      "fn": "Staker.unstake",
      "offset": [
        7376,
        7390
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5614": {
      "fn": "Staker.unstake",
      "offset": [
        7307,
        7358
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5615": {
      "fn": "Staker.unstake",
      "offset": [
        7307,
        7358
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5616": {
      "op": "POP"
    },
    "5617": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5619": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5621": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "5623": {
      "op": "SHL"
    },
    "5624": {
      "op": "SUB"
    },
    "5625": {
      "op": "NOT"
    },
    "5626": {
      "fn": "Staker.unstake",
      "offset": [
        7376,
        7400
      ],
      "op": "AND",
      "path": "20"
    },
    "5627": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5629": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "5631": {
      "op": "SHL"
    },
    "5632": {
      "branch": 141,
      "fn": "Staker.unstake",
      "offset": [
        7376,
        7400
      ],
      "op": "EQ",
      "path": "20"
    },
    "5633": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x161C"
    },
    "5636": {
      "branch": 141,
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5637": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5639": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5640": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5644": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5646": {
      "op": "SHL"
    },
    "5647": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5648": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5649": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5651": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "ADD",
      "path": "20"
    },
    "5652": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5655": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5656": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2A1D"
    },
    "5659": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7368,
        7412
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5660": {
      "fn": "Staker.unstake",
      "offset": [
        7368,
        7412
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5661": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5663": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5665": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5667": {
      "op": "SHL"
    },
    "5668": {
      "op": "SUB"
    },
    "5669": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5670": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "AND",
      "path": "20"
    },
    "5671": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7451
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "5673": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5674": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5675": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5676": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7461
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "5678": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "5680": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5681": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5682": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5683": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5685": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5686": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5687": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7470
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "5688": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "5693": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "DUP10",
      "path": "20"
    },
    "5694": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5695": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "AND",
      "path": "20"
    },
    "5696": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "DUP6",
      "path": "20"
    },
    "5697": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5698": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5699": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5700": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5701": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5702": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "DUP5",
      "path": "20"
    },
    "5703": {
      "fn": "Staker.unstake",
      "offset": [
        7454,
        7481
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "5704": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5705": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5706": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA0"
    },
    "5708": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5709": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "ADD",
      "path": "20"
    },
    "5710": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP5",
      "path": "20"
    },
    "5711": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5712": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5713": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "5714": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5715": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP5",
      "path": "20"
    },
    "5716": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "AND",
      "path": "20"
    },
    "5717": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5718": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5719": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5720": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5722": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5724": {
      "op": "SHL"
    },
    "5725": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5726": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DIV",
      "path": "20"
    },
    "5727": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5728": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "5729": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "AND",
      "path": "20"
    },
    "5730": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "5731": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5732": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "ADD",
      "path": "20"
    },
    "5733": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "5734": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5735": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "5736": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5739": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5741": {
      "op": "SHL"
    },
    "5742": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5743": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "5744": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DIV",
      "path": "20"
    },
    "5745": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5747": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5749": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5751": {
      "op": "SHL"
    },
    "5752": {
      "op": "SUB"
    },
    "5753": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "AND",
      "path": "20"
    },
    "5754": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "5755": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP5",
      "path": "20"
    },
    "5756": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "ADD",
      "path": "20"
    },
    "5757": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "5758": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5759": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "5760": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5761": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "5763": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5764": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "ADD",
      "path": "20"
    },
    "5765": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "5766": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "5768": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP5",
      "path": "20"
    },
    "5769": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "ADD",
      "path": "20"
    },
    "5770": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5771": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "5773": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5774": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5775": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "ADD",
      "path": "20"
    },
    "5776": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "5777": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "5779": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "DUP4",
      "path": "20"
    },
    "5780": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "ADD",
      "path": "20"
    },
    "5781": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5782": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5783": {
      "fn": "Staker.unstake",
      "offset": [
        7423,
        7481
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5784": {
      "branch": 142,
      "fn": "Staker.unstake",
      "offset": [
        7500,
        7520
      ],
      "op": "SUB",
      "path": "20",
      "statement": 59
    },
    "5785": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x16D2"
    },
    "5788": {
      "branch": 142,
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5789": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5791": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5792": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5796": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5798": {
      "op": "SHL"
    },
    "5799": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5800": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5801": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5803": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5805": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5806": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "ADD",
      "path": "20"
    },
    "5807": {
      "op": "MSTORE"
    },
    "5808": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "5810": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5812": {
      "op": "DUP3"
    },
    "5813": {
      "op": "ADD"
    },
    "5814": {
      "op": "MSTORE"
    },
    "5815": {
      "op": "PUSH11",
      "value": "0x217374616B65722E717479"
    },
    "5827": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "5829": {
      "op": "SHL"
    },
    "5830": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5832": {
      "op": "DUP3"
    },
    "5833": {
      "op": "ADD"
    },
    "5834": {
      "op": "MSTORE"
    },
    "5835": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5837": {
      "op": "ADD"
    },
    "5838": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5841": {
      "op": "JUMP"
    },
    "5842": {
      "fn": "Staker.unstake",
      "offset": [
        7492,
        7536
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5843": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7631
      ],
      "op": "DUP1",
      "path": "20",
      "statement": 60
    },
    "5844": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7631
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5845": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7638
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "5850": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7638
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5851": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7638
      ],
      "op": "DUP8",
      "path": "20"
    },
    "5852": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7638
      ],
      "op": "AND",
      "path": "20"
    },
    "5853": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7638
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "5854": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7638
      ],
      "op": "AND",
      "path": "20"
    },
    "5855": {
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7638
      ],
      "op": "LT",
      "path": "20"
    },
    "5856": {
      "branch": 143,
      "fn": "Staker.unstake",
      "offset": [
        7616,
        7638
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "5857": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1714"
    },
    "5860": {
      "branch": 143,
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5861": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5863": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5864": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5868": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5870": {
      "op": "SHL"
    },
    "5871": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5872": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5873": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5875": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5877": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5878": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "ADD",
      "path": "20"
    },
    "5879": {
      "op": "MSTORE"
    },
    "5880": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "5882": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5884": {
      "op": "DUP3"
    },
    "5885": {
      "op": "ADD"
    },
    "5886": {
      "op": "MSTORE"
    },
    "5887": {
      "op": "PUSH5",
      "value": "0x38BA3C901F"
    },
    "5893": {
      "op": "PUSH1",
      "value": "0xD9"
    },
    "5895": {
      "op": "SHL"
    },
    "5896": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5898": {
      "op": "DUP3"
    },
    "5899": {
      "op": "ADD"
    },
    "5900": {
      "op": "MSTORE"
    },
    "5901": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5903": {
      "op": "ADD"
    },
    "5904": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5907": {
      "op": "JUMP"
    },
    "5908": {
      "fn": "Staker.unstake",
      "offset": [
        7608,
        7648
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5909": {
      "fn": "Staker.unstake",
      "offset": [
        7714,
        7734
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 61,
      "value": "0x171D"
    },
    "5912": {
      "fn": "Staker.unstake",
      "offset": [
        7726,
        7733
      ],
      "op": "DUP3",
      "path": "20"
    },
    "5913": {
      "fn": "Staker.unstake",
      "offset": [
        7714,
        7725
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x232D"
    },
    "5916": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7714,
        7734
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5917": {
      "branch": 144,
      "fn": "Staker.unstake",
      "offset": [
        7714,
        7734
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5918": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1752"
    },
    "5921": {
      "branch": 144,
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "5922": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "5924": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5925": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5929": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5931": {
      "op": "SHL"
    },
    "5932": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "DUP2",
      "path": "20"
    },
    "5933": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5934": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "5936": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "ADD",
      "path": "20"
    },
    "5937": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "5940": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5941": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5943": {
      "op": "DUP1"
    },
    "5944": {
      "op": "DUP3"
    },
    "5945": {
      "op": "MSTORE"
    },
    "5946": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5948": {
      "op": "SWAP1"
    },
    "5949": {
      "op": "DUP3"
    },
    "5950": {
      "op": "ADD"
    },
    "5951": {
      "op": "MSTORE"
    },
    "5952": {
      "op": "PUSH4",
      "value": "0x8595B99"
    },
    "5957": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "5959": {
      "op": "SHL"
    },
    "5960": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5962": {
      "op": "DUP3"
    },
    "5963": {
      "op": "ADD"
    },
    "5964": {
      "op": "MSTORE"
    },
    "5965": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5967": {
      "op": "ADD"
    },
    "5968": {
      "op": "SWAP1"
    },
    "5969": {
      "op": "JUMP"
    },
    "5970": {
      "fn": "Staker.unstake",
      "offset": [
        7706,
        7743
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5971": {
      "fn": "Staker.unstake",
      "offset": [
        7754,
        7769
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "5973": {
      "fn": "Staker.unstake",
      "offset": [
        7772,
        7817
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1763"
    },
    "5976": {
      "fn": "Staker.unstake",
      "offset": [
        7783,
        7798
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "5977": {
      "fn": "Staker.unstake",
      "offset": [
        7801,
        7808
      ],
      "op": "DUP5",
      "path": "20"
    },
    "5978": {
      "fn": "Staker.unstake",
      "offset": [
        7801,
        7816
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x180"
    },
    "5981": {
      "fn": "Staker.unstake",
      "offset": [
        7801,
        7816
      ],
      "op": "ADD",
      "path": "20"
    },
    "5982": {
      "fn": "Staker.unstake",
      "offset": [
        7801,
        7816
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "5983": {
      "fn": "Staker.unstake",
      "offset": [
        7772,
        7775
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2040"
    },
    "5986": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7772,
        7817
      ],
      "op": "JUMP",
      "path": "20"
    },
    "5987": {
      "fn": "Staker.unstake",
      "offset": [
        7772,
        7817
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "5988": {
      "fn": "Staker.unstake",
      "offset": [
        7754,
        7817
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "5989": {
      "fn": "Staker.unstake",
      "offset": [
        7754,
        7817
      ],
      "op": "POP",
      "path": "20"
    },
    "5990": {
      "fn": "Staker.unstake",
      "offset": [
        7856,
        7864
      ],
      "op": "DUP1",
      "path": "20"
    },
    "5991": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5993": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5995": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5997": {
      "op": "SHL"
    },
    "5998": {
      "op": "SUB"
    },
    "5999": {
      "fn": "Staker.unstake",
      "offset": [
        7832,
        7864
      ],
      "op": "AND",
      "path": "20"
    },
    "6000": {
      "fn": "Staker.unstake",
      "offset": [
        7832,
        7843
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6001": {
      "fn": "Staker.unstake",
      "offset": [
        7832,
        7853
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6003": {
      "fn": "Staker.unstake",
      "offset": [
        7832,
        7853
      ],
      "op": "ADD",
      "path": "20"
    },
    "6004": {
      "fn": "Staker.unstake",
      "offset": [
        7832,
        7853
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6005": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6007": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6009": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6011": {
      "op": "SHL"
    },
    "6012": {
      "op": "SUB"
    },
    "6013": {
      "fn": "Staker.unstake",
      "offset": [
        7832,
        7864
      ],
      "op": "AND",
      "path": "20"
    },
    "6014": {
      "branch": 145,
      "fn": "Staker.unstake",
      "offset": [
        7832,
        7864
      ],
      "op": "LT",
      "path": "20"
    },
    "6015": {
      "fn": "Staker.unstake",
      "offset": [
        7828,
        8134
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "6016": {
      "fn": "Staker.unstake",
      "offset": [
        7828,
        8134
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x17C3"
    },
    "6019": {
      "branch": 145,
      "fn": "Staker.unstake",
      "offset": [
        7828,
        8134
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "6020": {
      "fn": "Staker.unstake",
      "offset": [
        7996,
        8009
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 62,
      "value": "0x80"
    },
    "6022": {
      "fn": "Staker.unstake",
      "offset": [
        7996,
        8009
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6023": {
      "fn": "Staker.unstake",
      "offset": [
        7996,
        8009
      ],
      "op": "ADD",
      "path": "20"
    },
    "6024": {
      "fn": "Staker.unstake",
      "offset": [
        7996,
        8009
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6025": {
      "fn": "Staker.unstake",
      "offset": [
        7978,
        7993
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6026": {
      "fn": "Staker.unstake",
      "offset": [
        7978,
        7993
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6027": {
      "fn": "Staker.unstake",
      "offset": [
        7944,
        8123
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x17AE"
    },
    "6030": {
      "fn": "Staker.unstake",
      "offset": [
        7944,
        8123
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6031": {
      "fn": "Staker.unstake",
      "offset": [
        7978,
        8009
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x179D"
    },
    "6034": {
      "fn": "Staker.unstake",
      "offset": [
        7978,
        8009
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6035": {
      "fn": "Staker.unstake",
      "offset": [
        7978,
        8009
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "6040": {
      "fn": "Staker.unstake",
      "offset": [
        7978,
        8009
      ],
      "op": "AND",
      "path": "20"
    },
    "6041": {
      "fn": "Staker.unstake",
      "offset": [
        7978,
        8009
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "6044": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7978,
        8009
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6045": {
      "fn": "Staker.unstake",
      "offset": [
        7978,
        8009
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6046": {
      "fn": "Staker.unstake",
      "offset": [
        8027,
        8038
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6047": {
      "fn": "Staker.unstake",
      "offset": [
        8027,
        8048
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6049": {
      "fn": "Staker.unstake",
      "offset": [
        8027,
        8048
      ],
      "op": "ADD",
      "path": "20"
    },
    "6050": {
      "fn": "Staker.unstake",
      "offset": [
        8027,
        8048
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6051": {
      "fn": "Staker.unstake",
      "offset": [
        8066,
        8074
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6052": {
      "fn": "Staker.unstake",
      "offset": [
        8092,
        8099
      ],
      "op": "DUP7",
      "path": "20"
    },
    "6053": {
      "fn": "Staker.unstake",
      "offset": [
        8092,
        8109
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x140"
    },
    "6056": {
      "fn": "Staker.unstake",
      "offset": [
        8092,
        8109
      ],
      "op": "ADD",
      "path": "20"
    },
    "6057": {
      "fn": "Staker.unstake",
      "offset": [
        8092,
        8109
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6058": {
      "fn": "Staker.unstake",
      "offset": [
        7944,
        7960
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB26"
    },
    "6061": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7944,
        8123
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6062": {
      "fn": "Staker.unstake",
      "offset": [
        7944,
        8123
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6063": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        7927
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6064": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        7940
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "6066": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        7940
      ],
      "op": "ADD",
      "path": "20"
    },
    "6067": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6068": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6069": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6070": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x17BF"
    },
    "6073": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6074": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6075": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "6078": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        7916,
        8123
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6079": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6080": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6081": {
      "fn": "Staker.unstake",
      "offset": [
        7916,
        8123
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6082": {
      "op": "POP"
    },
    "6083": {
      "fn": "Staker.unstake",
      "offset": [
        7828,
        8134
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6084": {
      "fn": "Staker.unstake",
      "offset": [
        8163,
        8166
      ],
      "op": "DUP6",
      "path": "20",
      "statement": 63
    },
    "6085": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8155
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6086": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8159
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "6088": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8159
      ],
      "op": "ADD",
      "path": "20"
    },
    "6089": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6090": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6091": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6092": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x17D5"
    },
    "6095": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6096": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6097": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2AA9"
    },
    "6100": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        8144,
        8166
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6101": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6102": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "6107": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6108": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6109": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "AND",
      "path": "20"
    },
    "6110": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6111": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6112": {
      "fn": "Staker.unstake",
      "offset": [
        8144,
        8166
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6113": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6115": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6117": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6119": {
      "op": "SHL"
    },
    "6120": {
      "op": "SUB"
    },
    "6121": {
      "fn": "Staker.unstake",
      "offset": [
        8207,
        8222
      ],
      "op": "TIMESTAMP",
      "path": "20",
      "statement": 64
    },
    "6122": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8223
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6123": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8223
      ],
      "op": "AND",
      "path": "20"
    },
    "6124": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8197
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6126": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8197
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6127": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8197
      ],
      "op": "DUP8",
      "path": "20"
    },
    "6128": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8197
      ],
      "op": "ADD",
      "path": "20"
    },
    "6129": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8223
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6130": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8223
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6131": {
      "fn": "Staker.unstake",
      "offset": [
        8176,
        8223
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6132": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6134": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6136": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6138": {
      "op": "SHL"
    },
    "6139": {
      "op": "SUB"
    },
    "6140": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "DUP10",
      "path": "20",
      "statement": 65
    },
    "6141": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "AND",
      "path": "20"
    },
    "6142": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "6144": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6145": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6146": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6147": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8241
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "6149": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "6151": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6152": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6153": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6154": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6155": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6156": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8250
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "6157": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "DUP16",
      "path": "20"
    },
    "6158": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "DUP9",
      "path": "20"
    },
    "6159": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "AND",
      "path": "20"
    },
    "6160": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6161": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6162": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6163": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6164": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6165": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6166": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8261
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "6167": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP11",
      "path": "20"
    },
    "6168": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6169": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6170": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "6171": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6172": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP14",
      "path": "20"
    },
    "6173": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "ADD",
      "path": "20"
    },
    "6174": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6175": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP8",
      "path": "20"
    },
    "6176": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6177": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP10",
      "path": "20"
    },
    "6178": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "AND",
      "path": "20"
    },
    "6179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6181": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6183": {
      "op": "SHL"
    },
    "6184": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "MUL",
      "path": "20"
    },
    "6185": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6194": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6196": {
      "op": "SHL"
    },
    "6197": {
      "op": "NOT"
    },
    "6198": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP9",
      "path": "20"
    },
    "6199": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP12",
      "path": "20"
    },
    "6200": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "AND",
      "path": "20"
    },
    "6201": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6203": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6205": {
      "op": "SHL"
    },
    "6206": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "MUL",
      "path": "20"
    },
    "6207": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6216": {
      "op": "NOT"
    },
    "6217": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6218": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6219": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "AND",
      "path": "20"
    },
    "6220": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6221": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP12",
      "path": "20"
    },
    "6222": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "AND",
      "path": "20"
    },
    "6223": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6224": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6225": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6226": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "OR",
      "path": "20"
    },
    "6227": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "OR",
      "path": "20"
    },
    "6228": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP7",
      "path": "20"
    },
    "6229": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6230": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP7",
      "path": "20"
    },
    "6231": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "AND",
      "path": "20"
    },
    "6232": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "6233": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6234": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "6235": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "OR",
      "path": "20"
    },
    "6236": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6237": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "6238": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "6240": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6241": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP12",
      "path": "20"
    },
    "6242": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "ADD",
      "path": "20"
    },
    "6243": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6244": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "6246": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6247": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP9",
      "path": "20"
    },
    "6248": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "ADD",
      "path": "20"
    },
    "6249": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6250": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6251": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6252": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "6253": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "6255": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6256": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP14",
      "path": "20"
    },
    "6257": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "ADD",
      "path": "20"
    },
    "6258": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6259": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "6261": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SWAP9",
      "path": "20"
    },
    "6262": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "DUP10",
      "path": "20"
    },
    "6263": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "ADD",
      "path": "20"
    },
    "6264": {
      "fn": "Staker.unstake",
      "offset": [
        8234,
        8275
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "6265": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8360
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "6266": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8360
      ],
      "op": "DUP5",
      "path": "20"
    },
    "6267": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8360
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6268": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8351
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "6270": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8360
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6271": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8360
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6272": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8360
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6273": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8360
      ],
      "op": "DUP5",
      "path": "20"
    },
    "6274": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8360
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "6275": {
      "fn": "Staker.unstake",
      "offset": [
        8361,
        8371
      ],
      "op": "DUP14",
      "path": "20"
    },
    "6276": {
      "fn": "Staker.unstake",
      "offset": [
        8361,
        8371
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6277": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "DUP11",
      "path": "20"
    },
    "6278": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "AND",
      "path": "20"
    },
    "6279": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6280": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6281": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6282": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6283": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6284": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6285": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6286": {
      "fn": "Staker.unstake",
      "offset": [
        8343,
        8372
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "6287": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6288": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6289": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "6290": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6291": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "ADD",
      "path": "20"
    },
    "6292": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP7",
      "path": "20"
    },
    "6293": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6294": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6295": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "6296": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6297": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP7",
      "path": "20"
    },
    "6298": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6299": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "6300": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6301": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "ADD",
      "path": "20"
    },
    "6302": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "6303": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6304": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP8",
      "path": "20"
    },
    "6305": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "AND",
      "path": "20"
    },
    "6306": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6307": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP5",
      "path": "20"
    },
    "6308": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "ADD",
      "path": "20"
    },
    "6309": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6310": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6311": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6312": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6313": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "6314": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6315": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "ADD",
      "path": "20"
    },
    "6316": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "6317": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6318": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6319": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "ADD",
      "path": "20"
    },
    "6320": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6321": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6322": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6323": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6324": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "6326": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6327": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "6328": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "ADD",
      "path": "20"
    },
    "6329": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "6330": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6331": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6332": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "ADD",
      "path": "20"
    },
    "6333": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6334": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6335": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6336": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6337": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6338": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6339": {
      "op": "POP"
    },
    "6340": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "SWAP1",
      "path": "20",
      "statement": 66
    },
    "6341": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "DUP9",
      "path": "20"
    },
    "6342": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "AND",
      "path": "20"
    },
    "6343": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6344": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6345": {
      "fn": "Staker.unstake",
      "offset": [
        8318,
        8372
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6346": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x18D4"
    },
    "6349": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6350": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6351": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6352": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "6355": {
      "fn": "Staker.unstake",
      "jump": "i",
      "offset": [
        8382,
        8396
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6356": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6357": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6358": {
      "fn": "Staker.unstake",
      "offset": [
        8382,
        8396
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6359": {
      "op": "POP"
    },
    "6360": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6362": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6364": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6366": {
      "op": "SHL"
    },
    "6367": {
      "op": "SUB"
    },
    "6368": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "SWAP5",
      "path": "20",
      "statement": 67
    },
    "6369": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6370": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "6371": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "AND",
      "path": "20"
    },
    "6372": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "6374": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6375": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6376": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6377": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8414
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "6379": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "6381": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6382": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6383": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6384": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6386": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6387": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6388": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8423
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "6389": {
      "fn": "Staker.unstake",
      "offset": [
        8424,
        8434
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "6390": {
      "fn": "Staker.unstake",
      "offset": [
        8424,
        8434
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6391": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "6396": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "AND",
      "path": "20"
    },
    "6397": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6398": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6399": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "6400": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6401": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6402": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6403": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "DUP5",
      "path": "20"
    },
    "6404": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6405": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8435
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "6406": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6407": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6408": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6409": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "6410": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6411": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6412": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "ADD",
      "path": "20"
    },
    "6413": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6414": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "6416": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6417": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6418": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "ADD",
      "path": "20"
    },
    "6419": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6420": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "6421": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6430": {
      "op": "NOT"
    },
    "6431": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "AND",
      "path": "20"
    },
    "6432": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6434": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6436": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6438": {
      "op": "SHL"
    },
    "6439": {
      "op": "SUB"
    },
    "6440": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6441": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "6442": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "AND",
      "path": "20"
    },
    "6443": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6444": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6445": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "6446": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "OR",
      "path": "20"
    },
    "6447": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6448": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6449": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "6450": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "6451": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6452": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "ADD",
      "path": "20"
    },
    "6453": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6454": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "6456": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6457": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "ADD",
      "path": "20"
    },
    "6458": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "6459": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "6461": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6462": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "6463": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "ADD",
      "path": "20"
    },
    "6464": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6465": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "6467": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6468": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "6469": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "ADD",
      "path": "20"
    },
    "6470": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "6471": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6472": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "6473": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "6474": {
      "op": "POP"
    },
    "6475": {
      "fn": "Staker.unstake",
      "offset": [
        8406,
        8441
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "6476": {
      "fn": "Staker.unstake",
      "offset": [
        7116,
        8470
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "6477": {
      "op": "POP"
    },
    "6478": {
      "op": "POP"
    },
    "6479": {
      "op": "POP"
    },
    "6480": {
      "op": "POP"
    },
    "6481": {
      "fn": "Staker.unstake",
      "jump": "o",
      "offset": [
        7116,
        8470
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6482": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6483": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "6485": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "6486": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6488": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6490": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6492": {
      "op": "SHL"
    },
    "6493": {
      "op": "SUB"
    },
    "6494": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "0"
    },
    "6495": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "11"
    },
    "6496": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "0"
    },
    "6497": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x197C"
    },
    "6500": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "6501": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6503": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "6504": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6508": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6510": {
      "op": "SHL"
    },
    "6511": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6512": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6513": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "6515": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "0"
    },
    "6516": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x467"
    },
    "6519": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6520": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A74"
    },
    "6523": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6524": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6525": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6527": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6529": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6531": {
      "op": "SHL"
    },
    "6532": {
      "op": "SUB"
    },
    "6533": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1934,
        1956
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 68
    },
    "6534": {
      "branch": 164,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1934,
        1956
      ],
      "op": "AND",
      "path": "0"
    },
    "6535": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19E1"
    },
    "6538": {
      "branch": 164,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "6539": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6541": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "6542": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6546": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6548": {
      "op": "SHL"
    },
    "6549": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6550": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6551": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6553": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "6555": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "DUP3",
      "path": "0"
    },
    "6556": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "ADD",
      "path": "0"
    },
    "6557": {
      "op": "MSTORE"
    },
    "6558": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "6560": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6562": {
      "op": "DUP3"
    },
    "6563": {
      "op": "ADD"
    },
    "6564": {
      "op": "MSTORE"
    },
    "6565": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "6598": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "6600": {
      "op": "DUP3"
    },
    "6601": {
      "op": "ADD"
    },
    "6602": {
      "op": "MSTORE"
    },
    "6603": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "6610": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "6612": {
      "op": "SHL"
    },
    "6613": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "6615": {
      "op": "DUP3"
    },
    "6616": {
      "op": "ADD"
    },
    "6617": {
      "op": "MSTORE"
    },
    "6618": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "6620": {
      "op": "ADD"
    },
    "6621": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x467"
    },
    "6624": {
      "op": "JUMP"
    },
    "6625": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6626": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2009,
        2028
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 69,
      "value": "0x10C9"
    },
    "6629": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2019,
        2027
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6630": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2009,
        2018
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2291"
    },
    "6633": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2009,
        2028
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6634": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6635": {
      "fn": "Staker.collectRewards",
      "offset": [
        9532,
        9536
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "6637": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "6639": {
      "offset": [
        2259,
        2266
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "6641": {
      "fn": "Staker.collectRewards",
      "offset": [
        2259,
        2266
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "6642": {
      "offset": [
        2259,
        2278
      ],
      "op": "SUB",
      "path": "1"
    },
    "6643": {
      "offset": [
        2251,
        2314
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A3E"
    },
    "6646": {
      "offset": [
        2251,
        2314
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "6647": {
      "fn": "Staker.collectRewards",
      "offset": [
        2251,
        2314
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "6649": {
      "fn": "Staker.collectRewards",
      "offset": [
        2251,
        2314
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "6650": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6654": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6656": {
      "op": "SHL"
    },
    "6657": {
      "offset": [
        2251,
        2314
      ],
      "op": "DUP2",
      "path": "1"
    },
    "6658": {
      "fn": "Staker.collectRewards",
      "offset": [
        2251,
        2314
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "6659": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6661": {
      "offset": [
        2251,
        2314
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "6663": {
      "fn": "Staker.collectRewards",
      "offset": [
        2251,
        2314
      ],
      "op": "DUP3",
      "path": "1"
    },
    "6664": {
      "fn": "Staker.collectRewards",
      "offset": [
        2251,
        2314
      ],
      "op": "ADD",
      "path": "1"
    },
    "6665": {
      "op": "MSTORE"
    },
    "6666": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6668": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6670": {
      "op": "DUP3"
    },
    "6671": {
      "op": "ADD"
    },
    "6672": {
      "op": "MSTORE"
    },
    "6673": {
      "op": "PUSH32",
      "value": "0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
    },
    "6706": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "6708": {
      "op": "DUP3"
    },
    "6709": {
      "op": "ADD"
    },
    "6710": {
      "op": "MSTORE"
    },
    "6711": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "6713": {
      "op": "ADD"
    },
    "6714": {
      "offset": [
        2251,
        2314
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x467"
    },
    "6717": {
      "op": "JUMP"
    },
    "6718": {
      "offset": [
        2251,
        2314
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "6719": {
      "offset": [
        1680,
        1681
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "6721": {
      "offset": [
        2389,
        2396
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "6723": {
      "offset": [
        2389,
        2407
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "6724": {
      "fn": "Staker.collectRewards",
      "offset": [
        9557,
        9563
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 70,
      "value": "0x4"
    },
    "6726": {
      "fn": "Staker.collectRewards",
      "offset": [
        9557,
        9563
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "6727": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6729": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6731": {
      "op": "SHL"
    },
    "6732": {
      "fn": "Staker.collectRewards",
      "offset": [
        9557,
        9563
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6733": {
      "fn": "Staker.collectRewards",
      "offset": [
        9557,
        9563
      ],
      "op": "DIV",
      "path": "20"
    },
    "6734": {
      "fn": "Staker.collectRewards",
      "offset": [
        9557,
        9563
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xFF"
    },
    "6736": {
      "fn": "Staker.collectRewards",
      "offset": [
        9557,
        9563
      ],
      "op": "AND",
      "path": "20"
    },
    "6737": {
      "branch": 146,
      "fn": "Staker.collectRewards",
      "offset": [
        9556,
        9563
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "6738": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1A6D"
    },
    "6741": {
      "branch": 146,
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "6742": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6744": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6745": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6749": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6751": {
      "op": "SHL"
    },
    "6752": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6753": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6754": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "6756": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "ADD",
      "path": "20"
    },
    "6757": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "6760": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6761": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x29FD"
    },
    "6764": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        9548,
        9574
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6765": {
      "fn": "Staker.collectRewards",
      "offset": [
        9548,
        9574
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6766": {
      "offset": [
        658,
        659
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "6768": {
      "fn": "Staker.collectRewards",
      "offset": [
        9606,
        9638
      ],
      "op": "DUP3",
      "path": "20",
      "statement": 71
    },
    "6769": {
      "fn": "Staker.collectRewards",
      "offset": [
        9606,
        9638
      ],
      "op": "AND",
      "path": "20"
    },
    "6770": {
      "fn": "Staker.collectRewards",
      "offset": [
        9605,
        9644
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "6771": {
      "fn": "Staker.collectRewards",
      "offset": [
        9605,
        9644
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "6772": {
      "branch": 147,
      "fn": "Staker.collectRewards",
      "offset": [
        9605,
        9644
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6773": {
      "fn": "Staker.collectRewards",
      "offset": [
        9605,
        9703
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1A80"
    },
    "6776": {
      "branch": 147,
      "fn": "Staker.collectRewards",
      "offset": [
        9605,
        9703
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "6777": {
      "op": "POP"
    },
    "6778": {
      "offset": [
        699,
        700
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "6780": {
      "fn": "Staker.collectRewards",
      "offset": [
        9665,
        9697
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6781": {
      "fn": "Staker.collectRewards",
      "offset": [
        9665,
        9697
      ],
      "op": "AND",
      "path": "20"
    },
    "6782": {
      "fn": "Staker.collectRewards",
      "offset": [
        9664,
        9703
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "6783": {
      "branch": 148,
      "fn": "Staker.collectRewards",
      "offset": [
        9664,
        9703
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "6784": {
      "fn": "Staker.collectRewards",
      "offset": [
        9605,
        9703
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6785": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1AB4"
    },
    "6788": {
      "branch": 148,
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "6789": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6791": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6792": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6796": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6798": {
      "op": "SHL"
    },
    "6799": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6800": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6801": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6803": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "6805": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6806": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "ADD",
      "path": "20"
    },
    "6807": {
      "op": "MSTORE"
    },
    "6808": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6810": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6812": {
      "op": "DUP3"
    },
    "6813": {
      "op": "ADD"
    },
    "6814": {
      "op": "MSTORE"
    },
    "6815": {
      "op": "PUSH5",
      "value": "0x2174797065"
    },
    "6821": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "6823": {
      "op": "SHL"
    },
    "6824": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "6826": {
      "op": "DUP3"
    },
    "6827": {
      "op": "ADD"
    },
    "6828": {
      "op": "MSTORE"
    },
    "6829": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "6831": {
      "op": "ADD"
    },
    "6832": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "6835": {
      "op": "JUMP"
    },
    "6836": {
      "fn": "Staker.collectRewards",
      "offset": [
        9584,
        9734
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6837": {
      "fn": "Staker.collectRewards",
      "offset": [
        9763,
        9773
      ],
      "op": "CALLER",
      "path": "20"
    },
    "6838": {
      "fn": "Staker.collectRewards",
      "offset": [
        9745,
        9760
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "6840": {
      "fn": "Staker.collectRewards",
      "offset": [
        9813,
        9835
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1AC0"
    },
    "6843": {
      "fn": "Staker.collectRewards",
      "offset": [
        9825,
        9834
      ],
      "op": "DUP6",
      "path": "20"
    },
    "6844": {
      "fn": "Staker.collectRewards",
      "offset": [
        9813,
        9824
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1F65"
    },
    "6847": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        9813,
        9835
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6848": {
      "fn": "Staker.collectRewards",
      "offset": [
        9813,
        9835
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6849": {
      "fn": "Staker.collectRewards",
      "offset": [
        9853,
        9867
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 72,
      "value": "0xC0"
    },
    "6851": {
      "fn": "Staker.collectRewards",
      "offset": [
        9853,
        9867
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6852": {
      "fn": "Staker.collectRewards",
      "offset": [
        9853,
        9867
      ],
      "op": "ADD",
      "path": "20"
    },
    "6853": {
      "fn": "Staker.collectRewards",
      "offset": [
        9853,
        9867
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6854": {
      "fn": "Staker.collectRewards",
      "offset": [
        9784,
        9835
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6855": {
      "fn": "Staker.collectRewards",
      "offset": [
        9784,
        9835
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "6856": {
      "op": "POP"
    },
    "6857": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6859": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6861": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "6863": {
      "op": "SHL"
    },
    "6864": {
      "op": "SUB"
    },
    "6865": {
      "op": "NOT"
    },
    "6866": {
      "fn": "Staker.collectRewards",
      "offset": [
        9853,
        9877
      ],
      "op": "AND",
      "path": "20"
    },
    "6867": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6869": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "6871": {
      "op": "SHL"
    },
    "6872": {
      "branch": 149,
      "fn": "Staker.collectRewards",
      "offset": [
        9853,
        9877
      ],
      "op": "EQ",
      "path": "20"
    },
    "6873": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1AF4"
    },
    "6876": {
      "branch": 149,
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "6877": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6879": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6880": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6884": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6886": {
      "op": "SHL"
    },
    "6887": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6888": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6889": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "6891": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "ADD",
      "path": "20"
    },
    "6892": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "6895": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6896": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2A1D"
    },
    "6899": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        9845,
        9889
      ],
      "op": "JUMP",
      "path": "20"
    },
    "6900": {
      "fn": "Staker.collectRewards",
      "offset": [
        9845,
        9889
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6901": {
      "fn": "Staker.collectRewards",
      "offset": [
        9928,
        9943
      ],
      "op": "TIMESTAMP",
      "path": "20",
      "statement": 73
    },
    "6902": {
      "fn": "Staker.collectRewards",
      "offset": [
        9907,
        9914
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6903": {
      "fn": "Staker.collectRewards",
      "offset": [
        9907,
        9924
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x160"
    },
    "6906": {
      "fn": "Staker.collectRewards",
      "offset": [
        9907,
        9924
      ],
      "op": "ADD",
      "path": "20"
    },
    "6907": {
      "fn": "Staker.collectRewards",
      "offset": [
        9907,
        9924
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6908": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6910": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6912": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6914": {
      "op": "SHL"
    },
    "6915": {
      "op": "SUB"
    },
    "6916": {
      "fn": "Staker.collectRewards",
      "offset": [
        9907,
        9943
      ],
      "op": "AND",
      "path": "20"
    },
    "6917": {
      "fn": "Staker.collectRewards",
      "offset": [
        9907,
        9943
      ],
      "op": "GT",
      "path": "20"
    },
    "6918": {
      "branch": 150,
      "fn": "Staker.collectRewards",
      "offset": [
        9907,
        9943
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "6919": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1B3B"
    },
    "6922": {
      "branch": 150,
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "6923": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6925": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "6926": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6930": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6932": {
      "op": "SHL"
    },
    "6933": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6934": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6935": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6937": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "6939": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6940": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "ADD",
      "path": "20"
    },
    "6941": {
      "op": "MSTORE"
    },
    "6942": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "6944": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6946": {
      "op": "DUP3"
    },
    "6947": {
      "op": "ADD"
    },
    "6948": {
      "op": "MSTORE"
    },
    "6949": {
      "op": "PUSH6",
      "value": "0x85CDD185C9D"
    },
    "6956": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "6958": {
      "op": "SHL"
    },
    "6959": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "6961": {
      "op": "DUP3"
    },
    "6962": {
      "op": "ADD"
    },
    "6963": {
      "op": "MSTORE"
    },
    "6964": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "6966": {
      "op": "ADD"
    },
    "6967": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "6970": {
      "op": "JUMP"
    },
    "6971": {
      "fn": "Staker.collectRewards",
      "offset": [
        9899,
        9954
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "6972": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6974": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6976": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6978": {
      "op": "SHL"
    },
    "6979": {
      "op": "SUB"
    },
    "6980": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "DUP3",
      "path": "20"
    },
    "6981": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "AND",
      "path": "20"
    },
    "6982": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        9985
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "6984": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6985": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6986": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6987": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        9995
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "6989": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "6991": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "6992": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "DUP2",
      "path": "20"
    },
    "6993": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "6994": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "6996": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "DUP1",
      "path": "20"
    },
    "6997": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "DUP4",
      "path": "20"
    },
    "6998": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10004
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "6999": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "7004": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "DUP10",
      "path": "20"
    },
    "7005": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7006": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "AND",
      "path": "20"
    },
    "7007": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7008": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7009": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7010": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7011": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7012": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7013": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7014": {
      "fn": "Staker.collectRewards",
      "offset": [
        9988,
        10015
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "7015": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7016": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7017": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA0"
    },
    "7019": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7020": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "ADD",
      "path": "20"
    },
    "7021": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7022": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7023": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7024": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7025": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7026": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7027": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "AND",
      "path": "20"
    },
    "7028": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7029": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7030": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7032": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7034": {
      "op": "SHL"
    },
    "7035": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7036": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DIV",
      "path": "20"
    },
    "7037": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7038": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "7039": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "AND",
      "path": "20"
    },
    "7040": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "7041": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7042": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "ADD",
      "path": "20"
    },
    "7043": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "7044": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7045": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "7046": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7047": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7049": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7051": {
      "op": "SHL"
    },
    "7052": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7053": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7054": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DIV",
      "path": "20"
    },
    "7055": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7057": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7059": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7061": {
      "op": "SHL"
    },
    "7062": {
      "op": "SUB"
    },
    "7063": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "AND",
      "path": "20"
    },
    "7064": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7065": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7066": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "ADD",
      "path": "20"
    },
    "7067": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7068": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7069": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7070": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7071": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "7073": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7074": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7075": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "ADD",
      "path": "20"
    },
    "7076": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7077": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "7079": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7080": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "ADD",
      "path": "20"
    },
    "7081": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7082": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "7084": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7085": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7086": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "ADD",
      "path": "20"
    },
    "7087": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7088": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "7090": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7091": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "ADD",
      "path": "20"
    },
    "7092": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7093": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7094": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        10015
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7095": {
      "fn": "Staker.collectRewards",
      "offset": [
        9965,
        9985
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7096": {
      "fn": "Staker.collectRewards",
      "offset": [
        10069,
        10101
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7097": {
      "fn": "Staker.collectRewards",
      "offset": [
        10069,
        10101
      ],
      "op": "AND",
      "path": "20"
    },
    "7098": {
      "branch": 151,
      "fn": "Staker.collectRewards",
      "offset": [
        10068,
        10107
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "7099": {
      "fn": "Staker.collectRewards",
      "offset": [
        10064,
        10312
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1C30"
    },
    "7102": {
      "branch": 151,
      "fn": "Staker.collectRewards",
      "offset": [
        10064,
        10312
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "7103": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7105": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7107": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7109": {
      "op": "SHL"
    },
    "7110": {
      "op": "SUB"
    },
    "7111": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7112": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "AND",
      "path": "20"
    },
    "7113": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10189
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "7115": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7116": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7117": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7118": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10200
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "7120": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "7122": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7123": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7124": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7125": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "7127": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7128": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7129": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10209
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "7130": {
      "fn": "Staker.collectRewards",
      "offset": [
        10210,
        10220
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7131": {
      "fn": "Staker.collectRewards",
      "offset": [
        10210,
        10220
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7132": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "7137": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "AND",
      "path": "20"
    },
    "7138": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7139": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7140": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7141": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7142": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7143": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7144": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7145": {
      "fn": "Staker.collectRewards",
      "offset": [
        10192,
        10221
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "7146": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7147": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7148": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "7150": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7151": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "ADD",
      "path": "20"
    },
    "7152": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7153": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7154": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7155": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7156": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7157": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7158": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "7160": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7161": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "ADD",
      "path": "20"
    },
    "7162": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7163": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7165": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7167": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7169": {
      "op": "SHL"
    },
    "7170": {
      "op": "SUB"
    },
    "7171": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "AND",
      "path": "20"
    },
    "7172": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7173": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7174": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "ADD",
      "path": "20"
    },
    "7175": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7176": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7177": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7178": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7179": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "7181": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7182": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "ADD",
      "path": "20"
    },
    "7183": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7184": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7185": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7186": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "ADD",
      "path": "20"
    },
    "7187": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7188": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7189": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7190": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7191": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "7193": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7194": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7195": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "ADD",
      "path": "20"
    },
    "7196": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7197": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "7199": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7200": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "ADD",
      "path": "20"
    },
    "7201": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7202": {
      "fn": "Staker.collectRewards",
      "offset": [
        10253,
        10301
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 74,
      "value": "0x1C2C"
    },
    "7205": {
      "fn": "Staker.collectRewards",
      "offset": [
        10201,
        10208
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7206": {
      "fn": "Staker.collectRewards",
      "offset": [
        10210,
        10217
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7207": {
      "fn": "Staker.collectRewards",
      "offset": [
        10162,
        10221
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7208": {
      "fn": "Staker.collectRewards",
      "offset": [
        10253,
        10273
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2170"
    },
    "7211": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        10253,
        10301
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7212": {
      "fn": "Staker.collectRewards",
      "offset": [
        10253,
        10301
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7213": {
      "fn": "Staker.collectRewards",
      "offset": [
        10235,
        10301
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7214": {
      "fn": "Staker.collectRewards",
      "offset": [
        10235,
        10301
      ],
      "op": "POP",
      "path": "20"
    },
    "7215": {
      "fn": "Staker.collectRewards",
      "offset": [
        10109,
        10312
      ],
      "op": "POP",
      "path": "20"
    },
    "7216": {
      "fn": "Staker.collectRewards",
      "offset": [
        10064,
        10312
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7217": {
      "offset": [
        699,
        700
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "7219": {
      "fn": "Staker.collectRewards",
      "offset": [
        10327,
        10359
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7220": {
      "fn": "Staker.collectRewards",
      "offset": [
        10327,
        10359
      ],
      "op": "AND",
      "path": "20"
    },
    "7221": {
      "branch": 152,
      "fn": "Staker.collectRewards",
      "offset": [
        10326,
        10365
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "7222": {
      "fn": "Staker.collectRewards",
      "offset": [
        10322,
        11228
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1DDB"
    },
    "7225": {
      "branch": 152,
      "fn": "Staker.collectRewards",
      "offset": [
        10322,
        11228
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "7226": {
      "fn": "Staker.collectRewards",
      "offset": [
        10389,
        10396
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 75
    },
    "7227": {
      "fn": "Staker.collectRewards",
      "offset": [
        10389,
        10396
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7228": {
      "fn": "Staker.collectRewards",
      "offset": [
        10389,
        10400
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "7233": {
      "branch": 153,
      "fn": "Staker.collectRewards",
      "offset": [
        10389,
        10400
      ],
      "op": "AND",
      "path": "20"
    },
    "7234": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1C77"
    },
    "7237": {
      "branch": 153,
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "7238": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "7240": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7241": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7245": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7247": {
      "op": "SHL"
    },
    "7248": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7249": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7250": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7252": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "7254": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7255": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "ADD",
      "path": "20"
    },
    "7256": {
      "op": "MSTORE"
    },
    "7257": {
      "op": "PUSH1",
      "value": "0x7"
    },
    "7259": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "7261": {
      "op": "DUP3"
    },
    "7262": {
      "op": "ADD"
    },
    "7263": {
      "op": "MSTORE"
    },
    "7264": {
      "op": "PUSH7",
      "value": "0x85CDD185AD959"
    },
    "7272": {
      "op": "PUSH1",
      "value": "0xCA"
    },
    "7274": {
      "op": "SHL"
    },
    "7275": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "7277": {
      "op": "DUP3"
    },
    "7278": {
      "op": "ADD"
    },
    "7279": {
      "op": "MSTORE"
    },
    "7280": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "7282": {
      "op": "ADD"
    },
    "7283": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "7286": {
      "op": "JUMP"
    },
    "7287": {
      "fn": "Staker.collectRewards",
      "offset": [
        10381,
        10412
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7288": {
      "fn": "Staker.collectRewards",
      "offset": [
        10519,
        10533
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "7290": {
      "fn": "Staker.collectRewards",
      "offset": [
        10536,
        10581
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1C88"
    },
    "7293": {
      "fn": "Staker.collectRewards",
      "offset": [
        10547,
        10562
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "7294": {
      "fn": "Staker.collectRewards",
      "offset": [
        10565,
        10572
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7295": {
      "fn": "Staker.collectRewards",
      "offset": [
        10565,
        10580
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x180"
    },
    "7298": {
      "fn": "Staker.collectRewards",
      "offset": [
        10565,
        10580
      ],
      "op": "ADD",
      "path": "20"
    },
    "7299": {
      "fn": "Staker.collectRewards",
      "offset": [
        10565,
        10580
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7300": {
      "fn": "Staker.collectRewards",
      "offset": [
        10536,
        10539
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2040"
    },
    "7303": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        10536,
        10581
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7304": {
      "fn": "Staker.collectRewards",
      "offset": [
        10536,
        10581
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7305": {
      "fn": "Staker.collectRewards",
      "offset": [
        10519,
        10581
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7306": {
      "fn": "Staker.collectRewards",
      "offset": [
        10519,
        10581
      ],
      "op": "POP",
      "path": "20"
    },
    "7307": {
      "fn": "Staker.collectRewards",
      "offset": [
        10616,
        10623
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7308": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7310": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7312": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7314": {
      "op": "SHL"
    },
    "7315": {
      "op": "SUB"
    },
    "7316": {
      "fn": "Staker.collectRewards",
      "offset": [
        10600,
        10623
      ],
      "op": "AND",
      "path": "20"
    },
    "7317": {
      "fn": "Staker.collectRewards",
      "offset": [
        10600,
        10603
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7318": {
      "fn": "Staker.collectRewards",
      "offset": [
        10600,
        10613
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "7320": {
      "fn": "Staker.collectRewards",
      "offset": [
        10600,
        10613
      ],
      "op": "ADD",
      "path": "20"
    },
    "7321": {
      "fn": "Staker.collectRewards",
      "offset": [
        10600,
        10613
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7322": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7324": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7326": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7328": {
      "op": "SHL"
    },
    "7329": {
      "op": "SUB"
    },
    "7330": {
      "fn": "Staker.collectRewards",
      "offset": [
        10600,
        10623
      ],
      "op": "AND",
      "path": "20"
    },
    "7331": {
      "branch": 154,
      "fn": "Staker.collectRewards",
      "offset": [
        10600,
        10623
      ],
      "op": "GT",
      "path": "20"
    },
    "7332": {
      "fn": "Staker.collectRewards",
      "offset": [
        10596,
        10670
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "7333": {
      "fn": "Staker.collectRewards",
      "offset": [
        10596,
        10670
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CB6"
    },
    "7336": {
      "branch": 154,
      "fn": "Staker.collectRewards",
      "offset": [
        10596,
        10670
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "7337": {
      "fn": "Staker.collectRewards",
      "offset": [
        10650,
        10655
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 76,
      "value": "0x0"
    },
    "7339": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "7340": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "POP",
      "path": "20"
    },
    "7341": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "POP",
      "path": "20"
    },
    "7342": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "POP",
      "path": "20"
    },
    "7343": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "POP",
      "path": "20"
    },
    "7344": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "POP",
      "path": "20"
    },
    "7345": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "POP",
      "path": "20"
    },
    "7346": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1E58"
    },
    "7349": {
      "fn": "Staker.collectRewards",
      "offset": [
        10643,
        10655
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7350": {
      "fn": "Staker.collectRewards",
      "offset": [
        10596,
        10670
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7351": {
      "fn": "Staker.collectRewards",
      "offset": [
        10708,
        10724
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "7353": {
      "fn": "Staker.collectRewards",
      "offset": [
        10708,
        10724
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7354": {
      "fn": "Staker.collectRewards",
      "offset": [
        10708,
        10724
      ],
      "op": "ADD",
      "path": "20"
    },
    "7355": {
      "fn": "Staker.collectRewards",
      "offset": [
        10708,
        10724
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7356": {
      "fn": "Staker.collectRewards",
      "offset": [
        10798,
        10811
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 77,
      "value": "0x80"
    },
    "7358": {
      "fn": "Staker.collectRewards",
      "offset": [
        10798,
        10811
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7359": {
      "fn": "Staker.collectRewards",
      "offset": [
        10798,
        10811
      ],
      "op": "ADD",
      "path": "20"
    },
    "7360": {
      "fn": "Staker.collectRewards",
      "offset": [
        10798,
        10811
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7361": {
      "fn": "Staker.collectRewards",
      "offset": [
        10788,
        10795
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7362": {
      "fn": "Staker.collectRewards",
      "offset": [
        10788,
        10795
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7363": {
      "fn": "Staker.collectRewards",
      "offset": [
        10754,
        10916
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CE6"
    },
    "7366": {
      "fn": "Staker.collectRewards",
      "offset": [
        10754,
        10916
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7367": {
      "fn": "Staker.collectRewards",
      "offset": [
        10788,
        10811
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1CD5"
    },
    "7370": {
      "fn": "Staker.collectRewards",
      "offset": [
        10788,
        10811
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7371": {
      "fn": "Staker.collectRewards",
      "offset": [
        10788,
        10811
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "7376": {
      "fn": "Staker.collectRewards",
      "offset": [
        10788,
        10811
      ],
      "op": "AND",
      "path": "20"
    },
    "7377": {
      "fn": "Staker.collectRewards",
      "offset": [
        10788,
        10811
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "7380": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        10788,
        10811
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7381": {
      "fn": "Staker.collectRewards",
      "offset": [
        10788,
        10811
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7382": {
      "fn": "Staker.collectRewards",
      "offset": [
        10829,
        10832
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7383": {
      "fn": "Staker.collectRewards",
      "offset": [
        10829,
        10842
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "7385": {
      "fn": "Staker.collectRewards",
      "offset": [
        10829,
        10842
      ],
      "op": "ADD",
      "path": "20"
    },
    "7386": {
      "fn": "Staker.collectRewards",
      "offset": [
        10829,
        10842
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7387": {
      "fn": "Staker.collectRewards",
      "offset": [
        10860,
        10867
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7388": {
      "fn": "Staker.collectRewards",
      "offset": [
        10885,
        10892
      ],
      "op": "DUP9",
      "path": "20"
    },
    "7389": {
      "fn": "Staker.collectRewards",
      "offset": [
        10885,
        10902
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x140"
    },
    "7392": {
      "fn": "Staker.collectRewards",
      "offset": [
        10885,
        10902
      ],
      "op": "ADD",
      "path": "20"
    },
    "7393": {
      "fn": "Staker.collectRewards",
      "offset": [
        10885,
        10902
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7394": {
      "fn": "Staker.collectRewards",
      "offset": [
        10754,
        10770
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB26"
    },
    "7397": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        10754,
        10916
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7398": {
      "fn": "Staker.collectRewards",
      "offset": [
        10754,
        10916
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7399": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7401": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7403": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7405": {
      "op": "SHL"
    },
    "7406": {
      "op": "SUB"
    },
    "7407": {
      "fn": "Staker.collectRewards",
      "offset": [
        10954,
        10969
      ],
      "op": "TIMESTAMP",
      "path": "20",
      "statement": 78
    },
    "7408": {
      "fn": "Staker.collectRewards",
      "offset": [
        10931,
        10970
      ],
      "op": "AND",
      "path": "20"
    },
    "7409": {
      "fn": "Staker.collectRewards",
      "offset": [
        10931,
        10944
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "7411": {
      "fn": "Staker.collectRewards",
      "offset": [
        10931,
        10944
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7412": {
      "fn": "Staker.collectRewards",
      "offset": [
        10931,
        10944
      ],
      "op": "ADD",
      "path": "20"
    },
    "7413": {
      "fn": "Staker.collectRewards",
      "offset": [
        10931,
        10970
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7414": {
      "fn": "Staker.collectRewards",
      "offset": [
        11003,
        11004
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 79,
      "value": "0x0"
    },
    "7416": {
      "fn": "Staker.collectRewards",
      "offset": [
        10984,
        11000
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "7418": {
      "fn": "Staker.collectRewards",
      "offset": [
        10984,
        11000
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7419": {
      "fn": "Staker.collectRewards",
      "offset": [
        10984,
        11000
      ],
      "op": "ADD",
      "path": "20"
    },
    "7420": {
      "fn": "Staker.collectRewards",
      "offset": [
        10984,
        11004
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7421": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11036
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 80,
      "value": "0x80"
    },
    "7423": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11036
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7424": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11036
      ],
      "op": "ADD",
      "path": "20"
    },
    "7425": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11053
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7426": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11053
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7427": {
      "fn": "Staker.collectRewards",
      "offset": [
        10738,
        10916
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7428": {
      "fn": "Staker.collectRewards",
      "offset": [
        10738,
        10916
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7429": {
      "op": "POP"
    },
    "7430": {
      "fn": "Staker.collectRewards",
      "offset": [
        10738,
        10916
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7431": {
      "fn": "Staker.collectRewards",
      "offset": [
        10738,
        10916
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7432": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1D12"
    },
    "7435": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11053
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7436": {
      "fn": "Staker.collectRewards",
      "offset": [
        10738,
        10916
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7437": {
      "fn": "Staker.collectRewards",
      "offset": [
        10738,
        10916
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7438": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "7441": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        11018,
        11053
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7442": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11053
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7443": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11053
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7444": {
      "fn": "Staker.collectRewards",
      "offset": [
        11018,
        11053
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7445": {
      "op": "POP"
    },
    "7446": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7448": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7450": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7452": {
      "op": "SHL"
    },
    "7453": {
      "op": "SUB"
    },
    "7454": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "DUP7",
      "path": "20",
      "statement": 81
    },
    "7455": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "AND",
      "path": "20"
    },
    "7456": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "7458": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7459": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7460": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7461": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11075
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "7463": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "7465": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7466": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7467": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7468": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "7470": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7471": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7472": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11084
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "7473": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "7478": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "DUP15",
      "path": "20"
    },
    "7479": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7480": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "AND",
      "path": "20"
    },
    "7481": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7482": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7483": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7484": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7485": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7486": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7487": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7488": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7489": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11095
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "7490": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP11",
      "path": "20"
    },
    "7491": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7492": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7493": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7494": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP13",
      "path": "20"
    },
    "7495": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP8",
      "path": "20"
    },
    "7496": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "ADD",
      "path": "20"
    },
    "7497": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7498": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP14",
      "path": "20"
    },
    "7499": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP8",
      "path": "20"
    },
    "7500": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "ADD",
      "path": "20"
    },
    "7501": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7502": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7503": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7504": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "AND",
      "path": "20"
    },
    "7505": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7514": {
      "op": "NOT"
    },
    "7515": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7516": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7517": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "AND",
      "path": "20"
    },
    "7518": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "OR",
      "path": "20"
    },
    "7519": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7521": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7523": {
      "op": "SHL"
    },
    "7524": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7525": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7526": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "7527": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "AND",
      "path": "20"
    },
    "7528": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "MUL",
      "path": "20"
    },
    "7529": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "7530": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7531": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "7532": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "OR",
      "path": "20"
    },
    "7533": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7542": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7544": {
      "op": "SHL"
    },
    "7545": {
      "op": "NOT"
    },
    "7546": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "AND",
      "path": "20"
    },
    "7547": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7549": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7551": {
      "op": "SHL"
    },
    "7552": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7554": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7556": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7558": {
      "op": "SHL"
    },
    "7559": {
      "op": "SUB"
    },
    "7560": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7561": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7562": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "AND",
      "path": "20"
    },
    "7563": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7564": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7565": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "MUL",
      "path": "20"
    },
    "7566": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "OR",
      "path": "20"
    },
    "7567": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP3",
      "path": "20"
    },
    "7568": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "7569": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "7571": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP13",
      "path": "20"
    },
    "7572": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "ADD",
      "path": "20"
    },
    "7573": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7574": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7576": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7577": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7578": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "ADD",
      "path": "20"
    },
    "7579": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7580": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7581": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7582": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "7583": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "7585": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "DUP14",
      "path": "20"
    },
    "7586": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "ADD",
      "path": "20"
    },
    "7587": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7588": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "7590": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7591": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "7592": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "ADD",
      "path": "20"
    },
    "7593": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7594": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7595": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7596": {
      "fn": "Staker.collectRewards",
      "offset": [
        11068,
        11101
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "7597": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11133
      ],
      "op": "SWAP7",
      "path": "20",
      "statement": 82
    },
    "7598": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11133
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7599": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11133
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7600": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11124
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "7602": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11133
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7603": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11133
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7604": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11133
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7605": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11133
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7606": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11133
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "7607": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7608": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "DUP7",
      "path": "20"
    },
    "7609": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7610": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7611": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7612": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "7613": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "7614": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7615": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11144
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "7616": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11154
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7617": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11154
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7618": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11154
      ],
      "op": "ADD",
      "path": "20"
    },
    "7619": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7620": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7621": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7622": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7623": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "AND",
      "path": "20"
    },
    "7624": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7625": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7626": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "OR",
      "path": "20"
    },
    "7627": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7628": {
      "fn": "Staker.collectRewards",
      "offset": [
        11116,
        11170
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "7629": {
      "fn": "Staker.collectRewards",
      "offset": [
        11185,
        11217
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 83,
      "value": "0x1DD6"
    },
    "7632": {
      "fn": "Staker.collectRewards",
      "offset": [
        11204,
        11217
      ],
      "op": "DUP2",
      "path": "20"
    },
    "7633": {
      "fn": "Staker.collectRewards",
      "offset": [
        11185,
        11217
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7634": {
      "fn": "Staker.collectRewards",
      "offset": [
        11185,
        11217
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "7637": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        11185,
        11217
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7638": {
      "fn": "Staker.collectRewards",
      "offset": [
        11185,
        11217
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7639": {
      "fn": "Staker.collectRewards",
      "offset": [
        11185,
        11217
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7640": {
      "fn": "Staker.collectRewards",
      "offset": [
        11185,
        11217
      ],
      "op": "POP",
      "path": "20"
    },
    "7641": {
      "fn": "Staker.collectRewards",
      "offset": [
        10367,
        11228
      ],
      "op": "POP",
      "path": "20"
    },
    "7642": {
      "fn": "Staker.collectRewards",
      "offset": [
        10367,
        11228
      ],
      "op": "POP",
      "path": "20"
    },
    "7643": {
      "fn": "Staker.collectRewards",
      "offset": [
        10322,
        11228
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7644": {
      "fn": "Staker.collectRewards",
      "offset": [
        11278,
        11297
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7645": {
      "branch": 155,
      "fn": "Staker.collectRewards",
      "offset": [
        11278,
        11297
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "7646": {
      "fn": "Staker.collectRewards",
      "offset": [
        11274,
        11468
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1E4F"
    },
    "7649": {
      "branch": 155,
      "fn": "Staker.collectRewards",
      "offset": [
        11274,
        11468
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "7650": {
      "fn": "Staker.collectRewards",
      "offset": [
        11313,
        11323
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 84,
      "value": "0x4"
    },
    "7652": {
      "fn": "Staker.collectRewards",
      "offset": [
        11313,
        11323
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "7653": {
      "fn": "Staker.collectRewards",
      "offset": [
        11313,
        11362
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1DF8"
    },
    "7656": {
      "fn": "Staker.collectRewards",
      "offset": [
        11313,
        11362
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7657": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7659": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7661": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7663": {
      "op": "SHL"
    },
    "7664": {
      "op": "SUB"
    },
    "7665": {
      "fn": "Staker.collectRewards",
      "offset": [
        11313,
        11323
      ],
      "op": "AND",
      "path": "20"
    },
    "7666": {
      "fn": "Staker.collectRewards",
      "offset": [
        11337,
        11344
      ],
      "op": "DUP6",
      "path": "20"
    },
    "7667": {
      "fn": "Staker.collectRewards",
      "offset": [
        11346,
        11361
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7668": {
      "fn": "Staker.collectRewards",
      "offset": [
        11313,
        11336
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x20FC"
    },
    "7671": {
      "fn": "Staker.collectRewards",
      "jump": "i",
      "offset": [
        11313,
        11362
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7672": {
      "fn": "Staker.collectRewards",
      "offset": [
        11313,
        11362
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7673": {
      "fn": "Staker.collectRewards",
      "offset": [
        11405,
        11414
      ],
      "op": "DUP7",
      "path": "20",
      "statement": 85
    },
    "7674": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "7679": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "AND",
      "path": "20"
    },
    "7680": {
      "fn": "Staker.collectRewards",
      "offset": [
        11396,
        11403
      ],
      "op": "DUP5",
      "path": "20"
    },
    "7681": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7683": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7685": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7687": {
      "op": "SHL"
    },
    "7688": {
      "op": "SUB"
    },
    "7689": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "AND",
      "path": "20"
    },
    "7690": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "PUSH32",
      "path": "20",
      "value": "0x9BF028F26713DBFD10F1790F08EE2C2DF9A1D82C0F238230BB0B64AF2AAB4A9E"
    },
    "7723": {
      "fn": "Staker.collectRewards",
      "offset": [
        11416,
        11431
      ],
      "op": "DUP4",
      "path": "20"
    },
    "7724": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "7726": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7727": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1E3A"
    },
    "7730": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7731": {
      "op": "DUP2"
    },
    "7732": {
      "op": "MSTORE"
    },
    "7733": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7735": {
      "op": "ADD"
    },
    "7736": {
      "op": "SWAP1"
    },
    "7737": {
      "op": "JUMP"
    },
    "7738": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7739": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "7741": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "7742": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7743": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7744": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "SUB",
      "path": "20"
    },
    "7745": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "7746": {
      "fn": "Staker.collectRewards",
      "offset": [
        11381,
        11432
      ],
      "op": "LOG3",
      "path": "20"
    },
    "7747": {
      "fn": "Staker.collectRewards",
      "offset": [
        11453,
        11457
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 86,
      "value": "0x1"
    },
    "7749": {
      "fn": "Staker.collectRewards",
      "offset": [
        11446,
        11457
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "7750": {
      "fn": "Staker.collectRewards",
      "offset": [
        11446,
        11457
      ],
      "op": "POP",
      "path": "20"
    },
    "7751": {
      "fn": "Staker.collectRewards",
      "offset": [
        11446,
        11457
      ],
      "op": "POP",
      "path": "20"
    },
    "7752": {
      "fn": "Staker.collectRewards",
      "offset": [
        11446,
        11457
      ],
      "op": "POP",
      "path": "20"
    },
    "7753": {
      "fn": "Staker.collectRewards",
      "offset": [
        11446,
        11457
      ],
      "op": "POP",
      "path": "20"
    },
    "7754": {
      "fn": "Staker.collectRewards",
      "offset": [
        11446,
        11457
      ],
      "op": "POP",
      "path": "20"
    },
    "7755": {
      "fn": "Staker.collectRewards",
      "offset": [
        11446,
        11457
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1E58"
    },
    "7758": {
      "fn": "Staker.collectRewards",
      "offset": [
        11446,
        11457
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7759": {
      "fn": "Staker.collectRewards",
      "offset": [
        11274,
        11468
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "7760": {
      "fn": "Staker.collectRewards",
      "offset": [
        11545,
        11550
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 87,
      "value": "0x0"
    },
    "7762": {
      "fn": "Staker.collectRewards",
      "offset": [
        11538,
        11550
      ],
      "op": "SWAP5",
      "path": "20"
    },
    "7763": {
      "fn": "Staker.collectRewards",
      "offset": [
        11538,
        11550
      ],
      "op": "POP",
      "path": "20"
    },
    "7764": {
      "fn": "Staker.collectRewards",
      "offset": [
        11538,
        11550
      ],
      "op": "POP",
      "path": "20"
    },
    "7765": {
      "fn": "Staker.collectRewards",
      "offset": [
        11538,
        11550
      ],
      "op": "POP",
      "path": "20"
    },
    "7766": {
      "fn": "Staker.collectRewards",
      "offset": [
        11538,
        11550
      ],
      "op": "POP",
      "path": "20"
    },
    "7767": {
      "fn": "Staker.collectRewards",
      "offset": [
        11538,
        11550
      ],
      "op": "POP",
      "path": "20"
    },
    "7768": {
      "offset": [
        2418,
        2419
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "7769": {
      "offset": [
        1637,
        1638
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "7771": {
      "offset": [
        2562,
        2569
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "7773": {
      "offset": [
        2562,
        2584
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "7774": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "7775": {
      "fn": "Staker.collectRewards",
      "offset": [
        9418,
        11557
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "7776": {
      "op": "POP"
    },
    "7777": {
      "op": "POP"
    },
    "7778": {
      "fn": "Staker.collectRewards",
      "jump": "o",
      "offset": [
        9418,
        11557
      ],
      "op": "JUMP",
      "path": "20"
    },
    "7779": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        1955,
        2265
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7780": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "7782": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "7783": {
      "op": "PUSH4",
      "value": "0x6EB1769F"
    },
    "7788": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "7790": {
      "op": "SHL"
    },
    "7791": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP2",
      "path": "9"
    },
    "7792": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "7793": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2128,
        2132
      ],
      "op": "ADDRESS",
      "path": "9"
    },
    "7794": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "7796": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP3",
      "path": "9"
    },
    "7797": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "ADD",
      "path": "9"
    },
    "7798": {
      "op": "MSTORE"
    },
    "7799": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7801": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7803": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7805": {
      "op": "SHL"
    },
    "7806": {
      "op": "SUB"
    },
    "7807": {
      "op": "DUP4"
    },
    "7808": {
      "op": "DUP2"
    },
    "7809": {
      "op": "AND"
    },
    "7810": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "7812": {
      "op": "DUP4"
    },
    "7813": {
      "op": "ADD"
    },
    "7814": {
      "op": "MSTORE"
    },
    "7815": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2081,
        2101
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7817": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2081,
        2101
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "7818": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2146,
        2151
      ],
      "op": "DUP4",
      "path": "9"
    },
    "7819": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2146,
        2151
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "7820": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2119
      ],
      "op": "DUP7",
      "path": "9"
    },
    "7821": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2119
      ],
      "op": "AND",
      "path": "9"
    },
    "7822": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2119
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7823": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2119
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0xDD62ED3E"
    },
    "7828": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2119
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7829": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "7831": {
      "op": "ADD"
    },
    "7832": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "7834": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "7836": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "7837": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP1",
      "path": "9"
    },
    "7838": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP4",
      "path": "9"
    },
    "7839": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "SUB",
      "path": "9"
    },
    "7840": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP2",
      "path": "9"
    },
    "7841": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP7",
      "path": "9"
    },
    "7842": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "GAS",
      "path": "9"
    },
    "7843": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "STATICCALL",
      "path": "9"
    },
    "7844": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "7845": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP1",
      "path": "9"
    },
    "7846": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "7847": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1EB4"
    },
    "7850": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "7851": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "RETURNDATASIZE",
      "path": "9"
    },
    "7852": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7854": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP1",
      "path": "9"
    },
    "7855": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "RETURNDATACOPY",
      "path": "9"
    },
    "7856": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "RETURNDATASIZE",
      "path": "9"
    },
    "7857": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "7859": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "REVERT",
      "path": "9"
    },
    "7860": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7861": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "POP",
      "path": "9"
    },
    "7862": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "POP",
      "path": "9"
    },
    "7863": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "POP",
      "path": "9"
    },
    "7864": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "POP",
      "path": "9"
    },
    "7865": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "7867": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "7868": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "RETURNDATASIZE",
      "path": "9"
    },
    "7869": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1F"
    },
    "7871": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "NOT",
      "path": "9"
    },
    "7872": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x1F"
    },
    "7874": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP3",
      "path": "9"
    },
    "7875": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "ADD",
      "path": "9"
    },
    "7876": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "AND",
      "path": "9"
    },
    "7877": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP3",
      "path": "9"
    },
    "7878": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "ADD",
      "path": "9"
    },
    "7879": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP1",
      "path": "9"
    },
    "7880": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "7882": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "7883": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "POP",
      "path": "9"
    },
    "7884": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "DUP2",
      "path": "9"
    },
    "7885": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "ADD",
      "path": "9"
    },
    "7886": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7887": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1ED8"
    },
    "7890": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "7891": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7892": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x2A3E"
    },
    "7895": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "jump": "i",
      "offset": [
        2104,
        2143
      ],
      "op": "JUMP",
      "path": "9"
    },
    "7896": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2143
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7897": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2151
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1EE2"
    },
    "7900": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2151
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "7901": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2151
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7902": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2151
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x2960"
    },
    "7905": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "jump": "i",
      "offset": [
        2104,
        2151
      ],
      "op": "JUMP",
      "path": "9"
    },
    "7906": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2104,
        2151
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7907": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 88,
      "value": "0x40"
    },
    "7909": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "7910": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7912": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7914": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7916": {
      "op": "SHL"
    },
    "7917": {
      "op": "SUB"
    },
    "7918": {
      "op": "DUP6"
    },
    "7919": {
      "op": "AND"
    },
    "7920": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "7922": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "DUP3",
      "path": "9"
    },
    "7923": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "ADD",
      "path": "9"
    },
    "7924": {
      "op": "MSTORE"
    },
    "7925": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "7927": {
      "op": "DUP2"
    },
    "7928": {
      "op": "ADD"
    },
    "7929": {
      "op": "DUP3"
    },
    "7930": {
      "op": "SWAP1"
    },
    "7931": {
      "op": "MSTORE"
    },
    "7932": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2081,
        2151
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7933": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2081,
        2151
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "7934": {
      "op": "POP"
    },
    "7935": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2161,
        2258
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F48"
    },
    "7938": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2161,
        2258
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7939": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2181,
        2186
      ],
      "op": "DUP6",
      "path": "9"
    },
    "7940": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2181,
        2186
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7941": {
      "op": "PUSH4",
      "value": "0x95EA7B3"
    },
    "7946": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7948": {
      "op": "SHL"
    },
    "7949": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2211,
        2233
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7950": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "7952": {
      "op": "ADD"
    },
    "7953": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "7954": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "7956": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "DUP1",
      "path": "9"
    },
    "7957": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "7958": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "7960": {
      "op": "NOT"
    },
    "7961": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "DUP2",
      "path": "9"
    },
    "7962": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "DUP5",
      "path": "9"
    },
    "7963": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SUB",
      "path": "9"
    },
    "7964": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "ADD",
      "path": "9"
    },
    "7965": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "DUP2",
      "path": "9"
    },
    "7966": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "7967": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "7968": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7969": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "7970": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "7972": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "DUP2",
      "path": "9"
    },
    "7973": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "ADD",
      "path": "9"
    },
    "7974": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "DUP1",
      "path": "9"
    },
    "7975": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "7976": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7978": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7980": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7982": {
      "op": "SHL"
    },
    "7983": {
      "op": "SUB"
    },
    "7984": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "AND",
      "path": "9"
    },
    "7985": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7987": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7989": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7991": {
      "op": "SHL"
    },
    "7992": {
      "op": "SUB"
    },
    "7993": {
      "op": "NOT"
    },
    "7994": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7995": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP4",
      "path": "9"
    },
    "7996": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "AND",
      "path": "9"
    },
    "7997": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "7998": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "7999": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "8000": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "OR",
      "path": "9"
    },
    "8001": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8002": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "8003": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2188,
        2257
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "8004": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2161,
        2180
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x23E4"
    },
    "8007": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "jump": "i",
      "offset": [
        2161,
        2258
      ],
      "op": "JUMP",
      "path": "9"
    },
    "8008": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2161,
        2258
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8009": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        2071,
        2265
      ],
      "op": "POP",
      "path": "9"
    },
    "8010": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        1955,
        2265
      ],
      "op": "POP",
      "path": "9"
    },
    "8011": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        1955,
        2265
      ],
      "op": "POP",
      "path": "9"
    },
    "8012": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "offset": [
        1955,
        2265
      ],
      "op": "POP",
      "path": "9"
    },
    "8013": {
      "fn": "SafeERC20.safeIncreaseAllowance",
      "jump": "o",
      "offset": [
        1955,
        2265
      ],
      "op": "JUMP",
      "path": "9"
    },
    "8014": {
      "fn": "Address.functionCall",
      "offset": [
        3461,
        3684
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "8015": {
      "fn": "Address.functionCall",
      "offset": [
        3594,
        3606
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "8017": {
      "fn": "Address.functionCall",
      "offset": [
        3625,
        3677
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 89,
      "value": "0x1F5D"
    },
    "8020": {
      "fn": "Address.functionCall",
      "offset": [
        3647,
        3653
      ],
      "op": "DUP5",
      "path": "10"
    },
    "8021": {
      "fn": "Address.functionCall",
      "offset": [
        3655,
        3659
      ],
      "op": "DUP5",
      "path": "10"
    },
    "8022": {
      "fn": "Address.functionCall",
      "offset": [
        3661,
        3662
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "8024": {
      "fn": "Address.functionCall",
      "offset": [
        3664,
        3676
      ],
      "op": "DUP6",
      "path": "10"
    },
    "8025": {
      "fn": "Address.functionCall",
      "offset": [
        3625,
        3646
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x24B6"
    },
    "8028": {
      "fn": "Address.functionCall",
      "jump": "i",
      "offset": [
        3625,
        3677
      ],
      "op": "JUMP",
      "path": "10"
    },
    "8029": {
      "fn": "Address.functionCall",
      "offset": [
        3625,
        3677
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "8030": {
      "fn": "Address.functionCall",
      "offset": [
        3618,
        3677
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "8031": {
      "fn": "Address.functionCall",
      "offset": [
        3461,
        3684
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "8032": {
      "op": "POP"
    },
    "8033": {
      "op": "POP"
    },
    "8034": {
      "op": "POP"
    },
    "8035": {
      "op": "POP"
    },
    "8036": {
      "fn": "Address.functionCall",
      "jump": "o",
      "offset": [
        3461,
        3684
      ],
      "op": "JUMP",
      "path": "10"
    },
    "8037": {
      "fn": "Staker._getProject",
      "offset": [
        3197,
        3349
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8038": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8040": {
      "op": "DUP1"
    },
    "8041": {
      "op": "MLOAD"
    },
    "8042": {
      "op": "PUSH2",
      "value": "0x1A0"
    },
    "8045": {
      "op": "DUP2"
    },
    "8046": {
      "op": "ADD"
    },
    "8047": {
      "op": "DUP3"
    },
    "8048": {
      "op": "MSTORE"
    },
    "8049": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8051": {
      "op": "DUP1"
    },
    "8052": {
      "op": "DUP3"
    },
    "8053": {
      "op": "MSTORE"
    },
    "8054": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8056": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8058": {
      "op": "DUP4"
    },
    "8059": {
      "op": "ADD"
    },
    "8060": {
      "op": "DUP2"
    },
    "8061": {
      "op": "SWAP1"
    },
    "8062": {
      "op": "MSTORE"
    },
    "8063": {
      "op": "DUP3"
    },
    "8064": {
      "op": "DUP5"
    },
    "8065": {
      "op": "ADD"
    },
    "8066": {
      "op": "DUP3"
    },
    "8067": {
      "op": "SWAP1"
    },
    "8068": {
      "op": "MSTORE"
    },
    "8069": {
      "op": "DUP3"
    },
    "8070": {
      "op": "ADD"
    },
    "8071": {
      "op": "DUP2"
    },
    "8072": {
      "op": "SWAP1"
    },
    "8073": {
      "op": "MSTORE"
    },
    "8074": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "8076": {
      "op": "DUP3"
    },
    "8077": {
      "op": "ADD"
    },
    "8078": {
      "op": "DUP2"
    },
    "8079": {
      "op": "SWAP1"
    },
    "8080": {
      "op": "MSTORE"
    },
    "8081": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8083": {
      "op": "DUP3"
    },
    "8084": {
      "op": "ADD"
    },
    "8085": {
      "op": "DUP2"
    },
    "8086": {
      "op": "SWAP1"
    },
    "8087": {
      "op": "MSTORE"
    },
    "8088": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "8090": {
      "op": "DUP3"
    },
    "8091": {
      "op": "ADD"
    },
    "8092": {
      "op": "DUP2"
    },
    "8093": {
      "op": "SWAP1"
    },
    "8094": {
      "op": "MSTORE"
    },
    "8095": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8097": {
      "op": "DUP3"
    },
    "8098": {
      "op": "ADD"
    },
    "8099": {
      "op": "DUP2"
    },
    "8100": {
      "op": "SWAP1"
    },
    "8101": {
      "op": "MSTORE"
    },
    "8102": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "8105": {
      "op": "DUP3"
    },
    "8106": {
      "op": "ADD"
    },
    "8107": {
      "op": "DUP2"
    },
    "8108": {
      "op": "SWAP1"
    },
    "8109": {
      "op": "MSTORE"
    },
    "8110": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "8113": {
      "op": "DUP3"
    },
    "8114": {
      "op": "ADD"
    },
    "8115": {
      "op": "DUP2"
    },
    "8116": {
      "op": "SWAP1"
    },
    "8117": {
      "op": "MSTORE"
    },
    "8118": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "8121": {
      "op": "DUP3"
    },
    "8122": {
      "op": "ADD"
    },
    "8123": {
      "op": "DUP2"
    },
    "8124": {
      "op": "SWAP1"
    },
    "8125": {
      "op": "MSTORE"
    },
    "8126": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "8129": {
      "op": "DUP3"
    },
    "8130": {
      "op": "ADD"
    },
    "8131": {
      "op": "DUP2"
    },
    "8132": {
      "op": "SWAP1"
    },
    "8133": {
      "op": "MSTORE"
    },
    "8134": {
      "op": "PUSH2",
      "value": "0x180"
    },
    "8137": {
      "op": "DUP3"
    },
    "8138": {
      "op": "ADD"
    },
    "8139": {
      "op": "MSTORE"
    },
    "8140": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3320
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 90,
      "value": "0x3"
    },
    "8142": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3320
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "8143": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8144": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8145": {
      "op": "PUSH4",
      "value": "0x8206D49F"
    },
    "8150": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8152": {
      "op": "SHL"
    },
    "8153": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8154": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8155": {
      "op": "PUSH4",
      "value": "0xFFFFFFFF"
    },
    "8160": {
      "op": "DUP5"
    },
    "8161": {
      "op": "AND"
    },
    "8162": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "8164": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP3",
      "path": "20"
    },
    "8165": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "ADD",
      "path": "20"
    },
    "8166": {
      "op": "MSTORE"
    },
    "8167": {
      "op": "SWAP1"
    },
    "8168": {
      "op": "SWAP2"
    },
    "8169": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8171": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8173": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8175": {
      "op": "SHL"
    },
    "8176": {
      "op": "SUB"
    },
    "8177": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3320
      ],
      "op": "AND",
      "path": "20"
    },
    "8178": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3320
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8179": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3331
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x8206D49F"
    },
    "8184": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3331
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8185": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "8187": {
      "op": "ADD"
    },
    "8188": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "8190": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "8192": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8193": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP1",
      "path": "20"
    },
    "8194": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP4",
      "path": "20"
    },
    "8195": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "SUB",
      "path": "20"
    },
    "8196": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8197": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP7",
      "path": "20"
    },
    "8198": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "GAS",
      "path": "20"
    },
    "8199": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "STATICCALL",
      "path": "20"
    },
    "8200": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "8201": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP1",
      "path": "20"
    },
    "8202": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "8203": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2018"
    },
    "8206": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "8207": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "8208": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "8210": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP1",
      "path": "20"
    },
    "8211": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "8212": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "8213": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "8215": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "REVERT",
      "path": "20"
    },
    "8216": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8217": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "POP",
      "path": "20"
    },
    "8218": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "POP",
      "path": "20"
    },
    "8219": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "POP",
      "path": "20"
    },
    "8220": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "POP",
      "path": "20"
    },
    "8221": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "8223": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8224": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "8225": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "8227": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP3",
      "path": "20"
    },
    "8228": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "8229": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "8231": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "8232": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8233": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8234": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "ADD",
      "path": "20"
    },
    "8235": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "8237": {
      "op": "NOT"
    },
    "8238": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "AND",
      "path": "20"
    },
    "8239": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP3",
      "path": "20"
    },
    "8240": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "ADD",
      "path": "20"
    },
    "8241": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "8243": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8244": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5BC"
    },
    "8247": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8248": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8249": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8250": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "ADD",
      "path": "20"
    },
    "8251": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8252": {
      "fn": "Staker._getProject",
      "offset": [
        3310,
        3342
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2BE5"
    },
    "8255": {
      "fn": "Staker._getProject",
      "jump": "i",
      "offset": [
        3310,
        3342
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8256": {
      "fn": "Staker.min",
      "offset": [
        5963,
        6065
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8257": {
      "fn": "Staker.min",
      "offset": [
        6019,
        6025
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "8259": {
      "fn": "Staker.min",
      "offset": [
        6049,
        6050
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 91
    },
    "8260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8262": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8264": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8266": {
      "op": "SHL"
    },
    "8267": {
      "op": "SUB"
    },
    "8268": {
      "fn": "Staker.min",
      "offset": [
        6044,
        6050
      ],
      "op": "AND",
      "path": "20"
    },
    "8269": {
      "fn": "Staker.min",
      "offset": [
        6044,
        6045
      ],
      "op": "DUP4",
      "path": "20"
    },
    "8270": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8272": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8274": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8276": {
      "op": "SHL"
    },
    "8277": {
      "op": "SUB"
    },
    "8278": {
      "fn": "Staker.min",
      "offset": [
        6044,
        6050
      ],
      "op": "AND",
      "path": "20"
    },
    "8279": {
      "fn": "Staker.min",
      "offset": [
        6044,
        6050
      ],
      "op": "GT",
      "path": "20"
    },
    "8280": {
      "branch": 156,
      "fn": "Staker.min",
      "offset": [
        6044,
        6050
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "8281": {
      "fn": "Staker.min",
      "offset": [
        6044,
        6058
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2062"
    },
    "8284": {
      "branch": 156,
      "fn": "Staker.min",
      "offset": [
        6044,
        6058
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "8285": {
      "fn": "Staker.min",
      "offset": [
        6057,
        6058
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8286": {
      "fn": "Staker.min",
      "offset": [
        6044,
        6058
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1347"
    },
    "8289": {
      "fn": "Staker.min",
      "offset": [
        6044,
        6058
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8290": {
      "fn": "Staker.min",
      "offset": [
        6044,
        6058
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8291": {
      "op": "POP"
    },
    "8292": {
      "fn": "Staker.min",
      "offset": [
        6053,
        6054
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8293": {
      "fn": "Staker.min",
      "offset": [
        6053,
        6054
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8294": {
      "fn": "Staker.min",
      "offset": [
        6037,
        6058
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8295": {
      "op": "POP"
    },
    "8296": {
      "fn": "Staker.min",
      "jump": "o",
      "offset": [
        5963,
        6065
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8297": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        695,
        906
      ],
      "op": "JUMPDEST",
      "path": "19"
    },
    "8298": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        826,
        830
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x0"
    },
    "8300": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        892,
        899
      ],
      "op": "DUP4",
      "path": "19",
      "statement": 92
    },
    "8301": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8303": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8305": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8307": {
      "op": "SHL"
    },
    "8308": {
      "op": "SUB"
    },
    "8309": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        899
      ],
      "op": "AND",
      "path": "19"
    },
    "8310": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x1"
    },
    "8312": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        859,
        866
      ],
      "op": "DUP5",
      "path": "19"
    },
    "8313": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        868,
        871
      ],
      "op": "DUP5",
      "path": "19"
    },
    "8314": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        868,
        873
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x40"
    },
    "8316": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        868,
        873
      ],
      "op": "ADD",
      "path": "19"
    },
    "8317": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        868,
        873
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "8318": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        875,
        878
      ],
      "op": "DUP6",
      "path": "19"
    },
    "8319": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        875,
        880
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x0"
    },
    "8321": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        875,
        880
      ],
      "op": "ADD",
      "path": "19"
    },
    "8322": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        875,
        880
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "8323": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        882,
        885
      ],
      "op": "DUP7",
      "path": "19"
    },
    "8324": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        882,
        887
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x20"
    },
    "8326": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        882,
        887
      ],
      "op": "ADD",
      "path": "19"
    },
    "8327": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        882,
        887
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "8328": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x40"
    },
    "8330": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "8331": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x0"
    },
    "8333": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "DUP2",
      "path": "19"
    },
    "8334": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "MSTORE",
      "path": "19"
    },
    "8335": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x20"
    },
    "8337": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "ADD",
      "path": "19"
    },
    "8338": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x40"
    },
    "8340": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "MSTORE",
      "path": "19"
    },
    "8341": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x40"
    },
    "8343": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "8344": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH2",
      "path": "19",
      "value": "0x20BD"
    },
    "8347": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SWAP5",
      "path": "19"
    },
    "8348": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SWAP4",
      "path": "19"
    },
    "8349": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SWAP3",
      "path": "19"
    },
    "8350": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SWAP2",
      "path": "19"
    },
    "8351": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "8352": {
      "op": "SWAP4"
    },
    "8353": {
      "op": "DUP5"
    },
    "8354": {
      "op": "MSTORE"
    },
    "8355": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "8357": {
      "op": "SWAP3"
    },
    "8358": {
      "op": "SWAP1"
    },
    "8359": {
      "op": "SWAP3"
    },
    "8360": {
      "op": "AND"
    },
    "8361": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8363": {
      "op": "DUP5"
    },
    "8364": {
      "op": "ADD"
    },
    "8365": {
      "op": "MSTORE"
    },
    "8366": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8368": {
      "op": "DUP4"
    },
    "8369": {
      "op": "ADD"
    },
    "8370": {
      "op": "MSTORE"
    },
    "8371": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8373": {
      "op": "DUP3"
    },
    "8374": {
      "op": "ADD"
    },
    "8375": {
      "op": "MSTORE"
    },
    "8376": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "8378": {
      "op": "ADD"
    },
    "8379": {
      "op": "SWAP1"
    },
    "8380": {
      "op": "JUMP"
    },
    "8381": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "JUMPDEST",
      "path": "19"
    },
    "8382": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x20"
    },
    "8384": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x40"
    },
    "8386": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "8387": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x20"
    },
    "8389": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "DUP2",
      "path": "19"
    },
    "8390": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SUB",
      "path": "19"
    },
    "8391": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "8392": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "DUP1",
      "path": "19"
    },
    "8393": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "DUP5",
      "path": "19"
    },
    "8394": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SUB",
      "path": "19"
    },
    "8395": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "8396": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "DUP6",
      "path": "19"
    },
    "8397": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "GAS",
      "path": "19"
    },
    "8398": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "STATICCALL",
      "path": "19"
    },
    "8399": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "ISZERO",
      "path": "19"
    },
    "8400": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "DUP1",
      "path": "19"
    },
    "8401": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "ISZERO",
      "path": "19"
    },
    "8402": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH2",
      "path": "19",
      "value": "0x20DF"
    },
    "8405": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "JUMPI",
      "path": "19"
    },
    "8406": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "RETURNDATASIZE",
      "path": "19"
    },
    "8407": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x0"
    },
    "8409": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "DUP1",
      "path": "19"
    },
    "8410": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "RETURNDATACOPY",
      "path": "19"
    },
    "8411": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "RETURNDATASIZE",
      "path": "19"
    },
    "8412": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x0"
    },
    "8414": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "REVERT",
      "path": "19"
    },
    "8415": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "JUMPDEST",
      "path": "19"
    },
    "8416": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "POP",
      "path": "19"
    },
    "8417": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "POP",
      "path": "19"
    },
    "8418": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "POP",
      "path": "19"
    },
    "8419": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x20"
    },
    "8421": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x40"
    },
    "8423": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "8424": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "SUB",
      "path": "19"
    },
    "8425": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        888
      ],
      "op": "MLOAD",
      "path": "19"
    },
    "8426": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8428": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8430": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8432": {
      "op": "SHL"
    },
    "8433": {
      "op": "SUB"
    },
    "8434": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        899
      ],
      "op": "AND",
      "path": "19"
    },
    "8435": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        849,
        899
      ],
      "op": "EQ",
      "path": "19"
    },
    "8436": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        842,
        899
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "8437": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        842,
        899
      ],
      "op": "POP",
      "path": "19"
    },
    "8438": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        695,
        906
      ],
      "op": "SWAP4",
      "path": "19"
    },
    "8439": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        695,
        906
      ],
      "op": "SWAP3",
      "path": "19"
    },
    "8440": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        695,
        906
      ],
      "op": "POP",
      "path": "19"
    },
    "8441": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        695,
        906
      ],
      "op": "POP",
      "path": "19"
    },
    "8442": {
      "fn": "SigVerifier._isSigner",
      "offset": [
        695,
        906
      ],
      "op": "POP",
      "path": "19"
    },
    "8443": {
      "fn": "SigVerifier._isSigner",
      "jump": "o",
      "offset": [
        695,
        906
      ],
      "op": "JUMP",
      "path": "19"
    },
    "8444": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        634,
        839
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8445": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        773,
        831
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 93,
      "value": "0x40"
    },
    "8447": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        773,
        831
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "8448": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8450": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8452": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8454": {
      "op": "SHL"
    },
    "8455": {
      "op": "SUB"
    },
    "8456": {
      "op": "DUP4"
    },
    "8457": {
      "op": "AND"
    },
    "8458": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        773,
        831
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "8460": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        773,
        831
      ],
      "op": "DUP3",
      "path": "9"
    },
    "8461": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        773,
        831
      ],
      "op": "ADD",
      "path": "9"
    },
    "8462": {
      "op": "MSTORE"
    },
    "8463": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "8465": {
      "op": "DUP2"
    },
    "8466": {
      "op": "ADD"
    },
    "8467": {
      "op": "DUP3"
    },
    "8468": {
      "op": "SWAP1"
    },
    "8469": {
      "op": "MSTORE"
    },
    "8470": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        746,
        832
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x212C"
    },
    "8473": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        746,
        832
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8474": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        766,
        771
      ],
      "op": "DUP5",
      "path": "9"
    },
    "8475": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        766,
        771
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8476": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "8481": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8483": {
      "op": "SHL"
    },
    "8484": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        796,
        819
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8485": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "8487": {
      "op": "ADD"
    },
    "8488": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        773,
        831
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F11"
    },
    "8491": {
      "op": "JUMP"
    },
    "8492": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        746,
        832
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8493": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        634,
        839
      ],
      "op": "POP",
      "path": "9"
    },
    "8494": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        634,
        839
      ],
      "op": "POP",
      "path": "9"
    },
    "8495": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        634,
        839
      ],
      "op": "POP",
      "path": "9"
    },
    "8496": {
      "fn": "SafeERC20.safeTransfer",
      "jump": "o",
      "offset": [
        634,
        839
      ],
      "op": "JUMP",
      "path": "9"
    },
    "8497": {
      "fn": "Staker._checkProject",
      "offset": [
        15144,
        15261
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8498": {
      "fn": "Staker._checkProject",
      "offset": [
        15227,
        15237
      ],
      "op": "DUP1",
      "path": "20",
      "statement": 94
    },
    "8499": {
      "fn": "Staker._checkProject",
      "offset": [
        15227,
        15237
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8500": {
      "fn": "Staker._checkProject",
      "offset": [
        15227,
        15241
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "8505": {
      "branch": 157,
      "fn": "Staker._checkProject",
      "offset": [
        15227,
        15241
      ],
      "op": "AND",
      "path": "20"
    },
    "8506": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x10C9"
    },
    "8509": {
      "branch": 157,
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "8510": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "8512": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8513": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8517": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8519": {
      "op": "SHL"
    },
    "8520": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8521": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8522": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8524": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "8526": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "DUP3",
      "path": "20"
    },
    "8527": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "ADD",
      "path": "20"
    },
    "8528": {
      "op": "MSTORE"
    },
    "8529": {
      "op": "PUSH1",
      "value": "0x8"
    },
    "8531": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "8533": {
      "op": "DUP3"
    },
    "8534": {
      "op": "ADD"
    },
    "8535": {
      "op": "MSTORE"
    },
    "8536": {
      "op": "PUSH8",
      "value": "0x85C1C9BDA9958DD"
    },
    "8545": {
      "op": "PUSH1",
      "value": "0xC2"
    },
    "8547": {
      "op": "SHL"
    },
    "8548": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "8550": {
      "op": "DUP3"
    },
    "8551": {
      "op": "ADD"
    },
    "8552": {
      "op": "MSTORE"
    },
    "8553": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "8555": {
      "op": "ADD"
    },
    "8556": {
      "fn": "Staker._checkProject",
      "offset": [
        15219,
        15254
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "8559": {
      "op": "JUMP"
    },
    "8560": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12186,
        12969
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8561": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12355,
        12362
      ],
      "op": "DUP1",
      "path": "20"
    },
    "8562": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12355,
        12362
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8563": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12332,
        12339
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "8565": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12332,
        12339
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8566": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12355,
        12367
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8567": {
      "branch": 158,
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12355,
        12367
      ],
      "op": "SUB",
      "path": "20"
    },
    "8568": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12351,
        12402
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2183"
    },
    "8571": {
      "branch": 158,
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12351,
        12402
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "8572": {
      "op": "POP"
    },
    "8573": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12390,
        12391
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 95,
      "value": "0x0"
    },
    "8575": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12383,
        12391
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1347"
    },
    "8578": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12383,
        12391
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8579": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12351,
        12402
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8580": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12412,
        12426
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "8582": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12429,
        12474
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2194"
    },
    "8585": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12440,
        12455
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "8586": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12458,
        12465
      ],
      "op": "DUP6",
      "path": "20"
    },
    "8587": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12458,
        12473
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x180"
    },
    "8590": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12458,
        12473
      ],
      "op": "ADD",
      "path": "20"
    },
    "8591": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12458,
        12473
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8592": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12429,
        12432
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2040"
    },
    "8595": {
      "fn": "Staker._accumHoldingRewards",
      "jump": "i",
      "offset": [
        12429,
        12474
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8596": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12429,
        12474
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8597": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12412,
        12474
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8598": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12412,
        12474
      ],
      "op": "POP",
      "path": "20"
    },
    "8599": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12505,
        12512
      ],
      "op": "DUP1",
      "path": "20"
    },
    "8600": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8602": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8604": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8606": {
      "op": "SHL"
    },
    "8607": {
      "op": "SUB"
    },
    "8608": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12489,
        12512
      ],
      "op": "AND",
      "path": "20"
    },
    "8609": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12489,
        12492
      ],
      "op": "DUP4",
      "path": "20"
    },
    "8610": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12489,
        12502
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "8612": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12489,
        12502
      ],
      "op": "ADD",
      "path": "20"
    },
    "8613": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12489,
        12502
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8614": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8616": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8618": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8620": {
      "op": "SHL"
    },
    "8621": {
      "op": "SUB"
    },
    "8622": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12489,
        12512
      ],
      "op": "AND",
      "path": "20"
    },
    "8623": {
      "branch": 159,
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12489,
        12512
      ],
      "op": "GT",
      "path": "20"
    },
    "8624": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12485,
        12547
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "8625": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12485,
        12547
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x21BE"
    },
    "8628": {
      "branch": 159,
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12485,
        12547
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "8629": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12535,
        12536
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 96,
      "value": "0x0"
    },
    "8631": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12528,
        12536
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8632": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12528,
        12536
      ],
      "op": "POP",
      "path": "20"
    },
    "8633": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12528,
        12536
      ],
      "op": "POP",
      "path": "20"
    },
    "8634": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12528,
        12536
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1347"
    },
    "8637": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12528,
        12536
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8638": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12485,
        12547
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8639": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12581,
        12597
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "8641": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12581,
        12597
      ],
      "op": "DUP4",
      "path": "20"
    },
    "8642": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12581,
        12597
      ],
      "op": "ADD",
      "path": "20"
    },
    "8643": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12581,
        12597
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8644": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12665,
        12678
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 97,
      "value": "0x80"
    },
    "8646": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12665,
        12678
      ],
      "op": "DUP6",
      "path": "20"
    },
    "8647": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12665,
        12678
      ],
      "op": "ADD",
      "path": "20"
    },
    "8648": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12665,
        12678
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8649": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12655,
        12662
      ],
      "op": "DUP5",
      "path": "20"
    },
    "8650": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12655,
        12662
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8651": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12625,
        12761
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x21E8"
    },
    "8654": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12625,
        12761
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8655": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12655,
        12678
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x21D7"
    },
    "8658": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12655,
        12678
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8659": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12655,
        12678
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2949"
    },
    "8662": {
      "fn": "Staker._accumHoldingRewards",
      "jump": "i",
      "offset": [
        12655,
        12678
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8663": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12655,
        12678
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8664": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12692,
        12695
      ],
      "op": "DUP6",
      "path": "20"
    },
    "8665": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12692,
        12705
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "8667": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12692,
        12705
      ],
      "op": "ADD",
      "path": "20"
    },
    "8668": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12692,
        12705
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8669": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12719,
        12726
      ],
      "op": "DUP5",
      "path": "20"
    },
    "8670": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12740,
        12747
      ],
      "op": "DUP9",
      "path": "20"
    },
    "8671": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12740,
        12751
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x120"
    },
    "8674": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12740,
        12751
      ],
      "op": "ADD",
      "path": "20"
    },
    "8675": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12740,
        12751
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8676": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12625,
        12641
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB26"
    },
    "8679": {
      "fn": "Staker._accumHoldingRewards",
      "jump": "i",
      "offset": [
        12625,
        12761
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8680": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12625,
        12761
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8681": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x21F2"
    },
    "8684": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8685": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "DUP3",
      "path": "20"
    },
    "8686": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "8689": {
      "fn": "Staker._accumHoldingRewards",
      "jump": "i",
      "offset": [
        12608,
        12761
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8690": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8691": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8693": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8695": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8697": {
      "op": "SHL"
    },
    "8698": {
      "op": "SUB"
    },
    "8699": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12794,
        12809
      ],
      "op": "TIMESTAMP",
      "path": "20",
      "statement": 98
    },
    "8700": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12771,
        12810
      ],
      "op": "AND",
      "path": "20"
    },
    "8701": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12771,
        12784
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "8703": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12771,
        12784
      ],
      "op": "DUP7",
      "path": "20"
    },
    "8704": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12771,
        12784
      ],
      "op": "ADD",
      "path": "20"
    },
    "8705": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12771,
        12810
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8706": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12839,
        12840
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 99,
      "value": "0x0"
    },
    "8708": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12820,
        12836
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "8710": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12820,
        12836
      ],
      "op": "DUP7",
      "path": "20"
    },
    "8711": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12820,
        12836
      ],
      "op": "ADD",
      "path": "20"
    },
    "8712": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12820,
        12840
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8713": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12868
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 100,
      "value": "0x60"
    },
    "8715": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12868
      ],
      "op": "DUP6",
      "path": "20"
    },
    "8716": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12868
      ],
      "op": "ADD",
      "path": "20"
    },
    "8717": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12885
      ],
      "op": "DUP1",
      "path": "20"
    },
    "8718": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12885
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8719": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8720": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "8721": {
      "op": "POP"
    },
    "8722": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "DUP3",
      "path": "20"
    },
    "8723": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8724": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12885
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x221E"
    },
    "8727": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12885
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8728": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "DUP4",
      "path": "20"
    },
    "8729": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12608,
        12761
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8730": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12885
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2960"
    },
    "8733": {
      "fn": "Staker._accumHoldingRewards",
      "jump": "i",
      "offset": [
        12850,
        12885
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8734": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12885
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "8735": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12885
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8736": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12850,
        12885
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8737": {
      "op": "POP"
    },
    "8738": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8740": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8742": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8744": {
      "op": "SHL"
    },
    "8745": {
      "op": "SUB"
    },
    "8746": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "SWAP6",
      "path": "20",
      "statement": 101
    },
    "8747": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8748": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "8749": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "AND",
      "path": "20"
    },
    "8750": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "8752": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8753": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8754": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8755": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12904
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "8757": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "8759": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8760": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8761": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8762": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "8764": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "DUP1",
      "path": "20"
    },
    "8765": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "DUP4",
      "path": "20"
    },
    "8766": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12913
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "8767": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12914,
        12924
      ],
      "op": "SWAP7",
      "path": "20"
    },
    "8768": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12914,
        12924
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8769": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xFFFFFFFF"
    },
    "8774": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "AND",
      "path": "20"
    },
    "8775": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "DUP4",
      "path": "20"
    },
    "8776": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8777": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "SWAP6",
      "path": "20"
    },
    "8778": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8779": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "8780": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8781": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "DUP6",
      "path": "20"
    },
    "8782": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8783": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12925
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "8784": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "DUP5",
      "path": "20"
    },
    "8785": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8786": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "DUP2",
      "path": "20"
    },
    "8787": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "8788": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8789": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "DUP5",
      "path": "20"
    },
    "8790": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "ADD",
      "path": "20"
    },
    "8791": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8792": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "8794": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "DUP3",
      "path": "20"
    },
    "8795": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "ADD",
      "path": "20"
    },
    "8796": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "DUP1",
      "path": "20"
    },
    "8797": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "8798": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "8807": {
      "op": "NOT"
    },
    "8808": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "AND",
      "path": "20"
    },
    "8809": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8811": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8813": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8815": {
      "op": "SHL"
    },
    "8816": {
      "op": "SUB"
    },
    "8817": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8818": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "8819": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "AND",
      "path": "20"
    },
    "8820": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8821": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8822": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8823": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "OR",
      "path": "20"
    },
    "8824": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8825": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "8826": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "8827": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "DUP4",
      "path": "20"
    },
    "8828": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "ADD",
      "path": "20"
    },
    "8829": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8830": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "8832": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "DUP6",
      "path": "20"
    },
    "8833": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "ADD",
      "path": "20"
    },
    "8834": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "8835": {
      "op": "POP"
    },
    "8836": {
      "op": "POP"
    },
    "8837": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "8839": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "ADD",
      "path": "20"
    },
    "8840": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "8841": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "8843": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "8844": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "8845": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "ADD",
      "path": "20"
    },
    "8846": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12896,
        12931
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "8847": {
      "fn": "Staker._accumHoldingRewards",
      "offset": [
        12949,
        12962
      ],
      "op": "SWAP1",
      "path": "20",
      "statement": 102
    },
    "8848": {
      "fn": "Staker._accumHoldingRewards",
      "jump": "o",
      "offset": [
        12186,
        12969
      ],
      "op": "JUMP",
      "path": "20"
    },
    "8849": {
      "fn": "Ownable._setOwner",
      "offset": [
        2041,
        2210
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "8850": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "8852": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "DUP1",
      "path": "0"
    },
    "8853": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "8854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8858": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8860": {
      "op": "SHL"
    },
    "8861": {
      "op": "SUB"
    },
    "8862": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 103
    },
    "8863": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "8864": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "AND",
      "path": "0"
    },
    "8865": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8867": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8869": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8871": {
      "op": "SHL"
    },
    "8872": {
      "op": "SUB"
    },
    "8873": {
      "op": "NOT"
    },
    "8874": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP4",
      "path": "0"
    },
    "8875": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "AND",
      "path": "0"
    },
    "8876": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "8877": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "OR",
      "path": "0"
    },
    "8878": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8879": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "8880": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "8881": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 104,
      "value": "0x40"
    },
    "8883": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "8884": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "8885": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "AND",
      "path": "0"
    },
    "8886": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "8887": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8888": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "DUP3",
      "path": "0"
    },
    "8889": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8890": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "8923": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8924": {
      "fn": "Ownable._setOwner",
      "offset": [
        2096,
        2112
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "8926": {
      "fn": "Ownable._setOwner",
      "offset": [
        2096,
        2112
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8927": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "LOG3",
      "path": "0"
    },
    "8928": {
      "fn": "Ownable._setOwner",
      "offset": [
        2086,
        2210
      ],
      "op": "POP",
      "path": "0"
    },
    "8929": {
      "fn": "Ownable._setOwner",
      "offset": [
        2041,
        2210
      ],
      "op": "POP",
      "path": "0"
    },
    "8930": {
      "fn": "Ownable._setOwner",
      "jump": "o",
      "offset": [
        2041,
        2210
      ],
      "op": "JUMP",
      "path": "0"
    },
    "8931": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        662,
        782
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "8932": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        731
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 105,
      "value": "0x2"
    },
    "8934": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "DUP1",
      "path": "17"
    },
    "8935": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "8936": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8938": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8940": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8942": {
      "op": "SHL"
    },
    "8943": {
      "op": "SUB"
    },
    "8944": {
      "op": "NOT"
    },
    "8945": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "AND",
      "path": "17"
    },
    "8946": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8948": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8950": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8952": {
      "op": "SHL"
    },
    "8953": {
      "op": "SUB"
    },
    "8954": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "DUP4",
      "path": "17"
    },
    "8955": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "AND",
      "path": "17"
    },
    "8956": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "8957": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "DUP2",
      "path": "17"
    },
    "8958": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "OR",
      "path": "17"
    },
    "8959": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "8960": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "8961": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        726,
        741
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "8962": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        756,
        775
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 106,
      "value": "0x40"
    },
    "8964": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        756,
        775
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "8965": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        756,
        775
      ],
      "op": "PUSH32",
      "path": "17",
      "value": "0x7CE7EC0B50378FB6C0186FFB5F48325F6593FCB4CA4386F21861AF3129188F5C"
    },
    "8998": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        756,
        775
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "8999": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9001": {
      "op": "SWAP1"
    },
    "9002": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        756,
        775
      ],
      "op": "LOG2",
      "path": "17"
    },
    "9003": {
      "fn": "HasAdmin._setAdmin",
      "offset": [
        662,
        782
      ],
      "op": "POP",
      "path": "17"
    },
    "9004": {
      "fn": "HasAdmin._setAdmin",
      "jump": "o",
      "offset": [
        662,
        782
      ],
      "op": "JUMP",
      "path": "17"
    },
    "9005": {
      "fn": "Staker._projectEnd",
      "offset": [
        6764,
        6944
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "9006": {
      "fn": "Staker._projectEnd",
      "offset": [
        6850,
        6854
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "9008": {
      "fn": "Staker._projectEnd",
      "offset": [
        6924,
        6931
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 107
    },
    "9009": {
      "fn": "Staker._projectEnd",
      "offset": [
        6924,
        6936
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xE0"
    },
    "9011": {
      "fn": "Staker._projectEnd",
      "offset": [
        6924,
        6936
      ],
      "op": "ADD",
      "path": "20"
    },
    "9012": {
      "fn": "Staker._projectEnd",
      "offset": [
        6924,
        6936
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "9013": {
      "fn": "Staker._projectEnd",
      "offset": [
        6913,
        6936
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xFFFF"
    },
    "9016": {
      "fn": "Staker._projectEnd",
      "offset": [
        6913,
        6936
      ],
      "op": "AND",
      "path": "20"
    },
    "9017": {
      "fn": "Staker._projectEnd",
      "offset": [
        6914,
        6920
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x15180"
    },
    "9021": {
      "fn": "Staker._projectEnd",
      "offset": [
        6913,
        6936
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2346"
    },
    "9024": {
      "fn": "Staker._projectEnd",
      "offset": [
        6913,
        6936
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "9025": {
      "fn": "Staker._projectEnd",
      "offset": [
        6913,
        6936
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "9026": {
      "fn": "Staker._projectEnd",
      "offset": [
        6913,
        6936
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2D18"
    },
    "9029": {
      "fn": "Staker._projectEnd",
      "jump": "i",
      "offset": [
        6913,
        6936
      ],
      "op": "JUMP",
      "path": "20"
    },
    "9030": {
      "fn": "Staker._projectEnd",
      "offset": [
        6913,
        6936
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "9031": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6937
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xFFFFFF"
    },
    "9035": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6937
      ],
      "op": "AND",
      "path": "20"
    },
    "9036": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6899
      ],
      "op": "DUP3",
      "path": "20"
    },
    "9037": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6909
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x160"
    },
    "9040": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6909
      ],
      "op": "ADD",
      "path": "20"
    },
    "9041": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6909
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "9042": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6937
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x235B"
    },
    "9045": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6937
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "9046": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6937
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "9047": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6937
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2D3F"
    },
    "9050": {
      "fn": "Staker._projectEnd",
      "jump": "i",
      "offset": [
        6892,
        6937
      ],
      "op": "JUMP",
      "path": "20"
    },
    "9051": {
      "fn": "Staker._projectEnd",
      "offset": [
        6892,
        6937
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "9052": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9054": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9056": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9058": {
      "op": "SHL"
    },
    "9059": {
      "op": "SUB"
    },
    "9060": {
      "fn": "Staker._projectEnd",
      "offset": [
        6873,
        6937
      ],
      "op": "AND",
      "path": "20"
    },
    "9061": {
      "fn": "Staker._projectEnd",
      "offset": [
        6873,
        6888
      ],
      "op": "TIMESTAMP",
      "path": "20"
    },
    "9062": {
      "fn": "Staker._projectEnd",
      "offset": [
        6873,
        6937
      ],
      "op": "LT",
      "path": "20"
    },
    "9063": {
      "fn": "Staker._projectEnd",
      "offset": [
        6873,
        6937
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "9064": {
      "fn": "Staker._projectEnd",
      "offset": [
        6873,
        6937
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "9065": {
      "fn": "Staker._projectEnd",
      "offset": [
        6764,
        6944
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "9066": {
      "op": "POP"
    },
    "9067": {
      "op": "POP"
    },
    "9068": {
      "fn": "Staker._projectEnd",
      "jump": "o",
      "offset": [
        6764,
        6944
      ],
      "op": "JUMP",
      "path": "20"
    },
    "9069": {
      "fn": "Staker._checkAddress",
      "offset": [
        16556,
        16660
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "9070": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9072": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9074": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9076": {
      "op": "SHL"
    },
    "9077": {
      "op": "SUB"
    },
    "9078": {
      "fn": "Staker._checkAddress",
      "offset": [
        16624,
        16642
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 108
    },
    "9079": {
      "branch": 160,
      "fn": "Staker._checkAddress",
      "offset": [
        16624,
        16642
      ],
      "op": "AND",
      "path": "20"
    },
    "9080": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x10C9"
    },
    "9083": {
      "branch": 160,
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "9084": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "9086": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "9087": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9091": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9093": {
      "op": "SHL"
    },
    "9094": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "DUP2",
      "path": "20"
    },
    "9095": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "9096": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9098": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "9100": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "DUP3",
      "path": "20"
    },
    "9101": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "ADD",
      "path": "20"
    },
    "9102": {
      "op": "MSTORE"
    },
    "9103": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "9105": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "9107": {
      "op": "DUP3"
    },
    "9108": {
      "op": "ADD"
    },
    "9109": {
      "op": "MSTORE"
    },
    "9110": {
      "op": "PUSH6",
      "value": "0x3C1030B23239"
    },
    "9117": {
      "op": "PUSH1",
      "value": "0xD1"
    },
    "9119": {
      "op": "SHL"
    },
    "9120": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "9122": {
      "op": "DUP3"
    },
    "9123": {
      "op": "ADD"
    },
    "9124": {
      "op": "MSTORE"
    },
    "9125": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "9127": {
      "op": "ADD"
    },
    "9128": {
      "fn": "Staker._checkAddress",
      "offset": [
        16616,
        16653
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x467"
    },
    "9131": {
      "op": "JUMP"
    },
    "9132": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        845,
        1086
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "9133": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1010,
        1078
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 109,
      "value": "0x40"
    },
    "9135": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1010,
        1078
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "9136": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9138": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9140": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9142": {
      "op": "SHL"
    },
    "9143": {
      "op": "SUB"
    },
    "9144": {
      "op": "DUP1"
    },
    "9145": {
      "op": "DUP6"
    },
    "9146": {
      "op": "AND"
    },
    "9147": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1010,
        1078
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "9149": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1010,
        1078
      ],
      "op": "DUP4",
      "path": "9"
    },
    "9150": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1010,
        1078
      ],
      "op": "ADD",
      "path": "9"
    },
    "9151": {
      "op": "MSTORE"
    },
    "9152": {
      "op": "DUP4"
    },
    "9153": {
      "op": "AND"
    },
    "9154": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "9156": {
      "op": "DUP3"
    },
    "9157": {
      "op": "ADD"
    },
    "9158": {
      "op": "MSTORE"
    },
    "9159": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "9161": {
      "op": "DUP2"
    },
    "9162": {
      "op": "ADD"
    },
    "9163": {
      "op": "DUP3"
    },
    "9164": {
      "op": "SWAP1"
    },
    "9165": {
      "op": "MSTORE"
    },
    "9166": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        983,
        1079
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F48"
    },
    "9169": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        983,
        1079
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9170": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1003,
        1008
      ],
      "op": "DUP6",
      "path": "9"
    },
    "9171": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1003,
        1008
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9172": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "9177": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "9179": {
      "op": "SHL"
    },
    "9180": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1033,
        1060
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9181": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "9183": {
      "op": "ADD"
    },
    "9184": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        1010,
        1078
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F11"
    },
    "9187": {
      "op": "JUMP"
    },
    "9188": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3140,
        3846
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "9189": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3559,
        3582
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "9191": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x2439"
    },
    "9194": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3613,
        3617
      ],
      "op": "DUP3",
      "path": "9"
    },
    "9195": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "9197": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "9198": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "DUP1",
      "path": "9"
    },
    "9199": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "9201": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "ADD",
      "path": "9"
    },
    "9202": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "9204": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "9205": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "DUP1",
      "path": "9"
    },
    "9206": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "9208": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "DUP2",
      "path": "9"
    },
    "9209": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "9210": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "9212": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "ADD",
      "path": "9"
    },
    "9213": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "PUSH32",
      "path": "9",
      "value": "0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
    },
    "9246": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "DUP2",
      "path": "9"
    },
    "9247": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "9248": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "POP",
      "path": "9"
    },
    "9249": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3593,
        3598
      ],
      "op": "DUP6",
      "path": "9"
    },
    "9250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9252": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9254": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9256": {
      "op": "SHL"
    },
    "9257": {
      "op": "SUB"
    },
    "9258": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3612
      ],
      "op": "AND",
      "path": "9"
    },
    "9259": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3612
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1F4E"
    },
    "9262": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3612
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9263": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "9264": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "9265": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9266": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0xFFFFFFFF"
    },
    "9271": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "AND",
      "path": "9"
    },
    "9272": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3585,
        3654
      ],
      "op": "JUMP",
      "path": "9"
    },
    "9273": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3585,
        3654
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "9274": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3668,
        3685
      ],
      "op": "DUP1",
      "path": "9"
    },
    "9275": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3668,
        3685
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "9276": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3559,
        3654
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9277": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3559,
        3654
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "9278": {
      "op": "POP"
    },
    "9279": {
      "branch": 165,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3668,
        3689
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "9280": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3664,
        3840
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x212C"
    },
    "9283": {
      "branch": 165,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3664,
        3840
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "9284": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3763,
        3773
      ],
      "op": "DUP1",
      "path": "9",
      "statement": 110
    },
    "9285": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "DUP1",
      "path": "9"
    },
    "9286": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "9288": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "ADD",
      "path": "9"
    },
    "9289": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9290": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "9291": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "DUP2",
      "path": "9"
    },
    "9292": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "ADD",
      "path": "9"
    },
    "9293": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9294": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x2457"
    },
    "9297": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "9298": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "9299": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x2D5F"
    },
    "9302": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3752,
        3782
      ],
      "op": "JUMP",
      "path": "9"
    },
    "9303": {
      "branch": 166,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3752,
        3782
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "9304": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x212C"
    },
    "9307": {
      "branch": 166,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "9308": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "9310": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "9311": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9315": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9317": {
      "op": "SHL"
    },
    "9318": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "DUP2",
      "path": "9"
    },
    "9319": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "9320": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9322": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "9324": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "DUP3",
      "path": "9"
    },
    "9325": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "ADD",
      "path": "9"
    },
    "9326": {
      "op": "MSTORE"
    },
    "9327": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "9329": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "9331": {
      "op": "DUP3"
    },
    "9332": {
      "op": "ADD"
    },
    "9333": {
      "op": "MSTORE"
    },
    "9334": {
      "op": "PUSH32",
      "value": "0x5361666545524332303A204552433230206F7065726174696F6E20646964206E"
    },
    "9367": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "9369": {
      "op": "DUP3"
    },
    "9370": {
      "op": "ADD"
    },
    "9371": {
      "op": "MSTORE"
    },
    "9372": {
      "op": "PUSH10",
      "value": "0x1BDD081CDD58D8D95959"
    },
    "9383": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "9385": {
      "op": "SHL"
    },
    "9386": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "9388": {
      "op": "DUP3"
    },
    "9389": {
      "op": "ADD"
    },
    "9390": {
      "op": "MSTORE"
    },
    "9391": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "9393": {
      "op": "ADD"
    },
    "9394": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3744,
        3829
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x467"
    },
    "9397": {
      "op": "JUMP"
    },
    "9398": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4548,
        5047
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "9399": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4713,
        4725
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "9401": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4770,
        4775
      ],
      "op": "DUP3",
      "path": "10",
      "statement": 111
    },
    "9402": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4745,
        4766
      ],
      "op": "SELFBALANCE",
      "path": "10"
    },
    "9403": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4745,
        4775
      ],
      "op": "LT",
      "path": "10"
    },
    "9404": {
      "branch": 161,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4745,
        4775
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "9405": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2517"
    },
    "9408": {
      "branch": 161,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "9409": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "9411": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "9412": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9416": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9418": {
      "op": "SHL"
    },
    "9419": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "DUP2",
      "path": "10"
    },
    "9420": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "9421": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9423": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "9425": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "DUP3",
      "path": "10"
    },
    "9426": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "ADD",
      "path": "10"
    },
    "9427": {
      "op": "MSTORE"
    },
    "9428": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "9430": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "9432": {
      "op": "DUP3"
    },
    "9433": {
      "op": "ADD"
    },
    "9434": {
      "op": "MSTORE"
    },
    "9435": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "9468": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "9470": {
      "op": "DUP3"
    },
    "9471": {
      "op": "ADD"
    },
    "9472": {
      "op": "MSTORE"
    },
    "9473": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "9480": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "9482": {
      "op": "SHL"
    },
    "9483": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "9485": {
      "op": "DUP3"
    },
    "9486": {
      "op": "ADD"
    },
    "9487": {
      "op": "MSTORE"
    },
    "9488": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "9490": {
      "op": "ADD"
    },
    "9491": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x467"
    },
    "9494": {
      "op": "JUMP"
    },
    "9495": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4737,
        4818
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "9496": {
      "fn": "Address.isContract",
      "offset": [
        1034,
        1054
      ],
      "op": "DUP5",
      "path": "10"
    },
    "9497": {
      "fn": "Address.isContract",
      "offset": [
        1034,
        1054
      ],
      "op": "EXTCODESIZE",
      "path": "10"
    },
    "9498": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 112,
      "value": "0x2565"
    },
    "9501": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "9502": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "9504": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "9505": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9509": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9511": {
      "op": "SHL"
    },
    "9512": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "DUP2",
      "path": "10"
    },
    "9513": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "9514": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9516": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "9518": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "DUP3",
      "path": "10"
    },
    "9519": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "ADD",
      "path": "10"
    },
    "9520": {
      "op": "MSTORE"
    },
    "9521": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "9523": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "9525": {
      "op": "DUP3"
    },
    "9526": {
      "op": "ADD"
    },
    "9527": {
      "op": "MSTORE"
    },
    "9528": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "9561": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "9563": {
      "op": "DUP3"
    },
    "9564": {
      "op": "ADD"
    },
    "9565": {
      "op": "MSTORE"
    },
    "9566": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "9568": {
      "op": "ADD"
    },
    "9569": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x467"
    },
    "9572": {
      "op": "JUMP"
    },
    "9573": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4828,
        4888
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "9574": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4900,
        4912
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "9576": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4914,
        4937
      ],
      "op": "DUP1",
      "path": "10"
    },
    "9577": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4947
      ],
      "op": "DUP7",
      "path": "10"
    },
    "9578": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9580": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9582": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9584": {
      "op": "SHL"
    },
    "9585": {
      "op": "SUB"
    },
    "9586": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4952
      ],
      "op": "AND",
      "path": "10"
    },
    "9587": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4960,
        4965
      ],
      "op": "DUP6",
      "path": "10"
    },
    "9588": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4967,
        4971
      ],
      "op": "DUP8",
      "path": "10"
    },
    "9589": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "9591": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "9592": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2581"
    },
    "9595": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "9596": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "9597": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D7C"
    },
    "9600": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        4941,
        4972
      ],
      "op": "JUMP",
      "path": "10"
    },
    "9601": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "9602": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "9604": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "9606": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "9607": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP1",
      "path": "10"
    },
    "9608": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP4",
      "path": "10"
    },
    "9609": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "SUB",
      "path": "10"
    },
    "9610": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP2",
      "path": "10"
    },
    "9611": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP6",
      "path": "10"
    },
    "9612": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP8",
      "path": "10"
    },
    "9613": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "GAS",
      "path": "10"
    },
    "9614": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "CALL",
      "path": "10"
    },
    "9615": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "9616": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "POP",
      "path": "10"
    },
    "9617": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "POP",
      "path": "10"
    },
    "9618": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "POP",
      "path": "10"
    },
    "9619": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "9620": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP1",
      "path": "10"
    },
    "9621": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "9623": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP2",
      "path": "10"
    },
    "9624": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "EQ",
      "path": "10"
    },
    "9625": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x25BE"
    },
    "9628": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "9629": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "9631": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "9632": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "9633": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "POP",
      "path": "10"
    },
    "9634": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "9636": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "NOT",
      "path": "10"
    },
    "9637": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3F"
    },
    "9639": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "9640": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "ADD",
      "path": "10"
    },
    "9641": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "AND",
      "path": "10"
    },
    "9642": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP3",
      "path": "10"
    },
    "9643": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "ADD",
      "path": "10"
    },
    "9644": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "9646": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "9647": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "9648": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP3",
      "path": "10"
    },
    "9649": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "9650": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "9651": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "9653": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "9655": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "DUP5",
      "path": "10"
    },
    "9656": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "ADD",
      "path": "10"
    },
    "9657": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "RETURNDATACOPY",
      "path": "10"
    },
    "9658": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x25C3"
    },
    "9661": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "JUMP",
      "path": "10"
    },
    "9662": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "9663": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "9665": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "9666": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "POP",
      "path": "10"
    },
    "9667": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "9668": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4941,
        4972
      ],
      "op": "POP",
      "path": "10"
    },
    "9669": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4899,
        4972
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "9670": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4899,
        4972
      ],
      "op": "POP",
      "path": "10"
    },
    "9671": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4899,
        4972
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "9672": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4899,
        4972
      ],
      "op": "POP",
      "path": "10"
    },
    "9673": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4989,
        5040
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 113,
      "value": "0xB7B"
    },
    "9676": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5006,
        5013
      ],
      "op": "DUP3",
      "path": "10"
    },
    "9677": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5015,
        5025
      ],
      "op": "DUP3",
      "path": "10"
    },
    "9678": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5027,
        5039
      ],
      "op": "DUP7",
      "path": "10"
    },
    "9679": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7307,
        7319
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "9681": {
      "branch": 162,
      "fn": "Address.verifyCallResult",
      "offset": [
        7335,
        7342
      ],
      "op": "DUP4",
      "path": "10"
    },
    "9682": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7331,
        7847
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "9683": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7331,
        7847
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x25DD"
    },
    "9686": {
      "branch": 162,
      "fn": "Address.verifyCallResult",
      "offset": [
        7331,
        7847
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "9687": {
      "op": "POP"
    },
    "9688": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7365,
        7375
      ],
      "op": "DUP2",
      "path": "10",
      "statement": 114
    },
    "9689": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7358,
        7375
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1347"
    },
    "9692": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7358,
        7375
      ],
      "op": "JUMP",
      "path": "10"
    },
    "9693": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7331,
        7847
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "9694": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7476,
        7493
      ],
      "op": "DUP3",
      "path": "10"
    },
    "9695": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7476,
        7493
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "9696": {
      "branch": 163,
      "fn": "Address.verifyCallResult",
      "offset": [
        7476,
        7497
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "9697": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7472,
        7837
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x25ED"
    },
    "9700": {
      "branch": 163,
      "fn": "Address.verifyCallResult",
      "offset": [
        7472,
        7837
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "9701": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7670,
        7680
      ],
      "op": "DUP3",
      "path": "10"
    },
    "9702": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7664,
        7681
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "9703": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7730,
        7745
      ],
      "op": "DUP1",
      "path": "10"
    },
    "9704": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7717,
        7727
      ],
      "op": "DUP5",
      "path": "10"
    },
    "9705": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7713,
        7715
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "9707": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7709,
        7728
      ],
      "op": "ADD",
      "path": "10"
    },
    "9708": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7702,
        7746
      ],
      "op": "REVERT",
      "path": "10"
    },
    "9709": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7472,
        7837
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "9710": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7809,
        7821
      ],
      "op": "DUP2",
      "path": "10",
      "statement": 115
    },
    "9711": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "9713": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "9714": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9718": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9720": {
      "op": "SHL"
    },
    "9721": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "DUP2",
      "path": "10"
    },
    "9722": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "9723": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "9725": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "ADD",
      "path": "10"
    },
    "9726": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x467"
    },
    "9729": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "9730": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "9731": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7802,
        7822
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2D98"
    },
    "9734": {
      "fn": "Address.verifyCallResult",
      "jump": "i",
      "offset": [
        7802,
        7822
      ],
      "op": "JUMP",
      "path": "10"
    },
    "9735": {
      "op": "JUMPDEST"
    },
    "9736": {
      "op": "DUP1"
    },
    "9737": {
      "op": "ISZERO"
    },
    "9738": {
      "op": "ISZERO"
    },
    "9739": {
      "op": "DUP2"
    },
    "9740": {
      "op": "EQ"
    },
    "9741": {
      "op": "PUSH2",
      "value": "0x10C9"
    },
    "9744": {
      "op": "JUMPI"
    },
    "9745": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9747": {
      "op": "DUP1"
    },
    "9748": {
      "op": "REVERT"
    },
    "9749": {
      "op": "JUMPDEST"
    },
    "9750": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9752": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9754": {
      "op": "DUP3"
    },
    "9755": {
      "op": "DUP5"
    },
    "9756": {
      "op": "SUB"
    },
    "9757": {
      "op": "SLT"
    },
    "9758": {
      "op": "ISZERO"
    },
    "9759": {
      "op": "PUSH2",
      "value": "0x2627"
    },
    "9762": {
      "op": "JUMPI"
    },
    "9763": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9765": {
      "op": "DUP1"
    },
    "9766": {
      "op": "REVERT"
    },
    "9767": {
      "op": "JUMPDEST"
    },
    "9768": {
      "op": "DUP2"
    },
    "9769": {
      "op": "CALLDATALOAD"
    },
    "9770": {
      "op": "PUSH2",
      "value": "0x1347"
    },
    "9773": {
      "op": "DUP2"
    },
    "9774": {
      "op": "PUSH2",
      "value": "0x2607"
    },
    "9777": {
      "jump": "i",
      "op": "JUMP"
    },
    "9778": {
      "op": "JUMPDEST"
    },
    "9779": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9781": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9783": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9785": {
      "op": "SHL"
    },
    "9786": {
      "op": "SUB"
    },
    "9787": {
      "op": "DUP2"
    },
    "9788": {
      "op": "AND"
    },
    "9789": {
      "op": "DUP2"
    },
    "9790": {
      "op": "EQ"
    },
    "9791": {
      "op": "PUSH2",
      "value": "0x10C9"
    },
    "9794": {
      "op": "JUMPI"
    },
    "9795": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9797": {
      "op": "DUP1"
    },
    "9798": {
      "op": "REVERT"
    },
    "9799": {
      "op": "JUMPDEST"
    },
    "9800": {
      "op": "PUSH4",
      "value": "0xFFFFFFFF"
    },
    "9805": {
      "op": "DUP2"
    },
    "9806": {
      "op": "AND"
    },
    "9807": {
      "op": "DUP2"
    },
    "9808": {
      "op": "EQ"
    },
    "9809": {
      "op": "PUSH2",
      "value": "0x10C9"
    },
    "9812": {
      "op": "JUMPI"
    },
    "9813": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9815": {
      "op": "DUP1"
    },
    "9816": {
      "op": "REVERT"
    },
    "9817": {
      "op": "JUMPDEST"
    },
    "9818": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9820": {
      "op": "DUP1"
    },
    "9821": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9823": {
      "op": "DUP4"
    },
    "9824": {
      "op": "DUP6"
    },
    "9825": {
      "op": "SUB"
    },
    "9826": {
      "op": "SLT"
    },
    "9827": {
      "op": "ISZERO"
    },
    "9828": {
      "op": "PUSH2",
      "value": "0x266C"
    },
    "9831": {
      "op": "JUMPI"
    },
    "9832": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9834": {
      "op": "DUP1"
    },
    "9835": {
      "op": "REVERT"
    },
    "9836": {
      "op": "JUMPDEST"
    },
    "9837": {
      "op": "DUP3"
    },
    "9838": {
      "op": "CALLDATALOAD"
    },
    "9839": {
      "op": "PUSH2",
      "value": "0x2677"
    },
    "9842": {
      "op": "DUP2"
    },
    "9843": {
      "op": "PUSH2",
      "value": "0x2632"
    },
    "9846": {
      "jump": "i",
      "op": "JUMP"
    },
    "9847": {
      "op": "JUMPDEST"
    },
    "9848": {
      "op": "SWAP2"
    },
    "9849": {
      "op": "POP"
    },
    "9850": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9852": {
      "op": "DUP4"
    },
    "9853": {
      "op": "ADD"
    },
    "9854": {
      "op": "CALLDATALOAD"
    },
    "9855": {
      "op": "PUSH2",
      "value": "0x2687"
    },
    "9858": {
      "op": "DUP2"
    },
    "9859": {
      "op": "PUSH2",
      "value": "0x2647"
    },
    "9862": {
      "jump": "i",
      "op": "JUMP"
    },
    "9863": {
      "op": "JUMPDEST"
    },
    "9864": {
      "op": "DUP1"
    },
    "9865": {
      "op": "SWAP2"
    },
    "9866": {
      "op": "POP"
    },
    "9867": {
      "op": "POP"
    },
    "9868": {
      "op": "SWAP3"
    },
    "9869": {
      "op": "POP"
    },
    "9870": {
      "op": "SWAP3"
    },
    "9871": {
      "op": "SWAP1"
    },
    "9872": {
      "op": "POP"
    },
    "9873": {
      "jump": "o",
      "op": "JUMP"
    },
    "9874": {
      "op": "JUMPDEST"
    },
    "9875": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9877": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9879": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9881": {
      "op": "SHL"
    },
    "9882": {
      "op": "SUB"
    },
    "9883": {
      "op": "DUP2"
    },
    "9884": {
      "op": "AND"
    },
    "9885": {
      "op": "DUP2"
    },
    "9886": {
      "op": "EQ"
    },
    "9887": {
      "op": "PUSH2",
      "value": "0x10C9"
    },
    "9890": {
      "op": "JUMPI"
    },
    "9891": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9893": {
      "op": "DUP1"
    },
    "9894": {
      "op": "REVERT"
    },
    "9895": {
      "op": "JUMPDEST"
    },
    "9896": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "9901": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "9903": {
      "op": "SHL"
    },
    "9904": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9906": {
      "op": "MSTORE"
    },
    "9907": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "9909": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "9911": {
      "op": "MSTORE"
    },
    "9912": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "9914": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9916": {
      "op": "REVERT"
    },
    "9917": {
      "op": "JUMPDEST"
    },
    "9918": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9920": {
      "op": "MLOAD"
    },
    "9921": {
      "op": "PUSH2",
      "value": "0x1A0"
    },
    "9924": {
      "op": "DUP2"
    },
    "9925": {
      "op": "ADD"
    },
    "9926": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9928": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9930": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9932": {
      "op": "SHL"
    },
    "9933": {
      "op": "SUB"
    },
    "9934": {
      "op": "DUP2"
    },
    "9935": {
      "op": "GT"
    },
    "9936": {
      "op": "DUP3"
    },
    "9937": {
      "op": "DUP3"
    },
    "9938": {
      "op": "LT"
    },
    "9939": {
      "op": "OR"
    },
    "9940": {
      "op": "ISZERO"
    },
    "9941": {
      "op": "PUSH2",
      "value": "0x26E0"
    },
    "9944": {
      "op": "JUMPI"
    },
    "9945": {
      "op": "PUSH2",
      "value": "0x26E0"
    },
    "9948": {
      "op": "PUSH2",
      "value": "0x26A7"
    },
    "9951": {
      "jump": "i",
      "op": "JUMP"
    },
    "9952": {
      "op": "JUMPDEST"
    },
    "9953": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9955": {
      "op": "MSTORE"
    },
    "9956": {
      "op": "SWAP1"
    },
    "9957": {
      "jump": "o",
      "op": "JUMP"
    },
    "9958": {
      "op": "JUMPDEST"
    },
    "9959": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9961": {
      "op": "DUP1"
    },
    "9962": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9964": {
      "op": "DUP1"
    },
    "9965": {
      "op": "DUP5"
    },
    "9966": {
      "op": "DUP7"
    },
    "9967": {
      "op": "SUB"
    },
    "9968": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "9970": {
      "op": "DUP2"
    },
    "9971": {
      "op": "SLT"
    },
    "9972": {
      "op": "ISZERO"
    },
    "9973": {
      "op": "PUSH2",
      "value": "0x26FD"
    },
    "9976": {
      "op": "JUMPI"
    },
    "9977": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9979": {
      "op": "DUP1"
    },
    "9980": {
      "op": "REVERT"
    },
    "9981": {
      "op": "JUMPDEST"
    },
    "9982": {
      "op": "DUP6"
    },
    "9983": {
      "op": "CALLDATALOAD"
    },
    "9984": {
      "op": "PUSH2",
      "value": "0x2708"
    },
    "9987": {
      "op": "DUP2"
    },
    "9988": {
      "op": "PUSH2",
      "value": "0x2647"
    },
    "9991": {
      "jump": "i",
      "op": "JUMP"
    },
    "9992": {
      "op": "JUMPDEST"
    },
    "9993": {
      "op": "SWAP5"
    },
    "9994": {
      "op": "POP"
    },
    "9995": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9997": {
      "op": "DUP7"
    },
    "9998": {
      "op": "ADD"
    },
    "9999": {
      "op": "CALLDATALOAD"
    },
    "10000": {
      "op": "SWAP4"
    },
    "10001": {
      "op": "POP"
    },
    "10002": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10004": {
      "op": "DUP7"
    },
    "10005": {
      "op": "ADD"
    },
    "10006": {
      "op": "CALLDATALOAD"
    },
    "10007": {
      "op": "PUSH2",
      "value": "0x271F"
    },
    "10010": {
      "op": "DUP2"
    },
    "10011": {
      "op": "PUSH2",
      "value": "0x2692"
    },
    "10014": {
      "jump": "i",
      "op": "JUMP"
    },
    "10015": {
      "op": "JUMPDEST"
    },
    "10016": {
      "op": "SWAP3"
    },
    "10017": {
      "op": "POP"
    },
    "10018": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10020": {
      "op": "PUSH1",
      "value": "0x5F"
    },
    "10022": {
      "op": "NOT"
    },
    "10023": {
      "op": "DUP3"
    },
    "10024": {
      "op": "ADD"
    },
    "10025": {
      "op": "SLT"
    },
    "10026": {
      "op": "ISZERO"
    },
    "10027": {
      "op": "PUSH2",
      "value": "0x2733"
    },
    "10030": {
      "op": "JUMPI"
    },
    "10031": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10033": {
      "op": "DUP1"
    },
    "10034": {
      "op": "REVERT"
    },
    "10035": {
      "op": "JUMPDEST"
    },
    "10036": {
      "op": "POP"
    },
    "10037": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10039": {
      "op": "MLOAD"
    },
    "10040": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10042": {
      "op": "DUP2"
    },
    "10043": {
      "op": "ADD"
    },
    "10044": {
      "op": "DUP2"
    },
    "10045": {
      "op": "DUP2"
    },
    "10046": {
      "op": "LT"
    },
    "10047": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10049": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10051": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10053": {
      "op": "SHL"
    },
    "10054": {
      "op": "SUB"
    },
    "10055": {
      "op": "DUP3"
    },
    "10056": {
      "op": "GT"
    },
    "10057": {
      "op": "OR"
    },
    "10058": {
      "op": "ISZERO"
    },
    "10059": {
      "op": "PUSH2",
      "value": "0x2756"
    },
    "10062": {
      "op": "JUMPI"
    },
    "10063": {
      "op": "PUSH2",
      "value": "0x2756"
    },
    "10066": {
      "op": "PUSH2",
      "value": "0x26A7"
    },
    "10069": {
      "jump": "i",
      "op": "JUMP"
    },
    "10070": {
      "op": "JUMPDEST"
    },
    "10071": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10073": {
      "op": "MSTORE"
    },
    "10074": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10076": {
      "op": "DUP7"
    },
    "10077": {
      "op": "ADD"
    },
    "10078": {
      "op": "CALLDATALOAD"
    },
    "10079": {
      "op": "DUP2"
    },
    "10080": {
      "op": "MSTORE"
    },
    "10081": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10083": {
      "op": "DUP7"
    },
    "10084": {
      "op": "ADD"
    },
    "10085": {
      "op": "CALLDATALOAD"
    },
    "10086": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10088": {
      "op": "DUP3"
    },
    "10089": {
      "op": "ADD"
    },
    "10090": {
      "op": "MSTORE"
    },
    "10091": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10093": {
      "op": "DUP7"
    },
    "10094": {
      "op": "ADD"
    },
    "10095": {
      "op": "CALLDATALOAD"
    },
    "10096": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "10098": {
      "op": "DUP2"
    },
    "10099": {
      "op": "AND"
    },
    "10100": {
      "op": "DUP2"
    },
    "10101": {
      "op": "EQ"
    },
    "10102": {
      "op": "PUSH2",
      "value": "0x277E"
    },
    "10105": {
      "op": "JUMPI"
    },
    "10106": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10108": {
      "op": "DUP1"
    },
    "10109": {
      "op": "REVERT"
    },
    "10110": {
      "op": "JUMPDEST"
    },
    "10111": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10113": {
      "op": "DUP3"
    },
    "10114": {
      "op": "ADD"
    },
    "10115": {
      "op": "MSTORE"
    },
    "10116": {
      "op": "SWAP4"
    },
    "10117": {
      "op": "SWAP7"
    },
    "10118": {
      "op": "SWAP3"
    },
    "10119": {
      "op": "SWAP6"
    },
    "10120": {
      "op": "POP"
    },
    "10121": {
      "op": "SWAP1"
    },
    "10122": {
      "op": "SWAP4"
    },
    "10123": {
      "op": "POP"
    },
    "10124": {
      "op": "POP"
    },
    "10125": {
      "jump": "o",
      "op": "JUMP"
    },
    "10126": {
      "op": "JUMPDEST"
    },
    "10127": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10129": {
      "op": "DUP1"
    },
    "10130": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10132": {
      "op": "DUP1"
    },
    "10133": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10135": {
      "op": "DUP6"
    },
    "10136": {
      "op": "DUP8"
    },
    "10137": {
      "op": "SUB"
    },
    "10138": {
      "op": "SLT"
    },
    "10139": {
      "op": "ISZERO"
    },
    "10140": {
      "op": "PUSH2",
      "value": "0x27A4"
    },
    "10143": {
      "op": "JUMPI"
    },
    "10144": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10146": {
      "op": "DUP1"
    },
    "10147": {
      "op": "REVERT"
    },
    "10148": {
      "op": "JUMPDEST"
    },
    "10149": {
      "op": "DUP5"
    },
    "10150": {
      "op": "CALLDATALOAD"
    },
    "10151": {
      "op": "SWAP4"
    },
    "10152": {
      "op": "POP"
    },
    "10153": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10155": {
      "op": "DUP6"
    },
    "10156": {
      "op": "ADD"
    },
    "10157": {
      "op": "CALLDATALOAD"
    },
    "10158": {
      "op": "PUSH2",
      "value": "0x27B6"
    },
    "10161": {
      "op": "DUP2"
    },
    "10162": {
      "op": "PUSH2",
      "value": "0x2692"
    },
    "10165": {
      "jump": "i",
      "op": "JUMP"
    },
    "10166": {
      "op": "JUMPDEST"
    },
    "10167": {
      "op": "SWAP3"
    },
    "10168": {
      "op": "POP"
    },
    "10169": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10171": {
      "op": "DUP6"
    },
    "10172": {
      "op": "ADD"
    },
    "10173": {
      "op": "CALLDATALOAD"
    },
    "10174": {
      "op": "PUSH2",
      "value": "0x27C6"
    },
    "10177": {
      "op": "DUP2"
    },
    "10178": {
      "op": "PUSH2",
      "value": "0x2692"
    },
    "10181": {
      "jump": "i",
      "op": "JUMP"
    },
    "10182": {
      "op": "JUMPDEST"
    },
    "10183": {
      "op": "SWAP4"
    },
    "10184": {
      "op": "SWAP7"
    },
    "10185": {
      "op": "SWAP3"
    },
    "10186": {
      "op": "SWAP6"
    },
    "10187": {
      "op": "POP"
    },
    "10188": {
      "op": "SWAP3"
    },
    "10189": {
      "op": "SWAP4"
    },
    "10190": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10192": {
      "op": "ADD"
    },
    "10193": {
      "op": "CALLDATALOAD"
    },
    "10194": {
      "op": "SWAP3"
    },
    "10195": {
      "op": "POP"
    },
    "10196": {
      "op": "POP"
    },
    "10197": {
      "jump": "o",
      "op": "JUMP"
    },
    "10198": {
      "op": "JUMPDEST"
    },
    "10199": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10201": {
      "op": "DUP1"
    },
    "10202": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10204": {
      "op": "DUP4"
    },
    "10205": {
      "op": "DUP6"
    },
    "10206": {
      "op": "SUB"
    },
    "10207": {
      "op": "SLT"
    },
    "10208": {
      "op": "ISZERO"
    },
    "10209": {
      "op": "PUSH2",
      "value": "0x27E9"
    },
    "10212": {
      "op": "JUMPI"
    },
    "10213": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10215": {
      "op": "DUP1"
    },
    "10216": {
      "op": "REVERT"
    },
    "10217": {
      "op": "JUMPDEST"
    },
    "10218": {
      "op": "DUP3"
    },
    "10219": {
      "op": "CALLDATALOAD"
    },
    "10220": {
      "op": "PUSH2",
      "value": "0x2677"
    },
    "10223": {
      "op": "DUP2"
    },
    "10224": {
      "op": "PUSH2",
      "value": "0x2647"
    },
    "10227": {
      "jump": "i",
      "op": "JUMP"
    },
    "10228": {
      "op": "JUMPDEST"
    },
    "10229": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10231": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10233": {
      "op": "DUP3"
    },
    "10234": {
      "op": "DUP5"
    },
    "10235": {
      "op": "SUB"
    },
    "10236": {
      "op": "SLT"
    },
    "10237": {
      "op": "ISZERO"
    },
    "10238": {
      "op": "PUSH2",
      "value": "0x2806"
    },
    "10241": {
      "op": "JUMPI"
    },
    "10242": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10244": {
      "op": "DUP1"
    },
    "10245": {
      "op": "REVERT"
    },
    "10246": {
      "op": "JUMPDEST"
    },
    "10247": {
      "op": "DUP2"
    },
    "10248": {
      "op": "CALLDATALOAD"
    },
    "10249": {
      "op": "PUSH2",
      "value": "0x1347"
    },
    "10252": {
      "op": "DUP2"
    },
    "10253": {
      "op": "PUSH2",
      "value": "0x2632"
    },
    "10256": {
      "jump": "i",
      "op": "JUMP"
    },
    "10257": {
      "op": "JUMPDEST"
    },
    "10258": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10260": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10262": {
      "op": "DUP3"
    },
    "10263": {
      "op": "DUP5"
    },
    "10264": {
      "op": "SUB"
    },
    "10265": {
      "op": "SLT"
    },
    "10266": {
      "op": "ISZERO"
    },
    "10267": {
      "op": "PUSH2",
      "value": "0x2823"
    },
    "10270": {
      "op": "JUMPI"
    },
    "10271": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10273": {
      "op": "DUP1"
    },
    "10274": {
      "op": "REVERT"
    },
    "10275": {
      "op": "JUMPDEST"
    },
    "10276": {
      "op": "DUP2"
    },
    "10277": {
      "op": "CALLDATALOAD"
    },
    "10278": {
      "op": "PUSH2",
      "value": "0x1347"
    },
    "10281": {
      "op": "DUP2"
    },
    "10282": {
      "op": "PUSH2",
      "value": "0x2647"
    },
    "10285": {
      "jump": "i",
      "op": "JUMP"
    },
    "10286": {
      "op": "JUMPDEST"
    },
    "10287": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10289": {
      "op": "DUP1"
    },
    "10290": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10292": {
      "op": "DUP4"
    },
    "10293": {
      "op": "DUP6"
    },
    "10294": {
      "op": "SUB"
    },
    "10295": {
      "op": "SLT"
    },
    "10296": {
      "op": "ISZERO"
    },
    "10297": {
      "op": "PUSH2",
      "value": "0x2841"
    },
    "10300": {
      "op": "JUMPI"
    },
    "10301": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10303": {
      "op": "DUP1"
    },
    "10304": {
      "op": "REVERT"
    },
    "10305": {
      "op": "JUMPDEST"
    },
    "10306": {
      "op": "DUP3"
    },
    "10307": {
      "op": "CALLDATALOAD"
    },
    "10308": {
      "op": "SWAP2"
    },
    "10309": {
      "op": "POP"
    },
    "10310": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10312": {
      "op": "DUP4"
    },
    "10313": {
      "op": "ADD"
    },
    "10314": {
      "op": "CALLDATALOAD"
    },
    "10315": {
      "op": "PUSH2",
      "value": "0x2687"
    },
    "10318": {
      "op": "DUP2"
    },
    "10319": {
      "op": "PUSH2",
      "value": "0x2632"
    },
    "10322": {
      "jump": "i",
      "op": "JUMP"
    },
    "10323": {
      "op": "JUMPDEST"
    },
    "10324": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10326": {
      "op": "DUP1"
    },
    "10327": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10329": {
      "op": "DUP4"
    },
    "10330": {
      "op": "DUP6"
    },
    "10331": {
      "op": "SUB"
    },
    "10332": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "10334": {
      "op": "DUP2"
    },
    "10335": {
      "op": "SLT"
    },
    "10336": {
      "op": "ISZERO"
    },
    "10337": {
      "op": "PUSH2",
      "value": "0x2869"
    },
    "10340": {
      "op": "JUMPI"
    },
    "10341": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10343": {
      "op": "DUP1"
    },
    "10344": {
      "op": "REVERT"
    },
    "10345": {
      "op": "JUMPDEST"
    },
    "10346": {
      "op": "DUP5"
    },
    "10347": {
      "op": "CALLDATALOAD"
    },
    "10348": {
      "op": "PUSH2",
      "value": "0x2874"
    },
    "10351": {
      "op": "DUP2"
    },
    "10352": {
      "op": "PUSH2",
      "value": "0x2632"
    },
    "10355": {
      "jump": "i",
      "op": "JUMP"
    },
    "10356": {
      "op": "JUMPDEST"
    },
    "10357": {
      "op": "SWAP4"
    },
    "10358": {
      "op": "POP"
    },
    "10359": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10361": {
      "op": "DUP6"
    },
    "10362": {
      "op": "ADD"
    },
    "10363": {
      "op": "CALLDATALOAD"
    },
    "10364": {
      "op": "PUSH2",
      "value": "0x2884"
    },
    "10367": {
      "op": "DUP2"
    },
    "10368": {
      "op": "PUSH2",
      "value": "0x2647"
    },
    "10371": {
      "jump": "i",
      "op": "JUMP"
    },
    "10372": {
      "op": "JUMPDEST"
    },
    "10373": {
      "op": "SWAP3"
    },
    "10374": {
      "op": "POP"
    },
    "10375": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10377": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "10379": {
      "op": "NOT"
    },
    "10380": {
      "op": "DUP3"
    },
    "10381": {
      "op": "ADD"
    },
    "10382": {
      "op": "SLT"
    },
    "10383": {
      "op": "ISZERO"
    },
    "10384": {
      "op": "PUSH2",
      "value": "0x2898"
    },
    "10387": {
      "op": "JUMPI"
    },
    "10388": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10390": {
      "op": "DUP1"
    },
    "10391": {
      "op": "REVERT"
    },
    "10392": {
      "op": "JUMPDEST"
    },
    "10393": {
      "op": "POP"
    },
    "10394": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10396": {
      "op": "MLOAD"
    },
    "10397": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10399": {
      "op": "DUP2"
    },
    "10400": {
      "op": "ADD"
    },
    "10401": {
      "op": "DUP2"
    },
    "10402": {
      "op": "DUP2"
    },
    "10403": {
      "op": "LT"
    },
    "10404": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10406": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10408": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10410": {
      "op": "SHL"
    },
    "10411": {
      "op": "SUB"
    },
    "10412": {
      "op": "DUP3"
    },
    "10413": {
      "op": "GT"
    },
    "10414": {
      "op": "OR"
    },
    "10415": {
      "op": "ISZERO"
    },
    "10416": {
      "op": "PUSH2",
      "value": "0x28BB"
    },
    "10419": {
      "op": "JUMPI"
    },
    "10420": {
      "op": "PUSH2",
      "value": "0x28BB"
    },
    "10423": {
      "op": "PUSH2",
      "value": "0x26A7"
    },
    "10426": {
      "jump": "i",
      "op": "JUMP"
    },
    "10427": {
      "op": "JUMPDEST"
    },
    "10428": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10430": {
      "op": "SWAP1"
    },
    "10431": {
      "op": "DUP2"
    },
    "10432": {
      "op": "MSTORE"
    },
    "10433": {
      "op": "DUP6"
    },
    "10434": {
      "op": "ADD"
    },
    "10435": {
      "op": "CALLDATALOAD"
    },
    "10436": {
      "op": "DUP2"
    },
    "10437": {
      "op": "MSTORE"
    },
    "10438": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10440": {
      "op": "DUP6"
    },
    "10441": {
      "op": "ADD"
    },
    "10442": {
      "op": "CALLDATALOAD"
    },
    "10443": {
      "op": "PUSH2",
      "value": "0x28D3"
    },
    "10446": {
      "op": "DUP2"
    },
    "10447": {
      "op": "PUSH2",
      "value": "0x2692"
    },
    "10450": {
      "jump": "i",
      "op": "JUMP"
    },
    "10451": {
      "op": "JUMPDEST"
    },
    "10452": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10454": {
      "op": "DUP3"
    },
    "10455": {
      "op": "ADD"
    },
    "10456": {
      "op": "MSTORE"
    },
    "10457": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10459": {
      "op": "DUP6"
    },
    "10460": {
      "op": "ADD"
    },
    "10461": {
      "op": "CALLDATALOAD"
    },
    "10462": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10464": {
      "op": "DUP3"
    },
    "10465": {
      "op": "ADD"
    },
    "10466": {
      "op": "MSTORE"
    },
    "10467": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10469": {
      "op": "SWAP1"
    },
    "10470": {
      "op": "SWAP5"
    },
    "10471": {
      "op": "ADD"
    },
    "10472": {
      "op": "CALLDATALOAD"
    },
    "10473": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10475": {
      "op": "DUP6"
    },
    "10476": {
      "op": "ADD"
    },
    "10477": {
      "op": "MSTORE"
    },
    "10478": {
      "op": "POP"
    },
    "10479": {
      "op": "SWAP1"
    },
    "10480": {
      "op": "SWAP4"
    },
    "10481": {
      "op": "SWAP1"
    },
    "10482": {
      "op": "SWAP3"
    },
    "10483": {
      "op": "POP"
    },
    "10484": {
      "jump": "o",
      "op": "JUMP"
    },
    "10485": {
      "op": "JUMPDEST"
    },
    "10486": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "10489": {
      "op": "DUP2"
    },
    "10490": {
      "op": "AND"
    },
    "10491": {
      "op": "DUP2"
    },
    "10492": {
      "op": "EQ"
    },
    "10493": {
      "op": "PUSH2",
      "value": "0x10C9"
    },
    "10496": {
      "op": "JUMPI"
    },
    "10497": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10499": {
      "op": "DUP1"
    },
    "10500": {
      "op": "REVERT"
    },
    "10501": {
      "op": "JUMPDEST"
    },
    "10502": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10504": {
      "op": "DUP1"
    },
    "10505": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10507": {
      "op": "DUP4"
    },
    "10508": {
      "op": "DUP6"
    },
    "10509": {
      "op": "SUB"
    },
    "10510": {
      "op": "SLT"
    },
    "10511": {
      "op": "ISZERO"
    },
    "10512": {
      "op": "PUSH2",
      "value": "0x2918"
    },
    "10515": {
      "op": "JUMPI"
    },
    "10516": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10518": {
      "op": "DUP1"
    },
    "10519": {
      "op": "REVERT"
    },
    "10520": {
      "op": "JUMPDEST"
    },
    "10521": {
      "op": "DUP3"
    },
    "10522": {
      "op": "CALLDATALOAD"
    },
    "10523": {
      "op": "PUSH2",
      "value": "0x2923"
    },
    "10526": {
      "op": "DUP2"
    },
    "10527": {
      "op": "PUSH2",
      "value": "0x2647"
    },
    "10530": {
      "jump": "i",
      "op": "JUMP"
    },
    "10531": {
      "op": "JUMPDEST"
    },
    "10532": {
      "op": "SWAP2"
    },
    "10533": {
      "op": "POP"
    },
    "10534": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10536": {
      "op": "DUP4"
    },
    "10537": {
      "op": "ADD"
    },
    "10538": {
      "op": "CALLDATALOAD"
    },
    "10539": {
      "op": "PUSH2",
      "value": "0x2687"
    },
    "10542": {
      "op": "DUP2"
    },
    "10543": {
      "op": "PUSH2",
      "value": "0x28F5"
    },
    "10546": {
      "jump": "i",
      "op": "JUMP"
    },
    "10547": {
      "op": "JUMPDEST"
    },
    "10548": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "10553": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "10555": {
      "op": "SHL"
    },
    "10556": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10558": {
      "op": "MSTORE"
    },
    "10559": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "10561": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "10563": {
      "op": "MSTORE"
    },
    "10564": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "10566": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10568": {
      "op": "REVERT"
    },
    "10569": {
      "op": "JUMPDEST"
    },
    "10570": {
      "op": "DUP1"
    },
    "10571": {
      "op": "DUP3"
    },
    "10572": {
      "op": "MUL"
    },
    "10573": {
      "op": "DUP2"
    },
    "10574": {
      "op": "ISZERO"
    },
    "10575": {
      "op": "DUP3"
    },
    "10576": {
      "op": "DUP3"
    },
    "10577": {
      "op": "DIV"
    },
    "10578": {
      "op": "DUP5"
    },
    "10579": {
      "op": "EQ"
    },
    "10580": {
      "op": "OR"
    },
    "10581": {
      "op": "PUSH2",
      "value": "0x5BC"
    },
    "10584": {
      "op": "JUMPI"
    },
    "10585": {
      "op": "PUSH2",
      "value": "0x5BC"
    },
    "10588": {
      "op": "PUSH2",
      "value": "0x2933"
    },
    "10591": {
      "jump": "i",
      "op": "JUMP"
    },
    "10592": {
      "op": "JUMPDEST"
    },
    "10593": {
      "op": "DUP1"
    },
    "10594": {
      "op": "DUP3"
    },
    "10595": {
      "op": "ADD"
    },
    "10596": {
      "op": "DUP1"
    },
    "10597": {
      "op": "DUP3"
    },
    "10598": {
      "op": "GT"
    },
    "10599": {
      "op": "ISZERO"
    },
    "10600": {
      "op": "PUSH2",
      "value": "0x5BC"
    },
    "10603": {
      "op": "JUMPI"
    },
    "10604": {
      "op": "PUSH2",
      "value": "0x5BC"
    },
    "10607": {
      "op": "PUSH2",
      "value": "0x2933"
    },
    "10610": {
      "jump": "i",
      "op": "JUMP"
    },
    "10611": {
      "op": "JUMPDEST"
    },
    "10612": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "10617": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "10619": {
      "op": "SHL"
    },
    "10620": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10622": {
      "op": "MSTORE"
    },
    "10623": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "10625": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "10627": {
      "op": "MSTORE"
    },
    "10628": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "10630": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10632": {
      "op": "REVERT"
    },
    "10633": {
      "op": "JUMPDEST"
    },
    "10634": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10636": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10638": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10640": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10642": {
      "op": "SHL"
    },
    "10643": {
      "op": "SUB"
    },
    "10644": {
      "op": "DUP1"
    },
    "10645": {
      "op": "DUP5"
    },
    "10646": {
      "op": "AND"
    },
    "10647": {
      "op": "DUP1"
    },
    "10648": {
      "op": "PUSH2",
      "value": "0x29A3"
    },
    "10651": {
      "op": "JUMPI"
    },
    "10652": {
      "op": "PUSH2",
      "value": "0x29A3"
    },
    "10655": {
      "op": "PUSH2",
      "value": "0x2973"
    },
    "10658": {
      "jump": "i",
      "op": "JUMP"
    },
    "10659": {
      "op": "JUMPDEST"
    },
    "10660": {
      "op": "SWAP3"
    },
    "10661": {
      "op": "AND"
    },
    "10662": {
      "op": "SWAP2"
    },
    "10663": {
      "op": "SWAP1"
    },
    "10664": {
      "op": "SWAP2"
    },
    "10665": {
      "op": "DIV"
    },
    "10666": {
      "op": "SWAP3"
    },
    "10667": {
      "op": "SWAP2"
    },
    "10668": {
      "op": "POP"
    },
    "10669": {
      "op": "POP"
    },
    "10670": {
      "jump": "o",
      "op": "JUMP"
    },
    "10671": {
      "op": "JUMPDEST"
    },
    "10672": {
      "op": "DUP2"
    },
    "10673": {
      "op": "DUP2"
    },
    "10674": {
      "op": "SUB"
    },
    "10675": {
      "op": "DUP2"
    },
    "10676": {
      "op": "DUP2"
    },
    "10677": {
      "op": "GT"
    },
    "10678": {
      "op": "ISZERO"
    },
    "10679": {
      "op": "PUSH2",
      "value": "0x5BC"
    },
    "10682": {
      "op": "JUMPI"
    },
    "10683": {
      "op": "PUSH2",
      "value": "0x5BC"
    },
    "10686": {
      "op": "PUSH2",
      "value": "0x2933"
    },
    "10689": {
      "jump": "i",
      "op": "JUMP"
    },
    "10690": {
      "op": "JUMPDEST"
    },
    "10691": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10693": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10695": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10697": {
      "op": "SHL"
    },
    "10698": {
      "op": "SUB"
    },
    "10699": {
      "op": "DUP3"
    },
    "10700": {
      "op": "DUP2"
    },
    "10701": {
      "op": "AND"
    },
    "10702": {
      "op": "DUP3"
    },
    "10703": {
      "op": "DUP3"
    },
    "10704": {
      "op": "AND"
    },
    "10705": {
      "op": "SUB"
    },
    "10706": {
      "op": "SWAP1"
    },
    "10707": {
      "op": "DUP1"
    },
    "10708": {
      "op": "DUP3"
    },
    "10709": {
      "op": "GT"
    },
    "10710": {
      "op": "ISZERO"
    },
    "10711": {
      "op": "PUSH2",
      "value": "0x29E2"
    },
    "10714": {
      "op": "JUMPI"
    },
    "10715": {
      "op": "PUSH2",
      "value": "0x29E2"
    },
    "10718": {
      "op": "PUSH2",
      "value": "0x2933"
    },
    "10721": {
      "jump": "i",
      "op": "JUMP"
    },
    "10722": {
      "op": "JUMPDEST"
    },
    "10723": {
      "op": "POP"
    },
    "10724": {
      "op": "SWAP3"
    },
    "10725": {
      "op": "SWAP2"
    },
    "10726": {
      "op": "POP"
    },
    "10727": {
      "op": "POP"
    },
    "10728": {
      "jump": "o",
      "op": "JUMP"
    },
    "10729": {
      "op": "JUMPDEST"
    },
    "10730": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10732": {
      "op": "DUP3"
    },
    "10733": {
      "op": "PUSH2",
      "value": "0x29F8"
    },
    "10736": {
      "op": "JUMPI"
    },
    "10737": {
      "op": "PUSH2",
      "value": "0x29F8"
    },
    "10740": {
      "op": "PUSH2",
      "value": "0x2973"
    },
    "10743": {
      "jump": "i",
      "op": "JUMP"
    },
    "10744": {
      "op": "JUMPDEST"
    },
    "10745": {
      "op": "POP"
    },
    "10746": {
      "op": "DIV"
    },
    "10747": {
      "op": "SWAP1"
    },
    "10748": {
      "jump": "o",
      "op": "JUMP"
    },
    "10749": {
      "op": "JUMPDEST"
    },
    "10750": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10752": {
      "op": "DUP1"
    },
    "10753": {
      "op": "DUP3"
    },
    "10754": {
      "op": "MSTORE"
    },
    "10755": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "10757": {
      "op": "SWAP1"
    },
    "10758": {
      "op": "DUP3"
    },
    "10759": {
      "op": "ADD"
    },
    "10760": {
      "op": "MSTORE"
    },
    "10761": {
      "op": "PUSH6",
      "value": "0x1C185D5CD959"
    },
    "10768": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "10770": {
      "op": "SHL"
    },
    "10771": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10773": {
      "op": "DUP3"
    },
    "10774": {
      "op": "ADD"
    },
    "10775": {
      "op": "MSTORE"
    },
    "10776": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10778": {
      "op": "ADD"
    },
    "10779": {
      "op": "SWAP1"
    },
    "10780": {
      "jump": "o",
      "op": "JUMP"
    },
    "10781": {
      "op": "JUMPDEST"
    },
    "10782": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10784": {
      "op": "DUP1"
    },
    "10785": {
      "op": "DUP3"
    },
    "10786": {
      "op": "MSTORE"
    },
    "10787": {
      "op": "PUSH1",
      "value": "0x7"
    },
    "10789": {
      "op": "SWAP1"
    },
    "10790": {
      "op": "DUP3"
    },
    "10791": {
      "op": "ADD"
    },
    "10792": {
      "op": "MSTORE"
    },
    "10793": {
      "op": "PUSH7",
      "value": "0x21616374697665"
    },
    "10801": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "10803": {
      "op": "SHL"
    },
    "10804": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10806": {
      "op": "DUP3"
    },
    "10807": {
      "op": "ADD"
    },
    "10808": {
      "op": "MSTORE"
    },
    "10809": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10811": {
      "op": "ADD"
    },
    "10812": {
      "op": "SWAP1"
    },
    "10813": {
      "jump": "o",
      "op": "JUMP"
    },
    "10814": {
      "op": "JUMPDEST"
    },
    "10815": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10817": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10819": {
      "op": "DUP3"
    },
    "10820": {
      "op": "DUP5"
    },
    "10821": {
      "op": "SUB"
    },
    "10822": {
      "op": "SLT"
    },
    "10823": {
      "op": "ISZERO"
    },
    "10824": {
      "op": "PUSH2",
      "value": "0x2A50"
    },
    "10827": {
      "op": "JUMPI"
    },
    "10828": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10830": {
      "op": "DUP1"
    },
    "10831": {
      "op": "REVERT"
    },
    "10832": {
      "op": "JUMPDEST"
    },
    "10833": {
      "op": "POP"
    },
    "10834": {
      "op": "MLOAD"
    },
    "10835": {
      "op": "SWAP2"
    },
    "10836": {
      "op": "SWAP1"
    },
    "10837": {
      "op": "POP"
    },
    "10838": {
      "jump": "o",
      "op": "JUMP"
    },
    "10839": {
      "op": "JUMPDEST"
    },
    "10840": {
      "op": "PUSH4",
      "value": "0xFFFFFFFF"
    },
    "10845": {
      "op": "DUP2"
    },
    "10846": {
      "op": "DUP2"
    },
    "10847": {
      "op": "AND"
    },
    "10848": {
      "op": "DUP4"
    },
    "10849": {
      "op": "DUP3"
    },
    "10850": {
      "op": "AND"
    },
    "10851": {
      "op": "ADD"
    },
    "10852": {
      "op": "SWAP1"
    },
    "10853": {
      "op": "DUP1"
    },
    "10854": {
      "op": "DUP3"
    },
    "10855": {
      "op": "GT"
    },
    "10856": {
      "op": "ISZERO"
    },
    "10857": {
      "op": "PUSH2",
      "value": "0x29E2"
    },
    "10860": {
      "op": "JUMPI"
    },
    "10861": {
      "op": "PUSH2",
      "value": "0x29E2"
    },
    "10864": {
      "op": "PUSH2",
      "value": "0x2933"
    },
    "10867": {
      "jump": "i",
      "op": "JUMP"
    },
    "10868": {
      "op": "JUMPDEST"
    },
    "10869": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10871": {
      "op": "DUP1"
    },
    "10872": {
      "op": "DUP3"
    },
    "10873": {
      "op": "MSTORE"
    },
    "10874": {
      "op": "DUP2"
    },
    "10875": {
      "op": "DUP2"
    },
    "10876": {
      "op": "ADD"
    },
    "10877": {
      "op": "MSTORE"
    },
    "10878": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "10911": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10913": {
      "op": "DUP3"
    },
    "10914": {
      "op": "ADD"
    },
    "10915": {
      "op": "MSTORE"
    },
    "10916": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10918": {
      "op": "ADD"
    },
    "10919": {
      "op": "SWAP1"
    },
    "10920": {
      "jump": "o",
      "op": "JUMP"
    },
    "10921": {
      "op": "JUMPDEST"
    },
    "10922": {
      "op": "PUSH4",
      "value": "0xFFFFFFFF"
    },
    "10927": {
      "op": "DUP3"
    },
    "10928": {
      "op": "DUP2"
    },
    "10929": {
      "op": "AND"
    },
    "10930": {
      "op": "DUP3"
    },
    "10931": {
      "op": "DUP3"
    },
    "10932": {
      "op": "AND"
    },
    "10933": {
      "op": "SUB"
    },
    "10934": {
      "op": "SWAP1"
    },
    "10935": {
      "op": "DUP1"
    },
    "10936": {
      "op": "DUP3"
    },
    "10937": {
      "op": "GT"
    },
    "10938": {
      "op": "ISZERO"
    },
    "10939": {
      "op": "PUSH2",
      "value": "0x29E2"
    },
    "10942": {
      "op": "JUMPI"
    },
    "10943": {
      "op": "PUSH2",
      "value": "0x29E2"
    },
    "10946": {
      "op": "PUSH2",
      "value": "0x2933"
    },
    "10949": {
      "jump": "i",
      "op": "JUMP"
    },
    "10950": {
      "op": "JUMPDEST"
    },
    "10951": {
      "op": "DUP1"
    },
    "10952": {
      "op": "MLOAD"
    },
    "10953": {
      "op": "PUSH2",
      "value": "0x2AD1"
    },
    "10956": {
      "op": "DUP2"
    },
    "10957": {
      "op": "PUSH2",
      "value": "0x2647"
    },
    "10960": {
      "jump": "i",
      "op": "JUMP"
    },
    "10961": {
      "op": "JUMPDEST"
    },
    "10962": {
      "op": "SWAP2"
    },
    "10963": {
      "op": "SWAP1"
    },
    "10964": {
      "op": "POP"
    },
    "10965": {
      "jump": "o",
      "op": "JUMP"
    },
    "10966": {
      "op": "JUMPDEST"
    },
    "10967": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10969": {
      "op": "JUMPDEST"
    },
    "10970": {
      "op": "DUP4"
    },
    "10971": {
      "op": "DUP2"
    },
    "10972": {
      "op": "LT"
    },
    "10973": {
      "op": "ISZERO"
    },
    "10974": {
      "op": "PUSH2",
      "value": "0x2AF1"
    },
    "10977": {
      "op": "JUMPI"
    },
    "10978": {
      "op": "DUP2"
    },
    "10979": {
      "op": "DUP2"
    },
    "10980": {
      "op": "ADD"
    },
    "10981": {
      "op": "MLOAD"
    },
    "10982": {
      "op": "DUP4"
    },
    "10983": {
      "op": "DUP3"
    },
    "10984": {
      "op": "ADD"
    },
    "10985": {
      "op": "MSTORE"
    },
    "10986": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10988": {
      "op": "ADD"
    },
    "10989": {
      "op": "PUSH2",
      "value": "0x2AD9"
    },
    "10992": {
      "op": "JUMP"
    },
    "10993": {
      "op": "JUMPDEST"
    },
    "10994": {
      "op": "POP"
    },
    "10995": {
      "op": "POP"
    },
    "10996": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10998": {
      "op": "SWAP2"
    },
    "10999": {
      "op": "ADD"
    },
    "11000": {
      "op": "MSTORE"
    },
    "11001": {
      "jump": "o",
      "op": "JUMP"
    },
    "11002": {
      "op": "JUMPDEST"
    },
    "11003": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11005": {
      "op": "DUP3"
    },
    "11006": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11008": {
      "op": "DUP4"
    },
    "11009": {
      "op": "ADD"
    },
    "11010": {
      "op": "SLT"
    },
    "11011": {
      "op": "PUSH2",
      "value": "0x2B0B"
    },
    "11014": {
      "op": "JUMPI"
    },
    "11015": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11017": {
      "op": "DUP1"
    },
    "11018": {
      "op": "REVERT"
    },
    "11019": {
      "op": "JUMPDEST"
    },
    "11020": {
      "op": "DUP2"
    },
    "11021": {
      "op": "MLOAD"
    },
    "11022": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11024": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11026": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11028": {
      "op": "SHL"
    },
    "11029": {
      "op": "SUB"
    },
    "11030": {
      "op": "DUP1"
    },
    "11031": {
      "op": "DUP3"
    },
    "11032": {
      "op": "GT"
    },
    "11033": {
      "op": "ISZERO"
    },
    "11034": {
      "op": "PUSH2",
      "value": "0x2B25"
    },
    "11037": {
      "op": "JUMPI"
    },
    "11038": {
      "op": "PUSH2",
      "value": "0x2B25"
    },
    "11041": {
      "op": "PUSH2",
      "value": "0x26A7"
    },
    "11044": {
      "jump": "i",
      "op": "JUMP"
    },
    "11045": {
      "op": "JUMPDEST"
    },
    "11046": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11048": {
      "op": "MLOAD"
    },
    "11049": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11051": {
      "op": "DUP4"
    },
    "11052": {
      "op": "ADD"
    },
    "11053": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11055": {
      "op": "NOT"
    },
    "11056": {
      "op": "SWAP1"
    },
    "11057": {
      "op": "DUP2"
    },
    "11058": {
      "op": "AND"
    },
    "11059": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "11061": {
      "op": "ADD"
    },
    "11062": {
      "op": "AND"
    },
    "11063": {
      "op": "DUP2"
    },
    "11064": {
      "op": "ADD"
    },
    "11065": {
      "op": "SWAP1"
    },
    "11066": {
      "op": "DUP3"
    },
    "11067": {
      "op": "DUP3"
    },
    "11068": {
      "op": "GT"
    },
    "11069": {
      "op": "DUP2"
    },
    "11070": {
      "op": "DUP4"
    },
    "11071": {
      "op": "LT"
    },
    "11072": {
      "op": "OR"
    },
    "11073": {
      "op": "ISZERO"
    },
    "11074": {
      "op": "PUSH2",
      "value": "0x2B4D"
    },
    "11077": {
      "op": "JUMPI"
    },
    "11078": {
      "op": "PUSH2",
      "value": "0x2B4D"
    },
    "11081": {
      "op": "PUSH2",
      "value": "0x26A7"
    },
    "11084": {
      "jump": "i",
      "op": "JUMP"
    },
    "11085": {
      "op": "JUMPDEST"
    },
    "11086": {
      "op": "DUP2"
    },
    "11087": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11089": {
      "op": "MSTORE"
    },
    "11090": {
      "op": "DUP4"
    },
    "11091": {
      "op": "DUP2"
    },
    "11092": {
      "op": "MSTORE"
    },
    "11093": {
      "op": "DUP7"
    },
    "11094": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11096": {
      "op": "DUP6"
    },
    "11097": {
      "op": "DUP9"
    },
    "11098": {
      "op": "ADD"
    },
    "11099": {
      "op": "ADD"
    },
    "11100": {
      "op": "GT"
    },
    "11101": {
      "op": "ISZERO"
    },
    "11102": {
      "op": "PUSH2",
      "value": "0x2B66"
    },
    "11105": {
      "op": "JUMPI"
    },
    "11106": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11108": {
      "op": "DUP1"
    },
    "11109": {
      "op": "REVERT"
    },
    "11110": {
      "op": "JUMPDEST"
    },
    "11111": {
      "op": "PUSH2",
      "value": "0x2B77"
    },
    "11114": {
      "op": "DUP5"
    },
    "11115": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11117": {
      "op": "DUP4"
    },
    "11118": {
      "op": "ADD"
    },
    "11119": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11121": {
      "op": "DUP10"
    },
    "11122": {
      "op": "ADD"
    },
    "11123": {
      "op": "PUSH2",
      "value": "0x2AD6"
    },
    "11126": {
      "jump": "i",
      "op": "JUMP"
    },
    "11127": {
      "op": "JUMPDEST"
    },
    "11128": {
      "op": "SWAP7"
    },
    "11129": {
      "op": "SWAP6"
    },
    "11130": {
      "op": "POP"
    },
    "11131": {
      "op": "POP"
    },
    "11132": {
      "op": "POP"
    },
    "11133": {
      "op": "POP"
    },
    "11134": {
      "op": "POP"
    },
    "11135": {
      "op": "POP"
    },
    "11136": {
      "jump": "o",
      "op": "JUMP"
    },
    "11137": {
      "op": "JUMPDEST"
    },
    "11138": {
      "op": "DUP1"
    },
    "11139": {
      "op": "MLOAD"
    },
    "11140": {
      "op": "PUSH2",
      "value": "0x2AD1"
    },
    "11143": {
      "op": "DUP2"
    },
    "11144": {
      "op": "PUSH2",
      "value": "0x2632"
    },
    "11147": {
      "jump": "i",
      "op": "JUMP"
    },
    "11148": {
      "op": "JUMPDEST"
    },
    "11149": {
      "op": "DUP1"
    },
    "11150": {
      "op": "MLOAD"
    },
    "11151": {
      "op": "PUSH2",
      "value": "0x2AD1"
    },
    "11154": {
      "op": "DUP2"
    },
    "11155": {
      "op": "PUSH2",
      "value": "0x28F5"
    },
    "11158": {
      "jump": "i",
      "op": "JUMP"
    },
    "11159": {
      "op": "JUMPDEST"
    },
    "11160": {
      "op": "DUP1"
    },
    "11161": {
      "op": "MLOAD"
    },
    "11162": {
      "op": "PUSH2",
      "value": "0x2AD1"
    },
    "11165": {
      "op": "DUP2"
    },
    "11166": {
      "op": "PUSH2",
      "value": "0x2607"
    },
    "11169": {
      "jump": "i",
      "op": "JUMP"
    },
    "11170": {
      "op": "JUMPDEST"
    },
    "11171": {
      "op": "DUP1"
    },
    "11172": {
      "op": "MLOAD"
    },
    "11173": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11175": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11177": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "11179": {
      "op": "SHL"
    },
    "11180": {
      "op": "SUB"
    },
    "11181": {
      "op": "NOT"
    },
    "11182": {
      "op": "DUP2"
    },
    "11183": {
      "op": "AND"
    },
    "11184": {
      "op": "DUP2"
    },
    "11185": {
      "op": "EQ"
    },
    "11186": {
      "op": "PUSH2",
      "value": "0x2AD1"
    },
    "11189": {
      "op": "JUMPI"
    },
    "11190": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11192": {
      "op": "DUP1"
    },
    "11193": {
      "op": "REVERT"
    },
    "11194": {
      "op": "JUMPDEST"
    },
    "11195": {
      "op": "DUP1"
    },
    "11196": {
      "op": "MLOAD"
    },
    "11197": {
      "op": "PUSH16",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "11214": {
      "op": "DUP2"
    },
    "11215": {
      "op": "AND"
    },
    "11216": {
      "op": "DUP2"
    },
    "11217": {
      "op": "EQ"
    },
    "11218": {
      "op": "PUSH2",
      "value": "0x2AD1"
    },
    "11221": {
      "op": "JUMPI"
    },
    "11222": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11224": {
      "op": "DUP1"
    },
    "11225": {
      "op": "REVERT"
    },
    "11226": {
      "op": "JUMPDEST"
    },
    "11227": {
      "op": "DUP1"
    },
    "11228": {
      "op": "MLOAD"
    },
    "11229": {
      "op": "PUSH2",
      "value": "0x2AD1"
    },
    "11232": {
      "op": "DUP2"
    },
    "11233": {
      "op": "PUSH2",
      "value": "0x2692"
    },
    "11236": {
      "jump": "i",
      "op": "JUMP"
    },
    "11237": {
      "op": "JUMPDEST"
    },
    "11238": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11240": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11242": {
      "op": "DUP3"
    },
    "11243": {
      "op": "DUP5"
    },
    "11244": {
      "op": "SUB"
    },
    "11245": {
      "op": "SLT"
    },
    "11246": {
      "op": "ISZERO"
    },
    "11247": {
      "op": "PUSH2",
      "value": "0x2BF7"
    },
    "11250": {
      "op": "JUMPI"
    },
    "11251": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11253": {
      "op": "DUP1"
    },
    "11254": {
      "op": "REVERT"
    },
    "11255": {
      "op": "JUMPDEST"
    },
    "11256": {
      "op": "DUP2"
    },
    "11257": {
      "op": "MLOAD"
    },
    "11258": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11262": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11264": {
      "op": "SHL"
    },
    "11265": {
      "op": "SUB"
    },
    "11266": {
      "op": "DUP1"
    },
    "11267": {
      "op": "DUP3"
    },
    "11268": {
      "op": "GT"
    },
    "11269": {
      "op": "ISZERO"
    },
    "11270": {
      "op": "PUSH2",
      "value": "0x2C0E"
    },
    "11273": {
      "op": "JUMPI"
    },
    "11274": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11276": {
      "op": "DUP1"
    },
    "11277": {
      "op": "REVERT"
    },
    "11278": {
      "op": "JUMPDEST"
    },
    "11279": {
      "op": "SWAP1"
    },
    "11280": {
      "op": "DUP4"
    },
    "11281": {
      "op": "ADD"
    },
    "11282": {
      "op": "SWAP1"
    },
    "11283": {
      "op": "PUSH2",
      "value": "0x1A0"
    },
    "11286": {
      "op": "DUP3"
    },
    "11287": {
      "op": "DUP7"
    },
    "11288": {
      "op": "SUB"
    },
    "11289": {
      "op": "SLT"
    },
    "11290": {
      "op": "ISZERO"
    },
    "11291": {
      "op": "PUSH2",
      "value": "0x2C23"
    },
    "11294": {
      "op": "JUMPI"
    },
    "11295": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11297": {
      "op": "DUP1"
    },
    "11298": {
      "op": "REVERT"
    },
    "11299": {
      "op": "JUMPDEST"
    },
    "11300": {
      "op": "PUSH2",
      "value": "0x2C2B"
    },
    "11303": {
      "op": "PUSH2",
      "value": "0x26BD"
    },
    "11306": {
      "jump": "i",
      "op": "JUMP"
    },
    "11307": {
      "op": "JUMPDEST"
    },
    "11308": {
      "op": "PUSH2",
      "value": "0x2C34"
    },
    "11311": {
      "op": "DUP4"
    },
    "11312": {
      "op": "PUSH2",
      "value": "0x2AC6"
    },
    "11315": {
      "jump": "i",
      "op": "JUMP"
    },
    "11316": {
      "op": "JUMPDEST"
    },
    "11317": {
      "op": "DUP2"
    },
    "11318": {
      "op": "MSTORE"
    },
    "11319": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11321": {
      "op": "DUP4"
    },
    "11322": {
      "op": "ADD"
    },
    "11323": {
      "op": "MLOAD"
    },
    "11324": {
      "op": "DUP3"
    },
    "11325": {
      "op": "DUP2"
    },
    "11326": {
      "op": "GT"
    },
    "11327": {
      "op": "ISZERO"
    },
    "11328": {
      "op": "PUSH2",
      "value": "0x2C48"
    },
    "11331": {
      "op": "JUMPI"
    },
    "11332": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11334": {
      "op": "DUP1"
    },
    "11335": {
      "op": "REVERT"
    },
    "11336": {
      "op": "JUMPDEST"
    },
    "11337": {
      "op": "PUSH2",
      "value": "0x2C54"
    },
    "11340": {
      "op": "DUP8"
    },
    "11341": {
      "op": "DUP3"
    },
    "11342": {
      "op": "DUP7"
    },
    "11343": {
      "op": "ADD"
    },
    "11344": {
      "op": "PUSH2",
      "value": "0x2AFA"
    },
    "11347": {
      "jump": "i",
      "op": "JUMP"
    },
    "11348": {
      "op": "JUMPDEST"
    },
    "11349": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11351": {
      "op": "DUP4"
    },
    "11352": {
      "op": "ADD"
    },
    "11353": {
      "op": "MSTORE"
    },
    "11354": {
      "op": "POP"
    },
    "11355": {
      "op": "PUSH2",
      "value": "0x2C66"
    },
    "11358": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11360": {
      "op": "DUP5"
    },
    "11361": {
      "op": "ADD"
    },
    "11362": {
      "op": "PUSH2",
      "value": "0x2B81"
    },
    "11365": {
      "jump": "i",
      "op": "JUMP"
    },
    "11366": {
      "op": "JUMPDEST"
    },
    "11367": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11369": {
      "op": "DUP3"
    },
    "11370": {
      "op": "ADD"
    },
    "11371": {
      "op": "MSTORE"
    },
    "11372": {
      "op": "PUSH2",
      "value": "0x2C77"
    },
    "11375": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "11377": {
      "op": "DUP5"
    },
    "11378": {
      "op": "ADD"
    },
    "11379": {
      "op": "PUSH2",
      "value": "0x2B8C"
    },
    "11382": {
      "jump": "i",
      "op": "JUMP"
    },
    "11383": {
      "op": "JUMPDEST"
    },
    "11384": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "11386": {
      "op": "DUP3"
    },
    "11387": {
      "op": "ADD"
    },
    "11388": {
      "op": "MSTORE"
    },
    "11389": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "11391": {
      "op": "DUP4"
    },
    "11392": {
      "op": "ADD"
    },
    "11393": {
      "op": "MLOAD"
    },
    "11394": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "11396": {
      "op": "DUP3"
    },
    "11397": {
      "op": "ADD"
    },
    "11398": {
      "op": "MSTORE"
    },
    "11399": {
      "op": "PUSH2",
      "value": "0x2C92"
    },
    "11402": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "11404": {
      "op": "DUP5"
    },
    "11405": {
      "op": "ADD"
    },
    "11406": {
      "op": "PUSH2",
      "value": "0x2B97"
    },
    "11409": {
      "jump": "i",
      "op": "JUMP"
    },
    "11410": {
      "op": "JUMPDEST"
    },
    "11411": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "11413": {
      "op": "DUP3"
    },
    "11414": {
      "op": "ADD"
    },
    "11415": {
      "op": "MSTORE"
    },
    "11416": {
      "op": "PUSH2",
      "value": "0x2CA3"
    },
    "11419": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "11421": {
      "op": "DUP5"
    },
    "11422": {
      "op": "ADD"
    },
    "11423": {
      "op": "PUSH2",
      "value": "0x2BA2"
    },
    "11426": {
      "jump": "i",
      "op": "JUMP"
    },
    "11427": {
      "op": "JUMPDEST"
    },
    "11428": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "11430": {
      "op": "DUP3"
    },
    "11431": {
      "op": "ADD"
    },
    "11432": {
      "op": "MSTORE"
    },
    "11433": {
      "op": "PUSH2",
      "value": "0x2CB4"
    },
    "11436": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "11438": {
      "op": "DUP5"
    },
    "11439": {
      "op": "ADD"
    },
    "11440": {
      "op": "PUSH2",
      "value": "0x2B8C"
    },
    "11443": {
      "jump": "i",
      "op": "JUMP"
    },
    "11444": {
      "op": "JUMPDEST"
    },
    "11445": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "11447": {
      "op": "DUP3"
    },
    "11448": {
      "op": "ADD"
    },
    "11449": {
      "op": "MSTORE"
    },
    "11450": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "11453": {
      "op": "SWAP2"
    },
    "11454": {
      "op": "POP"
    },
    "11455": {
      "op": "PUSH2",
      "value": "0x2CC9"
    },
    "11458": {
      "op": "DUP3"
    },
    "11459": {
      "op": "DUP5"
    },
    "11460": {
      "op": "ADD"
    },
    "11461": {
      "op": "PUSH2",
      "value": "0x2BBA"
    },
    "11464": {
      "jump": "i",
      "op": "JUMP"
    },
    "11465": {
      "op": "JUMPDEST"
    },
    "11466": {
      "op": "SWAP2"
    },
    "11467": {
      "op": "DUP2"
    },
    "11468": {
      "op": "ADD"
    },
    "11469": {
      "op": "SWAP2"
    },
    "11470": {
      "op": "SWAP1"
    },
    "11471": {
      "op": "SWAP2"
    },
    "11472": {
      "op": "MSTORE"
    },
    "11473": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "11476": {
      "op": "DUP3"
    },
    "11477": {
      "op": "DUP2"
    },
    "11478": {
      "op": "ADD"
    },
    "11479": {
      "op": "MLOAD"
    },
    "11480": {
      "op": "SWAP1"
    },
    "11481": {
      "op": "DUP3"
    },
    "11482": {
      "op": "ADD"
    },
    "11483": {
      "op": "MSTORE"
    },
    "11484": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "11487": {
      "op": "DUP1"
    },
    "11488": {
      "op": "DUP4"
    },
    "11489": {
      "op": "ADD"
    },
    "11490": {
      "op": "MLOAD"
    },
    "11491": {
      "op": "SWAP1"
    },
    "11492": {
      "op": "DUP3"
    },
    "11493": {
      "op": "ADD"
    },
    "11494": {
      "op": "MSTORE"
    },
    "11495": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "11498": {
      "op": "SWAP1"
    },
    "11499": {
      "op": "PUSH2",
      "value": "0x2CF5"
    },
    "11502": {
      "op": "DUP3"
    },
    "11503": {
      "op": "DUP5"
    },
    "11504": {
      "op": "ADD"
    },
    "11505": {
      "op": "PUSH2",
      "value": "0x2BDA"
    },
    "11508": {
      "jump": "i",
      "op": "JUMP"
    },
    "11509": {
      "op": "JUMPDEST"
    },
    "11510": {
      "op": "DUP3"
    },
    "11511": {
      "op": "DUP3"
    },
    "11512": {
      "op": "ADD"
    },
    "11513": {
      "op": "MSTORE"
    },
    "11514": {
      "op": "PUSH2",
      "value": "0x180"
    },
    "11517": {
      "op": "SWAP2"
    },
    "11518": {
      "op": "POP"
    },
    "11519": {
      "op": "PUSH2",
      "value": "0x2D09"
    },
    "11522": {
      "op": "DUP3"
    },
    "11523": {
      "op": "DUP5"
    },
    "11524": {
      "op": "ADD"
    },
    "11525": {
      "op": "PUSH2",
      "value": "0x2BDA"
    },
    "11528": {
      "jump": "i",
      "op": "JUMP"
    },
    "11529": {
      "op": "JUMPDEST"
    },
    "11530": {
      "op": "SWAP2"
    },
    "11531": {
      "op": "DUP2"
    },
    "11532": {
      "op": "ADD"
    },
    "11533": {
      "op": "SWAP2"
    },
    "11534": {
      "op": "SWAP1"
    },
    "11535": {
      "op": "SWAP2"
    },
    "11536": {
      "op": "MSTORE"
    },
    "11537": {
      "op": "SWAP5"
    },
    "11538": {
      "op": "SWAP4"
    },
    "11539": {
      "op": "POP"
    },
    "11540": {
      "op": "POP"
    },
    "11541": {
      "op": "POP"
    },
    "11542": {
      "op": "POP"
    },
    "11543": {
      "jump": "o",
      "op": "JUMP"
    },
    "11544": {
      "op": "JUMPDEST"
    },
    "11545": {
      "op": "PUSH3",
      "value": "0xFFFFFF"
    },
    "11549": {
      "op": "DUP2"
    },
    "11550": {
      "op": "DUP2"
    },
    "11551": {
      "op": "AND"
    },
    "11552": {
      "op": "DUP4"
    },
    "11553": {
      "op": "DUP3"
    },
    "11554": {
      "op": "AND"
    },
    "11555": {
      "op": "MUL"
    },
    "11556": {
      "op": "DUP1"
    },
    "11557": {
      "op": "DUP3"
    },
    "11558": {
      "op": "AND"
    },
    "11559": {
      "op": "SWAP2"
    },
    "11560": {
      "op": "SWAP1"
    },
    "11561": {
      "op": "DUP3"
    },
    "11562": {
      "op": "DUP2"
    },
    "11563": {
      "op": "EQ"
    },
    "11564": {
      "op": "PUSH2",
      "value": "0x2D37"
    },
    "11567": {
      "op": "JUMPI"
    },
    "11568": {
      "op": "PUSH2",
      "value": "0x2D37"
    },
    "11571": {
      "op": "PUSH2",
      "value": "0x2933"
    },
    "11574": {
      "jump": "i",
      "op": "JUMP"
    },
    "11575": {
      "op": "JUMPDEST"
    },
    "11576": {
      "op": "POP"
    },
    "11577": {
      "op": "POP"
    },
    "11578": {
      "op": "SWAP3"
    },
    "11579": {
      "op": "SWAP2"
    },
    "11580": {
      "op": "POP"
    },
    "11581": {
      "op": "POP"
    },
    "11582": {
      "jump": "o",
      "op": "JUMP"
    },
    "11583": {
      "op": "JUMPDEST"
    },
    "11584": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11586": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11588": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11590": {
      "op": "SHL"
    },
    "11591": {
      "op": "SUB"
    },
    "11592": {
      "op": "DUP2"
    },
    "11593": {
      "op": "DUP2"
    },
    "11594": {
      "op": "AND"
    },
    "11595": {
      "op": "DUP4"
    },
    "11596": {
      "op": "DUP3"
    },
    "11597": {
      "op": "AND"
    },
    "11598": {
      "op": "ADD"
    },
    "11599": {
      "op": "SWAP1"
    },
    "11600": {
      "op": "DUP1"
    },
    "11601": {
      "op": "DUP3"
    },
    "11602": {
      "op": "GT"
    },
    "11603": {
      "op": "ISZERO"
    },
    "11604": {
      "op": "PUSH2",
      "value": "0x29E2"
    },
    "11607": {
      "op": "JUMPI"
    },
    "11608": {
      "op": "PUSH2",
      "value": "0x29E2"
    },
    "11611": {
      "op": "PUSH2",
      "value": "0x2933"
    },
    "11614": {
      "jump": "i",
      "op": "JUMP"
    },
    "11615": {
      "op": "JUMPDEST"
    },
    "11616": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11618": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11620": {
      "op": "DUP3"
    },
    "11621": {
      "op": "DUP5"
    },
    "11622": {
      "op": "SUB"
    },
    "11623": {
      "op": "SLT"
    },
    "11624": {
      "op": "ISZERO"
    },
    "11625": {
      "op": "PUSH2",
      "value": "0x2D71"
    },
    "11628": {
      "op": "JUMPI"
    },
    "11629": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11631": {
      "op": "DUP1"
    },
    "11632": {
      "op": "REVERT"
    },
    "11633": {
      "op": "JUMPDEST"
    },
    "11634": {
      "op": "DUP2"
    },
    "11635": {
      "op": "MLOAD"
    },
    "11636": {
      "op": "PUSH2",
      "value": "0x1347"
    },
    "11639": {
      "op": "DUP2"
    },
    "11640": {
      "op": "PUSH2",
      "value": "0x2607"
    },
    "11643": {
      "jump": "i",
      "op": "JUMP"
    },
    "11644": {
      "op": "JUMPDEST"
    },
    "11645": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11647": {
      "op": "DUP3"
    },
    "11648": {
      "op": "MLOAD"
    },
    "11649": {
      "op": "PUSH2",
      "value": "0x2D8E"
    },
    "11652": {
      "op": "DUP2"
    },
    "11653": {
      "op": "DUP5"
    },
    "11654": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11656": {
      "op": "DUP8"
    },
    "11657": {
      "op": "ADD"
    },
    "11658": {
      "op": "PUSH2",
      "value": "0x2AD6"
    },
    "11661": {
      "jump": "i",
      "op": "JUMP"
    },
    "11662": {
      "op": "JUMPDEST"
    },
    "11663": {
      "op": "SWAP2"
    },
    "11664": {
      "op": "SWAP1"
    },
    "11665": {
      "op": "SWAP2"
    },
    "11666": {
      "op": "ADD"
    },
    "11667": {
      "op": "SWAP3"
    },
    "11668": {
      "op": "SWAP2"
    },
    "11669": {
      "op": "POP"
    },
    "11670": {
      "op": "POP"
    },
    "11671": {
      "jump": "o",
      "op": "JUMP"
    },
    "11672": {
      "op": "JUMPDEST"
    },
    "11673": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11675": {
      "op": "DUP2"
    },
    "11676": {
      "op": "MSTORE"
    },
    "11677": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11679": {
      "op": "DUP3"
    },
    "11680": {
      "op": "MLOAD"
    },
    "11681": {
      "op": "DUP1"
    },
    "11682": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11684": {
      "op": "DUP5"
    },
    "11685": {
      "op": "ADD"
    },
    "11686": {
      "op": "MSTORE"
    },
    "11687": {
      "op": "PUSH2",
      "value": "0x2DB7"
    },
    "11690": {
      "op": "DUP2"
    },
    "11691": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11693": {
      "op": "DUP6"
    },
    "11694": {
      "op": "ADD"
    },
    "11695": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11697": {
      "op": "DUP8"
    },
    "11698": {
      "op": "ADD"
    },
    "11699": {
      "op": "PUSH2",
      "value": "0x2AD6"
    },
    "11702": {
      "jump": "i",
      "op": "JUMP"
    },
    "11703": {
      "op": "JUMPDEST"
    },
    "11704": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11706": {
      "op": "ADD"
    },
    "11707": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11709": {
      "op": "NOT"
    },
    "11710": {
      "op": "AND"
    },
    "11711": {
      "op": "SWAP2"
    },
    "11712": {
      "op": "SWAP1"
    },
    "11713": {
      "op": "SWAP2"
    },
    "11714": {
      "op": "ADD"
    },
    "11715": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11717": {
      "op": "ADD"
    },
    "11718": {
      "op": "SWAP3"
    },
    "11719": {
      "op": "SWAP2"
    },
    "11720": {
      "op": "POP"
    },
    "11721": {
      "op": "POP"
    },
    "11722": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "06ee6a01a9a0ddc9cbd23eeb8c9169b43467ac9a",
  "source": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT\n\n/**\n *\n * This code is part of HouseOfPanda project.\n *\n */\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./ERC1155Tradable.sol\";\nimport \"./interfaces/ICoin.sol\";\nimport \"./interfaces/IProjectMan.sol\";\nimport \"./types/ProjectInfo.sol\";\nimport \"./types/HoldingInfo.sol\";\nimport \"./types/StakeInfo.sol\";\nimport \"./SigVerifier.sol\";\nimport \"./HasAdmin.sol\";\n\nuint16 constant REWARD_TYPE_HOLDING = 1;\nuint16 constant REWARD_TYPE_STAKING = 2;\n\ninterface IStaker {\n    function setProjectMan(address _projectMan) external;\n\n    function getHoldingInfo(\n        address user,\n        uint32 projectId\n    ) external view returns (HoldingInfo memory);\n\n    function getHoldingInfoRaw(\n        address user,\n        uint32 projectId\n    ) external view returns (HoldingInfo memory);\n\n    function setHoldingInfoData(\n        address user,\n        uint32 projectId,\n        HoldingInfo memory holding\n    ) external;\n\n    function getStakingInfo(\n        address _staker,\n        uint32 projectId\n    ) external view returns (StakeInfo memory);\n\n    function getStakingInfoRaw(\n        address user,\n        uint32 projectId\n    ) external view returns (StakeInfo memory);\n\n    function calculateRewards(\n        uint256 _amount,\n        uint64 _startTime,\n        uint64 _endTime,\n        uint256 apy\n    ) external pure returns (uint256 rewards);\n\n    function collectRewards(uint32 projectId) external returns (bool);\n\n    function pause(bool _paused) external;\n\n    function owner() external view returns (address);\n}\n\ncontract Staker is ReentrancyGuard, Ownable, HasAdmin, SigVerifier {\n    using SafeERC20 for ICoin;\n\n    IProjectMan internal projectMan;\n    ICoin internal stableCoin;\n\n    bool public paused = false;\n\n    event StakeEvent(address indexed staker, uint256 amount);\n    event CollectRewards(\n        address indexed staker,\n        uint32 indexed projectId,\n        uint256 amount\n    );\n    event BalanceDeposit(address indexed who, uint256 indexed amount);\n    event BalanceWithdraw(address indexed who, uint256 indexed amount);\n\n    // user -> projectId -> StakeInfo\n    mapping(address => mapping(uint32 => StakeInfo)) internal stakers;\n    mapping(uint64 => uint8) internal usedNonce_;\n    mapping(address => mapping(uint32 => HoldingInfo)) internal holdings;\n\n    constructor(address _stableCoin, address _admin) {\n        stableCoin = ICoin(_stableCoin);\n        _setAdmin(_admin);\n\n        // approve owner\n        stableCoin.safeIncreaseAllowance(address(this), type(uint256).max);\n    }\n\n    modifier onlyProjectMan() {\n        require(msg.sender == address(projectMan), \"!projectMan\");\n        _;\n    }\n\n    function setProjectMan(address _projectMan) external {\n        require(projectMan == IProjectMan(address(0)), \"pm set\");\n        require(tx.origin == owner(), \"!owner\");\n        projectMan = IProjectMan(_projectMan);\n        stableCoin.safeIncreaseAllowance(_projectMan, type(uint256).max);\n    }\n\n    function _getProject(\n        uint32 projectId\n    ) internal view returns (ProjectInfo memory) {\n        return projectMan.getProject(projectId);\n    }\n\n    function changeAdmin(address newAdmin_) external onlyOwner {\n        _setAdmin(newAdmin_);\n    }\n\n    /**\n     * @dev function to calculate rewards,\n     *      rewards is progressive to 12% per year.\n     * @param _amount amount of stable coin.\n     * @param _startTime time when staking started.\n     * @param _endTime time when staking ended.\n     * @return rewards amount of rewards\n     */\n    function calculateRewards(\n        uint256 _amount,\n        uint64 _startTime,\n        uint64 _endTime,\n        uint256 apy\n    ) public pure returns (uint256 rewards) {\n        uint32 a_days = uint32((_endTime - _startTime) / 1 days);\n        uint256 a_amount = (_amount * apy);\n        rewards = (a_amount * a_days) / 365;\n        return rewards / 100;\n    }\n\n    function stake(uint32 projectId, uint32 qty) external returns (bool) {\n        require(!paused, \"paused\");\n        require(qty > 0, \"!qty\");\n\n        address _sender = msg.sender;\n\n        ProjectInfo memory project = _getProject(projectId);\n\n        _checkProject(project);\n        require(project.status == ACTIVE, \"!active\");\n        require(project.startTime <= block.timestamp, \"!start\");\n        require(project.endTime > block.timestamp, \"!ended\");\n\n        // check is user has enough NFT to stake\n        require(\n            IERC1155(address(projectMan)).balanceOf(_sender, projectId) >= qty,\n            \"balance <\"\n        );\n\n        // update stake info\n        StakeInfo memory staker = stakers[_sender][projectId];\n\n        HoldingInfo memory hld = holdings[_sender][project.id];\n\n        uint256 holdingRewards = _accumHoldingRewards(_sender, project, hld);\n\n        // claim remaining holding rewards first if any\n        if (holdingRewards > 0) {\n            stableCoin.safeTransfer(_sender, holdingRewards);\n            emit CollectRewards(_sender, projectId, holdingRewards);\n        }\n\n        uint64 endTime = min(uint64(block.timestamp), project.endTime);\n\n        // update accum if already staked before\n        if (staker.qty > 0 && staker.startTime < endTime) {\n            staker.accumRewards += calculateRewards(\n                staker.qty * project.price,\n                staker.startTime,\n                endTime,\n                project.stakedApy\n            );\n        }\n\n        staker.qty += qty;\n        staker.startTime = uint64(block.timestamp);\n\n        hld.qty -= qty;\n\n        stakers[_sender][projectId] = staker;\n        holdings[_sender][project.id] = hld;\n\n        return true;\n    }\n\n    function max(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a <= b ? a : b;\n    }\n\n    /**\n     * @dev get user stake info.\n     */\n    function getStakingInfo(\n        address _staker,\n        uint32 projectId\n    ) external view returns (StakeInfo memory) {\n        StakeInfo memory _stakeInfo = stakers[_staker][projectId];\n        ProjectInfo memory project = _getProject(projectId);\n        uint64 endTime = min(uint64(block.timestamp), project.endTime);\n\n        if (_stakeInfo.startTime > endTime) {\n            return _stakeInfo;\n        }\n\n        _stakeInfo.accumRewards += calculateRewards(\n            _stakeInfo.qty * project.price,\n            _stakeInfo.startTime,\n            endTime,\n            project.stakedApy\n        );\n        return _stakeInfo;\n    }\n\n    function _projectEnd(\n        ProjectInfo memory project\n    ) internal view returns (bool) {\n        return block.timestamp >= project.startTime + ((1 days) * project.term);\n    }\n\n    function isProjectEnd(uint32 id) external view returns (bool) {\n        ProjectInfo memory project = _getProject(id);\n        return _projectEnd(project);\n    }\n\n    function unstake(uint32 projectId, uint32 qty) external returns (bool) {\n        require(!paused, \"paused\");\n        require(qty > 0, \"!qty\");\n\n        address _sender = msg.sender;\n\n        ProjectInfo memory project = _getProject(projectId);\n        require(project.status == ACTIVE, \"!active\");\n\n        StakeInfo memory _stakerInfo = stakers[_sender][projectId];\n\n        require(_stakerInfo.qty != 0, \"!staker.qty\");\n\n        // check is user has enough staked amount to unstake\n        require(_stakerInfo.qty >= qty, \"qty >\");\n\n        // unable to unstake until project end\n        require(_projectEnd(project), \"!end\");\n\n        uint64 endsTime = min(uint64(block.timestamp), project.endTime);\n\n        if (_stakerInfo.startTime < endsTime) {\n            // update accum rewards\n            _stakerInfo.accumRewards += calculateRewards(\n                _stakerInfo.qty * project.price,\n                _stakerInfo.startTime,\n                endsTime,\n                project.stakedApy\n            );\n        }\n\n        _stakerInfo.qty -= qty;\n        _stakerInfo.startTime = uint64(block.timestamp);\n\n        stakers[_sender][projectId] = _stakerInfo;\n\n        // update holding's qty\n        HoldingInfo memory hld = holdings[_sender][project.id];\n        hld.qty += qty;\n        holdings[_sender][project.id] = hld;\n\n        return true;\n    }\n\n    /**\n     * This function allows the user to collect rewards from staking and holding\n     * tokens in a given project.\n     * It takes in two parameters: 'projectId' and 'rewardType'. It first checks to\n     * make sure staking is not paused\n     * and that a valid type of reward is specified. Afterward, it checks that the\n     * project status is active and then\n     * collects rewards. If the reward type indicates staking rewards, it calculates\n     * the rewards earned,\n     * updates the stake information and starts a new stake period. Afterwards, it\n     * transfers the collected rewards\n     * to the user and emits the CollectRewards event.\n     *\n     * @param projectId The ID of the project to collect rewards from.\n     * @param rewardType {uint16} The type of reward to collect. Can be\n     *                   REWARD_TYPE_HOLDING, REWARD_TYPE_STAKING or both.\n     * @return {bool} Boolean indicating success.\n     */\n    function collectRewards(\n        uint32 projectId,\n        uint16 rewardType\n    ) external nonReentrant returns (bool) {\n        require(!paused, \"paused\");\n        require(\n            (rewardType & REWARD_TYPE_HOLDING) != 0 ||\n                (rewardType & REWARD_TYPE_STAKING) != 0,\n            \"!type\"\n        );\n\n        address _sender = msg.sender;\n\n        ProjectInfo memory project = _getProject(projectId);\n        require(project.status == ACTIVE, \"!active\");\n        require(project.startTime <= block.timestamp, \"!start\");\n\n        StakeInfo memory stk = stakers[_sender][projectId];\n\n        uint256 _collectedTotal = 0;\n\n        if ((rewardType & REWARD_TYPE_HOLDING) != 0) {\n            // collect holding rewards\n            HoldingInfo memory _holding = holdings[_sender][project.id];\n            _collectedTotal = _accumHoldingRewards(_sender, project, _holding);\n        }\n\n        if ((rewardType & REWARD_TYPE_STAKING) != 0) {\n            require(stk.qty > 0, \"!staked\");\n\n            // if staked, then claim for staked rewards\n            // update accum rewards\n            uint64 endTime = min(uint64(block.timestamp), project.endTime);\n\n            if (stk.startTime > endTime) {\n                return false;\n            }\n\n            uint256 _accumRewards = stk.accumRewards;\n            _accumRewards = calculateRewards(\n                stk.qty * project.price,\n                stk.startTime,\n                endTime,\n                project.stakedApy\n            );\n\n            stk.startTime = uint64(block.timestamp);\n            stk.accumRewards = 0;\n            stk.claimedRewards += _accumRewards;\n\n            stakers[_sender][projectId] = stk;\n\n            holdings[_sender][projectId].startTime = stk.startTime;\n\n            _collectedTotal += _accumRewards;\n        }\n\n        // transfer rewards to user\n        if (_collectedTotal > 0) {\n            stableCoin.safeTransfer(_sender, _collectedTotal);\n            emit CollectRewards(_sender, projectId, _collectedTotal);\n            return true;\n        }\n        // stableCoin.safeTransfer(_sender, _accumRewards);\n\n        return false;\n    }\n\n    /**\n     * This function calculates the total accumulated rewards for a given user and\n     * project.\n     * It takes in an '_sender' address and 'project' object.\n     * It then checks if the user has any tokens in holdings and calculates the\n     * rewards accordingly.\n     * Finally, it updates the holding information and returns the accumulated\n     * rewards.\n     *\n     * @param _sender The address of the user who's rewards will be calculated.\n     * @param project Project object containing project info.\n     * @return {uint256} The total accumulated rewards for the given user and\n     * project.\n     */\n    function _accumHoldingRewards(\n        address _sender,\n        ProjectInfo memory project,\n        HoldingInfo memory hld\n    ) private returns (uint256) {\n        if (hld.qty == 0) {\n            return 0;\n        }\n\n        uint64 endTime = min(uint64(block.timestamp), project.endTime);\n\n        if (hld.startTime > endTime) {\n            return 0;\n        }\n\n        uint256 _accumRewards = hld.accumRewards;\n\n        _accumRewards += calculateRewards(\n            hld.qty * project.price,\n            hld.startTime,\n            endTime,\n            project.apy\n        );\n        hld.startTime = uint64(block.timestamp);\n        hld.accumRewards = 0;\n        hld.claimedRewards += _accumRewards;\n\n        holdings[_sender][project.id] = hld;\n\n        return _accumRewards;\n    }\n\n    /**\n     * @dev Function to collect specific amount of rewards from project manually,\n     *      rewards is calculated off-chain and need authorization signature to proceed.\n     *      This procedure can work in paused state (for emergency purpose).\n     * @param projectId the ID of project.\n     * @param amount the amount of rewards to collect.\n     * @param nonce the nonce of the signature.\n     * @param sig the signature to authorize the transaction.\n     */\n    function collectRewardsBy(\n        uint32 projectId,\n        uint256 amount,\n        uint64 nonce,\n        Sig memory sig\n    ) external nonReentrant returns (bool) {\n        require(nonce >= uint64(block.timestamp) / 60, \"x nonce\");\n        require(usedNonce_[nonce] == 0, \"x nonce\");\n\n        ProjectInfo memory project = _getProject(projectId);\n\n        require(project.id != 0, \"!project\");\n\n        address _sender = msg.sender;\n\n        StakeInfo memory stk = stakers[_sender][projectId];\n\n        require(stk.qty != 0, \"!staker.qty\");\n\n        // check signature\n        bytes32 message = sigPrefixed(\n            keccak256(abi.encodePacked(projectId, _sender, amount, nonce))\n        );\n\n        require(_isSigner(admin, message, sig), \"x signature\");\n\n        usedNonce_[nonce] = 1;\n\n        uint256 _accumRewards = stk.accumRewards;\n\n        uint64 endTime = min(uint64(block.timestamp), project.endTime);\n\n        // if (stk.startTime > endTime) {\n        //     return false;\n        // }\n\n        _accumRewards += calculateRewards(\n            stk.qty * project.price,\n            stk.startTime,\n            endTime,\n            project.stakedApy\n        );\n\n        // amount must be less or equal to accumRewards\n        require(amount <= _accumRewards, \"x amount\");\n\n        stk.startTime = uint64(block.timestamp);\n        stk.accumRewards = _accumRewards - amount;\n        stk.claimedRewards += amount;\n\n        stakers[_sender][projectId] = stk;\n\n        // transfer rewards to staker\n        stableCoin.safeTransfer(_sender, amount);\n\n        emit CollectRewards(_sender, projectId, amount);\n\n        return true;\n    }\n\n    /**\n     * @dev check is project exists\n     */\n    function _checkProject(ProjectInfo memory project) internal pure {\n        require(project.id > 0, \"!project\");\n    }\n\n    /**\n     * @dev get holding information on project of user\n     */\n    function getHoldingInfo(\n        address user,\n        uint32 projectId\n    ) external view returns (HoldingInfo memory) {\n        HoldingInfo memory _holding = holdings[user][projectId];\n        ProjectInfo memory project = _getProject(projectId);\n        uint64 endTime = min(uint64(block.timestamp), project.endTime);\n\n        if (_holding.startTime > endTime) {\n            return _holding;\n        }\n\n        _holding.accumRewards += calculateRewards(\n            _holding.qty * project.price,\n            _holding.startTime,\n            endTime,\n            project.apy\n        );\n        return _holding;\n    }\n\n    function getHoldingInfoRaw(\n        address user,\n        uint32 projectId\n    ) external view returns (HoldingInfo memory) {\n        return holdings[user][projectId];\n    }\n\n    function setHoldingInfoData(\n        address user,\n        uint32 projectId,\n        HoldingInfo memory holding\n    ) external onlyProjectMan {\n        holdings[user][projectId] = holding;\n    }\n\n    function getStakingInfoRaw(\n        address user,\n        uint32 projectId\n    ) public view returns (StakeInfo memory) {\n        StakeInfo memory staker = stakers[user][projectId];\n        return staker;\n    }\n\n    function _checkAddress(address addr) private pure {\n        require(addr != address(0), \"x addr\");\n    }\n\n    /**\n     * @dev Withdraw amount of deposit from this contract to `to` address.\n     *      Caller of this function must be owner.\n     * @param amount to withdraw.\n     * @param to address to withdraw to.\n     */\n    function withdrawTo(uint256 amount, address to) external onlyOwner {\n        _checkAddress(to);\n        require(amount > 0, \"!amount\");\n\n        require(stableCoin.balanceOf(address(this)) >= amount, \"balance <\");\n\n        stableCoin.safeTransferFrom(address(this), to, amount);\n\n        emit BalanceWithdraw(to, amount);\n    }\n\n    /**\n     * This function is used to pause or unpause contract.\n     * Only the owner of the contract or the project manager contract can call this function.\n     *\n     * @param _paused A boolean indicating whether should be paused or not.\n     */\n    function pause(bool _paused) external {\n        require(\n            owner() == _msgSender() || address(projectMan) == _msgSender(),\n            \"!owner\"\n        );\n        paused = _paused;\n    }\n}\n",
  "sourceMap": "1777:15889:20:-:0;;;1951:26;;;-1:-1:-1;;;;1951:26:20;;;2546:226;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1637:1:1;1742:7;:22;867:23:0;666:10:11;867:9:0;:23::i;:::-;2605:10:20;:31;;-1:-1:-1;;;;;;2605:31:20;-1:-1:-1;;;;;2605:31:20;;;;;2646:17;2656:6;2646:9;:17::i;:::-;2699:10;;:66;;-1:-1:-1;;;;;2699:10:20;2740:4;-1:-1:-1;;2699:32:20;;;;;;;:66;;:::i;:::-;2546:226;;1777:15889;;2041:169:0;2115:6;;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;;2163:40;;2115:6;;;2131:17;2115:6;;2163:40;;2096:16;;2163:40;2086:124;2041:169;:::o;662:120:17:-;726:5;:15;;-1:-1:-1;;;;;;726:15:17;-1:-1:-1;;;;;726:15:17;;;;;;;;756:19;;;;-1:-1:-1;;756:19:17;662:120;:::o;1955:310:9:-;2104:39;;-1:-1:-1;;;2104:39:9;;2128:4;2104:39;;;706:34:30;-1:-1:-1;;;;;776:15:30;;;756:18;;;749:43;2081:20:9;;2146:5;;2104:15;;;;;641:18:30;;2104:39:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:47;;;;:::i;:::-;2188:69;;;-1:-1:-1;;;;;1411:32:30;;2188:69:9;;;1393:51:30;1460:18;;;;1453:34;;;2188:69:9;;;;;;;;;;1366:18:30;;;;2188:69:9;;;;;;;;-1:-1:-1;;;;;2188:69:9;;;-1:-1:-1;;;2188:69:9;;;;1453:34:30;;-1:-1:-1;2161:97:9;;2181:5;;2188:69;2161:19;:97;:::i;:::-;2071:194;1955:310;;;:::o;3140:706::-;3559:23;3585:69;3613:4;3585:69;;;;;;;;;;;;;;;;;3593:5;-1:-1:-1;;;;;3585:27:9;;;;;;;:69;;;;;:::i;:::-;3668:17;;3559:95;;-1:-1:-1;3668:21:9;3664:176;;3763:10;3752:30;;;;;;;;;;;;:::i;:::-;3744:85;;;;-1:-1:-1;;;3744:85:9;;1982:2:30;3744:85:9;;;1964:21:30;2021:2;2001:18;;;1994:30;2060:34;2040:18;;;2033:62;-1:-1:-1;;;2111:18:30;;;2104:40;2161:19;;3744:85:9;;;;;;;;;3210:636;3140:706;;:::o;3461:223:10:-;3594:12;3625:52;3647:6;3655:4;3661:1;3664:12;3625:21;:52::i;:::-;3618:59;;3461:223;;;;;;:::o;4548:499::-;4713:12;4770:5;4745:21;:30;;4737:81;;;;-1:-1:-1;;;4737:81:10;;2393:2:30;4737:81:10;;;2375:21:30;2432:2;2412:18;;;2405:30;2471:34;2451:18;;;2444:62;-1:-1:-1;;;2522:18:30;;;2515:36;2568:19;;4737:81:10;2191:402:30;4737:81:10;1034:20;;4828:60;;;;-1:-1:-1;;;4828:60:10;;2800:2:30;4828:60:10;;;2782:21:30;2839:2;2819:18;;;2812:30;2878:31;2858:18;;;2851:59;2927:18;;4828:60:10;2598:353:30;4828:60:10;4900:12;4914:23;4941:6;-1:-1:-1;;;;;4941:11:10;4960:5;4967:4;4941:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4899:73:10;;-1:-1:-1;4899:73:10;-1:-1:-1;4989:51:10;4899:73;;5027:12;4989:16;:51::i;:::-;4982:58;4548:499;-1:-1:-1;;;;;;;4548:499:10:o;7161:692::-;7307:12;7335:7;7331:516;;;-1:-1:-1;7365:10:10;7358:17;;7331:516;7476:17;;:21;7472:365;;7670:10;7664:17;7730:15;7717:10;7713:2;7709:19;7702:44;7472:365;7809:12;7802:20;;-1:-1:-1;;;7802:20:10;;;;;;;;:::i;14:177:30:-;93:13;;-1:-1:-1;;;;;135:31:30;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;803:184::-;873:6;926:2;914:9;905:7;901:23;897:32;894:52;;;942:1;939;932:12;894:52;-1:-1:-1;965:16:30;;803:184;-1:-1:-1;803:184:30:o;992:222::-;1057:9;;;1078:10;;;1075:133;;;1130:10;1125:3;1121:20;1118:1;1111:31;1165:4;1162:1;1155:15;1193:4;1190:1;1183:15;1075:133;992:222;;;;:::o;1498:277::-;1565:6;1618:2;1606:9;1597:7;1593:23;1589:32;1586:52;;;1634:1;1631;1624:12;1586:52;1666:9;1660:16;1719:5;1712:13;1705:21;1698:5;1695:32;1685:60;;1741:1;1738;1731:12;2956:250;3041:1;3051:113;3065:6;3062:1;3059:13;3051:113;;;3141:11;;;3135:18;3122:11;;;3115:39;3087:2;3080:10;3051:113;;;-1:-1:-1;;3198:1:30;3180:16;;3173:27;2956:250::o;3211:287::-;3340:3;3378:6;3372:13;3394:66;3453:6;3448:3;3441:4;3433:6;3429:17;3394:66;:::i;:::-;3476:16;;;;;3211:287;-1:-1:-1;;3211:287:30:o;3503:396::-;3652:2;3641:9;3634:21;3615:4;3684:6;3678:13;3727:6;3722:2;3711:9;3707:18;3700:34;3743:79;3815:6;3810:2;3799:9;3795:18;3790:2;3782:6;3778:15;3743:79;:::i;:::-;3883:2;3862:15;-1:-1:-1;;3858:29:30;3843:45;;;;3890:2;3839:54;;3503:396;-1:-1:-1;;3503:396:30:o;:::-;1777:15889:20;;;;;;",
  "sourcePath": "contracts/Staker.sol",
  "type": "contract"
}